'use strict';

var electron = require('electron');
var electronDl = require('electron-dl');
var rimraf = require('rimraf');
var redux = require('redux');
var fs = require('fs');
var path = require('path');
var i18next = require('i18next');
var reselect = require('reselect');
var detectBrowsers = require('detect-browsers');
var ElectronStore = require('electron-store');
var semver$1 = require('semver');
require('@bugsnag/js');
var axios = require('axios');
var xhr = require('@ewsjs/xhr');
var ewsJavascriptApi = require('ews-javascript-api');
var promises = require('node:fs/promises');
var node_url = require('node:url');
var jwt = require('jsonwebtoken');
require('moment');
var process$1 = require('process');
var electronUpdater = require('electron-updater');

var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var electronDl__default = /*#__PURE__*/_interopDefault(electronDl);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);
var i18next__default = /*#__PURE__*/_interopDefault(i18next);
var ElectronStore__default = /*#__PURE__*/_interopDefault(ElectronStore);
var axios__default = /*#__PURE__*/_interopDefault(axios);
var jwt__default = /*#__PURE__*/_interopDefault(jwt);
var process__default = /*#__PURE__*/_interopDefault(process$1);

var files = [
	"app/**/*",
	"package.json"
];
var extraResources = [
	"build/icon.ico",
	"servers.json"
];
var appId = "com.everjust.chat";
var protocols = {
	name: "EVERJUST Chat",
	schemes: [
		"everjustchat"
	]
};
var afterPack = "./build/afterPack.js";
var mac = {
	category: "public.app-category.productivity",
	target: [
		"dmg",
		"pkg",
		"zip",
		"mas"
	],
	icon: "build/icon.icns",
	bundleVersion: "25072",
	helperBundleId: "com.everjust.chat.helper",
	type: "distribution",
	artifactName: "everjust-chat-${version}-${os}.${ext}",
	mergeASARs: false,
	extendInfo: {
		NSMicrophoneUsageDescription: "I need access to your microphone to record the audio you want to send.",
		NSCameraUsageDescription: "I need access to your camera to record the video you want to send.",
		NSScreenCaptureDescription: "I need access to your screen to share it through video calls when you want to."
	},
	hardenedRuntime: true,
	gatekeeperAssess: false,
	provisioningProfile: "Desktop.provisionprofile",
	entitlements: "build/entitlements.mac.plist",
	entitlementsInherit: "build/entitlements.mac.plist"
};
var dmg = {
	background: "build/background.png",
	contents: [
		{
			type: "dir",
			x: 100,
			y: 211
		},
		{
			type: "link",
			path: "/Applications",
			x: 500,
			y: 211
		}
	]
};
var pkg = {
	isRelocatable: false,
	overwriteAction: "upgrade"
};
var mas = {
	entitlements: "build/entitlements.mas.plist",
	entitlementsInherit: "build/entitlements.mas.inherit.plist",
	entitlementsLoginHelper: "build/entitlements.mas.inherit.plist",
	hardenedRuntime: false,
	asarUnpack: [
		"node_modules"
	],
	artifactName: "rocketchat-${version}-mas.${ext}"
};
var win = {
	target: [
		{
			target: "nsis",
			arch: [
				"x64",
				"ia32"
			]
		},
		{
			target: "msi",
			arch: [
				"x64",
				"ia32"
			]
		},
		{
			target: "zip",
			arch: [
				"x64",
				"ia32"
			]
		}
	],
	icon: "build/icon.ico",
	legalTrademarks: "",
	verifyUpdateCodeSignature: true,
	requestedExecutionLevel: "asInvoker",
	signAndEditExecutable: true,
	artifactName: "rocketchat-${version}-${os}-${arch}.${ext}"
};
var nsis = {
	oneClick: false,
	perMachine: false,
	allowElevation: true,
	allowToChangeInstallationDirectory: true,
	installerIcon: "build/installerIcon.ico",
	uninstallerIcon: "build/uninstallerIcon.ico",
	installerSidebar: "build/installerSidebar.bmp",
	uninstallerSidebar: "build/uninstallerSidebar.bmp",
	uninstallDisplayName: "${productName} ${version}",
	include: "build/installer.nsh",
	license: "LICENSE",
	deleteAppDataOnUninstall: false,
	displayLanguageSelector: false,
	unicode: true,
	warningsAsErrors: true,
	runAfterFinish: true,
	createDesktopShortcut: "always",
	createStartMenuShortcut: true,
	menuCategory: false
};
var appx = {
	backgroundColor: "#2f343d",
	languages: [
		"en-US",
		"en-GB",
		"pt-BR"
	],
	identityName: "0B67C87C.RocketChat",
	publisher: "CN=BBFF7141-7CAF-4FCD-8930-083FCDE6E854",
	publisherDisplayName: "Rocket.Chat Technologies Corp.",
	applicationId: "RocketChat",
	displayName: "Rocket.Chat"
};
var linux = {
	target: [
		"AppImage",
		"tar.gz",
		"deb",
		"rpm",
		"snap",
		"flatpak"
	],
	executableName: "rocketchat-desktop",
	category: "GNOME;GTK;Network;InstantMessaging",
	desktop: {
		entry: {
			Name: "Rocket.Chat",
			Comment: "Official Rocket.Chat Desktop Client",
			GenericName: "Rocket.Chat",
			Categories: "GNOME;GTK;Network;InstantMessaging"
		}
	},
	artifactName: "rocketchat-${version}-${os}-${arch}.${ext}"
};
var deb = {
	fpm: [
		"--after-install=build/linux/postinst.sh"
	]
};
var rpm = {
	fpm: [
		"--rpm-rpmbuild-define=_build_id_links none"
	]
};
var snap = {
	plugs: [
		"desktop",
		"desktop-legacy",
		"home",
		"x11",
		"unity7",
		"browser-support",
		"network",
		"gsettings",
		"pulseaudio",
		"opengl",
		"camera",
		"audio-playback",
		"audio-record",
		"screen-inhibit-control",
		"upower-observe"
	]
};
var afterSign = "./build/notarize.js";
var generateUpdatesFilesForAllChannels = true;
var publish = [
	{
		provider: "github",
		owner: "RocketChat",
		repo: "Rocket.Chat.Electron",
		vPrefixedTagName: false
	}
];
var electronBuilderJson = {
	files: files,
	extraResources: extraResources,
	appId: appId,
	protocols: protocols,
	afterPack: afterPack,
	mac: mac,
	dmg: dmg,
	pkg: pkg,
	mas: mas,
	win: win,
	nsis: nsis,
	appx: appx,
	linux: linux,
	deb: deb,
	rpm: rpm,
	snap: snap,
	afterSign: afterSign,
	generateUpdatesFilesForAllChannels: generateUpdatesFilesForAllChannels,
	publish: publish
};

var workspaces = [
	"workspaces/*"
];
var productName = "EVERJUST Chat";
var name = "everjust-chat";
var description = "EVERJUST Team Communication Platform - Desktop Client";
var version = "4.8.0";
var author = "EVERJUST <company@everjust.com>";
var copyright = "Â© 2025, EVERJUST";
var homepage = "https://everjust.com";
var license = "MIT";
var goUrlShortener = "go.rocket.chat";
var keywords = [
	"rocketchat",
	"desktop",
	"electron"
];
var repository = {
	type: "git",
	url: "git+https://github.com/RocketChat/Rocket.Chat.Electron.git"
};
var bugs = {
	url: "https://github.com/RocketChat/Rocket.Chat.Electron/issues"
};
var main = "app/main.js";
var scripts = {
	postinstall: "run-s install-app-deps clean patch-package",
	"patch-package": "patch-package",
	start: "run-s build:watch",
	clean: "rimraf app dist",
	build: "rollup -c",
	"build:watch": "rollup -c -w",
	"build-mac": "yarn build && yarn electron-builder --publish never --mac --universal",
	"build-mas": "yarn build && yarn electron-builder --publish never --mac mas --universal",
	"build-win": "yarn build && yarn electron-builder --publish never --win",
	"build-linux": "yarn build && yarn electron-builder --publish never --linux",
	"build-assets": "ts-node -O '{\"module\":\"commonjs\"}' src/buildAssets.ts",
	"build-assets-win": "ts-node -O \"{\\\"module\\\":\\\"commonjs\\\"}\" src/buildAssets.ts",
	release: "yarn electron-builder --publish onTagOrDraft --x64",
	"install-app-deps": "electron-builder install-app-deps",
	test: "xvfb-maybe jest --forceExit --detectOpenHandles --maxWorkers=1",
	changelog: "conventional-changelog -p angular -i CHANGELOG.md -s",
	lint: "run-s .:lint:eslint .:lint:tsc",
	".:lint:eslint": "eslint .",
	".:lint:tsc": "tsc --noEmit",
	"lint-fix": "run-s .:lint-fix:eslint .:lint:tsc",
	".:lint-fix:eslint": "eslint --fix .",
	"workspaces:build": "yarn workspaces foreach -At run build"
};
var dependencies = {
	"@bugsnag/js": "~7.22.3",
	"@emotion/css": "~11.11.2",
	"@emotion/react": "~11.11.3",
	"@emotion/styled": "~11.11.0",
	"@ewsjs/xhr": "~2.0.2",
	"@rocket.chat/css-in-js": "~0.31.25",
	"@rocket.chat/fuselage": "0.58.0",
	"@rocket.chat/fuselage-hooks": "~0.33.1",
	"@rocket.chat/fuselage-polyfills": "~0.31.25",
	"@rocket.chat/icons": "0.37.0",
	axios: "~1.6.4",
	"detect-browsers": "~6.1.0",
	"electron-dl": "3.5.2",
	"electron-store": "~8.1.0",
	"electron-updater": "^5.3.0",
	"ews-javascript-api": "~0.13.2",
	i18next: "~23.7.16",
	jsonwebtoken: "~9.0.2",
	moment: "~2.30.1",
	react: "~18.3.1",
	"react-dom": "~18.3.1",
	"react-hook-form": "~7.49.2",
	"react-i18next": "~14.0.0",
	"react-keyed-flatten-children": "~3.0.0",
	"react-redux": "~9.0.4",
	"react-virtuoso": "~4.6.2",
	redux: "~5.0.1",
	reselect: "~5.0.1",
	rimraf: "~5.0.7",
	semver: "~7.5.4"
};
var devDependencies = {
	"@babel/core": "~7.23.9",
	"@babel/eslint-parser": "~7.23.3",
	"@babel/plugin-proposal-class-properties": "~7.18.6",
	"@babel/plugin-proposal-function-bind": "~7.23.3",
	"@babel/preset-env": "~7.23.7",
	"@babel/preset-react": "~7.23.3",
	"@babel/preset-typescript": "~7.23.3",
	"@electron/fuses": "~1.8.0",
	"@fiahfy/icns-convert": "~0.0.12",
	"@fiahfy/ico-convert": "~0.0.12",
	"@kayahr/jest-electron-runner": "29.14.0",
	"@rocket.chat/eslint-config": "~0.7.0",
	"@rocket.chat/prettier-config": "~0.31.25",
	"@rollup/plugin-babel": "~6.0.4",
	"@rollup/plugin-commonjs": "~25.0.7",
	"@rollup/plugin-json": "~6.1.0",
	"@rollup/plugin-node-resolve": "~15.2.3",
	"@rollup/plugin-replace": "~5.0.5",
	"@types/electron-devtools-installer": "~2.2.5",
	"@types/jest": "~29.5.11",
	"@types/jsonwebtoken": "~9.0.5",
	"@types/node": "~16.18.69",
	"@types/react": "~18.3.18",
	"@types/react-dom": "~18.3.5",
	"@typescript-eslint/eslint-plugin": "~6.17.0",
	"@typescript-eslint/parser": "~6.17.0",
	"builtin-modules": "~3.3.0",
	chokidar: "~3.5.3",
	"conventional-changelog-cli": "~4.1.0",
	"convert-svg-to-png": "~0.6.4",
	electron: "^37.2.4",
	"electron-builder": "26.0.3",
	"electron-devtools-installer": "^3.2.0",
	"electron-notarize": "^1.2.2",
	eslint: "~8.56.0",
	"eslint-config-prettier": "~9.1.0",
	"eslint-import-resolver-typescript": "~3.6.1",
	"eslint-plugin-import": "~2.26.0",
	"eslint-plugin-prettier": "~5.1.2",
	"eslint-plugin-react": "~7.33.2",
	"eslint-plugin-react-hooks": "~4.6.0",
	jest: "~29.7.0",
	"jest-environment-jsdom": "~29.7.0",
	jimp: "~0.22.10",
	"npm-run-all": "~4.1.5",
	"patch-package": "~8.0.0",
	prettier: "~3.2.5",
	puppeteer: "23.1.1",
	rollup: "~4.9.6",
	"rollup-plugin-copy": "~3.5.0",
	"ts-jest": "~29.1.4",
	"ts-node": "~10.9.2",
	typescript: "~5.7.3",
	"xvfb-maybe": "~0.2.1"
};
var optionalDependencies = {
	fsevents: "2.3.3"
};
var engines = {
	node: ">=22.17.1"
};
var resolutions = {
	"@fiahfy/icns-convert/sharp": "0.29.3",
	"@fiahfy/ico-convert/sharp": "0.29.3"
};
var volta = {
	node: "22.17.1",
	yarn: "4.0.2"
};
var packageManager = "yarn@4.6.0";
var packageJson = {
	"private": true,
	workspaces: workspaces,
	productName: productName,
	name: name,
	description: description,
	version: version,
	author: author,
	copyright: copyright,
	homepage: homepage,
	license: license,
	goUrlShortener: goUrlShortener,
	keywords: keywords,
	repository: repository,
	bugs: bugs,
	main: main,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies,
	optionalDependencies: optionalDependencies,
	engines: engines,
	resolutions: resolutions,
	volta: volta,
	packageManager: packageManager
};

const JITSI_SERVER_CAPTURE_SCREEN_PERMISSION_UPDATED = 'jitsi-server-capture-screen-permission-updated';
const JITSI_SERVER_CAPTURE_SCREEN_PERMISSIONS_CLEARED = 'jitsi-server-capture-screen-permissions-cleared';

function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

const isFSA = action => typeof action === 'object' && action !== null && !Array.isArray(action) && 'type' in action && typeof action.type === 'string';
const hasMeta = action => 'meta' in action && typeof action.meta === 'object' && action.meta !== null;
const isResponse = action => hasMeta(action) && action.meta.response === true;
const isLocallyScoped = action => hasMeta(action) && action.meta.scope === 'local';
const isSingleScoped = action => {
  var _ipcMeta, _ipcMeta2;
  return ((_ipcMeta = action.ipcMeta) === null || _ipcMeta === void 0 ? void 0 : _ipcMeta.webContentsId) && ((_ipcMeta2 = action.ipcMeta) === null || _ipcMeta2 === void 0 ? void 0 : _ipcMeta2.scope) === 'single';
};
const isErrored = action => 'meta' in action && action.error === true && action.payload instanceof Error;
const hasPayload = action => 'payload' in action;
const isResponseTo = (id, ...types) => action => isResponse(action) && types.includes(action.type) && action.meta.id === id;

const invoke = (webContents, channel, ...args) => new Promise((resolve, reject) => {
  const id = Math.random().toString(16).slice(2);
  electron.ipcMain.once(`${channel}@${id}`, (_, {
    resolved,
    rejected
  }) => {
    if (rejected) {
      const error = new Error(rejected.message);
      error.name = rejected.name;
      error.stack = rejected.stack;
      reject(error);
      return;
    }
    resolve(resolved);
  });
  webContents.send(channel, id, ...args);
});
const handle = (channel, handler) => {
  electron.ipcMain.handle(channel, (event, ...args) => handler(event.sender, ...args));
  return () => {
    electron.ipcMain.removeHandler(channel);
  };
};

var ActionScope = /*#__PURE__*/function (ActionScope) {
  ActionScope["LOCAL"] = "local";
  ActionScope["SINGLE"] = "single";
  return ActionScope;
}(ActionScope || {});
const forwardToRenderers = api => {
  const renderers = new Set();
  handle('redux/get-initial-state', async webContents => {
    renderers.add(webContents);
    webContents.addListener('destroyed', () => {
      renderers.delete(webContents);
    });
    return api.getState();
  });
  handle('redux/action-dispatched', async (webContents, action) => {
    var _webContents$hostWebC, _webContents$hostWebC2;
    api.dispatch({
      ...action,
      ipcMeta: {
        webContentsId: webContents.id,
        ...(((_webContents$hostWebC = webContents.hostWebContents) === null || _webContents$hostWebC === void 0 ? void 0 : _webContents$hostWebC.id) && {
          viewInstanceId: (_webContents$hostWebC2 = webContents.hostWebContents) === null || _webContents$hostWebC2 === void 0 ? void 0 : _webContents$hostWebC2.id
        }),
        ...action.ipcMeta
      }
    });
  });
  return next => action => {
    if (!isFSA(action) || isLocallyScoped(action)) {
      return next(action);
    }
    const rendererAction = {
      ...action,
      meta: {
        ...(hasMeta(action) && action.meta),
        scope: ActionScope.LOCAL
      }
    };
    if (isSingleScoped(action)) {
      const {
        webContentsId,
        viewInstanceId
      } = action.ipcMeta;
      [...renderers].filter(w => w.id === webContentsId || viewInstanceId && w.id === viewInstanceId).forEach(w => invoke(w, 'redux/action-dispatched', rendererAction));
      return next(action);
    }
    renderers.forEach(webContents => {
      invoke(webContents, 'redux/action-dispatched', rendererAction);
    });
    return next(action);
  };
};

const APP_PATH_SET = 'app/path-set';
const APP_VERSION_SET = 'app/version-set';
const APP_SETTINGS_LOADED = 'app/settings-loaded';
const APP_ALLOWED_NTLM_CREDENTIALS_DOMAINS_SET = 'app/allowed-ntlm-credentials-domains-set';
const APP_MAIN_WINDOW_TITLE_SET = 'app/main-window-title-set';
const APP_MACHINE_THEME_SET = 'app/machine-theme-set';

const allowedNTLMCredentialsDomains = (state = null, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        const {
          allowedNTLMCredentialsDomains = state
        } = action.payload;
        return allowedNTLMCredentialsDomains;
      }
    case APP_ALLOWED_NTLM_CREDENTIALS_DOMAINS_SET:
      {
        if (action.payload === null) return null;
        return action.payload;
      }
    default:
      return state;
  }
};

const appPath = (state = null, action) => {
  switch (action.type) {
    case APP_PATH_SET:
      return action.payload;
    default:
      return state;
  }
};

const appVersion = (state = null, action) => {
  switch (action.type) {
    case APP_VERSION_SET:
      return action.payload;
    default:
      return state;
  }
};

const machineTheme = (state = 'light', action) => {
  switch (action.type) {
    case APP_MACHINE_THEME_SET:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const mainWindowTitle = (state = null, action) => {
  switch (action.type) {
    case APP_MAIN_WINDOW_TITLE_SET:
      return action.payload;
    default:
      return state;
  }
};

const DOWNLOAD_CREATED = 'downloads/created';
const DOWNLOAD_REMOVED = 'dowloads/removed';
const DOWNLOADS_CLEARED = 'downloads/cleared';
const DOWNLOAD_UPDATED = 'downloads/updated';

const DownloadStatus = {
  ALL: 'All',
  PAUSED: 'Paused',
  CANCELLED: 'Cancelled'
};

const downloads = (state = {}, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        var _action$payload$downl;
        const initDownloads = (_action$payload$downl = action.payload.downloads) !== null && _action$payload$downl !== void 0 ? _action$payload$downl : {};
        Object.values(initDownloads).forEach(value => {
          if (value.state === 'progressing' || value.state === 'paused') {
            value.state = 'cancelled';
            value.status = DownloadStatus.CANCELLED;
          }
        });
        return initDownloads !== null && initDownloads !== void 0 ? initDownloads : {};
      }
    case DOWNLOAD_CREATED:
      {
        const download = action.payload;
        return {
          ...state,
          [download.itemId]: download
        };
      }
    case DOWNLOAD_UPDATED:
      {
        const newState = {
          ...state
        };
        newState[action.payload.itemId] = {
          ...newState[action.payload.itemId],
          ...action.payload
        };
        return newState;
      }
    case DOWNLOAD_REMOVED:
      {
        const newState = {
          ...state
        };
        delete newState[action.payload];
        return newState;
      }
    case DOWNLOADS_CLEARED:
      return {};
    default:
      return state;
  }
};

const allowedJitsiServers = (state = {}, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        const {
          allowedJitsiServers = {}
        } = action.payload;
        state = allowedJitsiServers;
        return state;
      }
    case JITSI_SERVER_CAPTURE_SCREEN_PERMISSION_UPDATED:
      {
        state = {
          ...state,
          [action.payload.jitsiServer]: action.payload.allowed
        };
        return state;
      }
    case JITSI_SERVER_CAPTURE_SCREEN_PERMISSIONS_CLEARED:
      {
        state = {};
        return state;
      }
    default:
      return state;
  }
};

const CERTIFICATES_CLEARED = 'certificates/cleared';
const CERTIFICATES_LOADED = 'certificates/loaded';
const CERTIFICATES_CLIENT_CERTIFICATE_REQUESTED = 'certificates/client-certificate-requested';
const TRUSTED_CERTIFICATES_UPDATED = 'trusted-certificates/updated';
const NOT_TRUSTED_CERTIFICATES_UPDATED = 'not-trusted-certificates/updated';
const SELECT_CLIENT_CERTIFICATE_DIALOG_CERTIFICATE_SELECTED = 'select-client-certificate-dialog/certificate-selected';
const SELECT_CLIENT_CERTIFICATE_DIALOG_DISMISSED = 'select-client-certificate-dialog/dismissed';
const EXTERNAL_PROTOCOL_PERMISSION_UPDATED = 'navigation/external-protocol-permission-updated';

const clientCertificates = (state = [], action) => {
  switch (action.type) {
    case CERTIFICATES_CLIENT_CERTIFICATE_REQUESTED:
      return action.payload;
    case SELECT_CLIENT_CERTIFICATE_DIALOG_CERTIFICATE_SELECTED:
    case SELECT_CLIENT_CERTIFICATE_DIALOG_DISMISSED:
      return [];
    default:
      return state;
  }
};
const trustedCertificates = (state = {}, action) => {
  switch (action.type) {
    case CERTIFICATES_LOADED:
    case TRUSTED_CERTIFICATES_UPDATED:
      return action.payload;
    case CERTIFICATES_CLEARED:
      return {};
    case APP_SETTINGS_LOADED:
      {
        const {
          trustedCertificates = state
        } = action.payload;
        return trustedCertificates;
      }
    default:
      return state;
  }
};
const notTrustedCertificates = (state = {}, action) => {
  switch (action.type) {
    case NOT_TRUSTED_CERTIFICATES_UPDATED:
      return action.payload;
    case CERTIFICATES_CLEARED:
      return {};
    case APP_SETTINGS_LOADED:
      {
        const {
          notTrustedCertificates = state
        } = action.payload;
        return notTrustedCertificates;
      }
    default:
      return state;
  }
};
const externalProtocols = (state = {}, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        const {
          externalProtocols = {}
        } = action.payload;
        state = externalProtocols;
        return state;
      }
    case EXTERNAL_PROTOCOL_PERMISSION_UPDATED:
      {
        state = {
          ...state,
          [action.payload.protocol]: action.payload.allowed
        };
        return state;
      }
    default:
      return state;
  }
};

const DEEP_LINKS_SERVER_ADDED = 'deep-links/server-added';
const DEEP_LINKS_SERVER_FOCUSED = 'deep-links/server-focused';

const OUTLOOK_CALENDAR_SET_CREDENTIALS = 'outlook-calendar/set-credentials';
const OUTLOOK_CALENDAR_ASK_CREDENTIALS = 'outlook-calendar/ask-credentials';
const OUTLOOK_CALENDAR_DIALOG_DISMISSED = 'outlook-calendar/dialog-dismissed';
const OUTLOOK_CALENDAR_SAVE_CREDENTIALS = 'outlook-calendar/save-credentials';

const ABOUT_DIALOG_DISMISSED = 'about-dialog/dismissed';
const ABOUT_DIALOG_TOGGLE_UPDATE_ON_START = 'about-dialog/toggle-update-on-start';
const ABOUT_DIALOG_UPDATE_CHANNEL_CHANGED = 'about-dialog/update-channel-changed';
const ADD_SERVER_VIEW_SERVER_ADDED = 'add-server/view-server-added';
const CLEAR_CACHE_TRIGGERED = 'clear-cache/triggered';
const CLEAR_CACHE_DIALOG_DELETE_LOGIN_DATA_CLICKED = 'clear-cache-dialog/delete-login-data-clicked';
const CLEAR_CACHE_DIALOG_KEEP_LOGIN_DATA_CLICKED = 'clear-cache-dialog/keep-login-data-clicked';
const LOADING_ERROR_VIEW_RELOAD_SERVER_CLICKED = 'loading-error-view/reload-server-clicked';
const MENU_BAR_ABOUT_CLICKED = 'menu-bar/about-clicked';
const MENU_BAR_ADD_NEW_SERVER_CLICKED = 'menu-bar/add-new-server-clicked';
const MENU_BAR_SELECT_SERVER_CLICKED = 'menu-bar/select-server-clicked';
const MENU_BAR_TOGGLE_IS_MENU_BAR_ENABLED_CLICKED = 'menu-bar/toggle-is-menu-bar-enabled-clicked';
const MENU_BAR_TOGGLE_IS_SHOW_WINDOW_ON_UNREAD_CHANGED_ENABLED_CLICKED = 'menu-bar/toggle-is-show-window-on-unread-changed-enabled-clicked';
const MENU_BAR_TOGGLE_IS_SIDE_BAR_ENABLED_CLICKED = 'menu-bar/toggle-is-side-bar-enabled-clicked';
const MENU_BAR_TOGGLE_IS_TRAY_ICON_ENABLED_CLICKED = 'menu-bar/toggle-is-tray-icon-enabled-clicked';
const MENU_BAR_TOGGLE_IS_DEVELOPER_MODE_ENABLED_CLICKED = 'menu-bar/toggle-is-developer-mode-enabled-clicked';
const MENU_BAR_TOGGLE_IS_VIDEO_CALL_DEVTOOLS_AUTO_OPEN_ENABLED_CLICKED = 'menu-bar/toggle-is-video-call-devtools-auto-open-enabled-clicked';
const ROOT_WINDOW_ICON_CHANGED = 'root-window/icon-changed';
const ROOT_WINDOW_STATE_CHANGED = 'root-window/state-changed';
const VIDEO_CALL_WINDOW_STATE_CHANGED = 'video-call-window/state-changed';
const SIDE_BAR_ADD_NEW_SERVER_CLICKED = 'side-bar/add-new-server-clicked';
const SIDE_BAR_CONTEXT_MENU_TRIGGERED = 'side-bar/context-menu-triggered';
const SIDE_BAR_DOWNLOADS_BUTTON_CLICKED = 'side-bar/downloads-button-clicked';
const SIDE_BAR_SETTINGS_BUTTON_CLICKED = 'side-bar/settings-button-clicked';
const SIDE_BAR_REMOVE_SERVER_CLICKED = 'side-bar/remove-server-clicked';
const SIDE_BAR_SERVER_SELECTED = 'side-bar/server-selected';
const SIDE_BAR_SERVERS_SORTED = 'side-bar/servers-sorted';
const TOUCH_BAR_FORMAT_BUTTON_TOUCHED = 'touch-bar/format-button-touched';
const TOUCH_BAR_SELECT_SERVER_TOUCHED = 'touch-bar/select-server-touched';
const UPDATE_DIALOG_DISMISSED = 'update-dialog/dismissed';
const UPDATE_DIALOG_INSTALL_BUTTON_CLICKED = 'update-dialog/install-button-clicked';
const UPDATE_DIALOG_REMIND_UPDATE_LATER_CLICKED = 'update-dialog/remind-update-later-clicked';
const UPDATE_DIALOG_SKIP_UPDATE_CLICKED = 'update-dialog/skip-update-clicked';
const WEBVIEW_READY = 'webview/ready';
const WEBVIEW_ATTACHED = 'webview/attached';
const WEBVIEW_DID_FAIL_LOAD = 'webview/did-fail-load';
const WEBVIEW_DID_NAVIGATE = 'webview/did-navigate';
const WEBVIEW_DID_START_LOADING = 'webview/did-start-loading';
const WEBVIEW_FAVICON_CHANGED = 'webview/favicon-changed';
const WEBVIEW_FOCUS_REQUESTED = 'webview/focus-requested';
const WEBVIEW_MESSAGE_BOX_BLURRED = 'webview/message-box-blurred';
const WEBVIEW_MESSAGE_BOX_FOCUSED = 'webview/message-box-focused';
const WEBVIEW_SCREEN_SHARING_SOURCE_REQUESTED = 'webview/screen-sharing-source-requested';
const WEBVIEW_SCREEN_SHARING_SOURCE_RESPONDED = 'webview/screen-sharing-source-responded';
const WEBVIEW_SIDEBAR_STYLE_CHANGED = 'webview/sidebar-style-changed';
const WEBVIEW_SIDEBAR_CUSTOM_THEME_CHANGED = 'webview/sidebar-custom-theme-changed';
const WEBVIEW_GIT_COMMIT_HASH_CHANGED = 'webview/git-commit-hash-changed';
const WEBVIEW_GIT_COMMIT_HASH_CHECK = 'webview/git-commit-hash-check';
const WEBVIEW_TITLE_CHANGED = 'webview/title-changed';
const WEBVIEW_PAGE_TITLE_CHANGED = 'webview/page-title-changed';
const WEBVIEW_UNREAD_CHANGED = 'webview/unread-changed';
const WEBVIEW_USER_LOGGED_IN = 'webview/user-loggedin';
const WEBVIEW_USER_THEME_APPEARANCE_CHANGED = 'webview/user-theme-appearance-changed';
const WEBVIEW_ALLOWED_REDIRECTS_CHANGED = 'webview/allowed-redirects-changed';
const SETTINGS_SET_REPORT_OPT_IN_CHANGED = 'settings/set-bugsnag-opt-in-changed';
const SETTINGS_SET_FLASHFRAME_OPT_IN_CHANGED = 'settings/set-flashframe-opt-in-changed';
const SETTINGS_SET_HARDWARE_ACCELERATION_OPT_IN_CHANGED = 'settings/set-hardware-acceleration-opt-in-changed';
const SETTINGS_SET_INTERNALVIDEOCHATWINDOW_OPT_IN_CHANGED = 'settings/set-internalvideochatwindow-opt-in-changed';
const SETTINGS_SET_MINIMIZE_ON_CLOSE_OPT_IN_CHANGED = 'settings/set-minimize-on-close-opt-in-changed';
const SETTINGS_SET_IS_TRAY_ICON_ENABLED_CHANGED = 'settings/set-is-tray-icon-enabled-changed';
const SETTINGS_SET_IS_SIDE_BAR_ENABLED_CHANGED = 'settings/set-is-side-bar-enabled-changed';
const SETTINGS_SET_IS_MENU_BAR_ENABLED_CHANGED = 'settings/set-is-menu-bar-enabled-changed';
const SETTINGS_SET_IS_VIDEO_CALL_WINDOW_PERSISTENCE_ENABLED_CHANGED = 'settings/set-is-video-call-window-persistence-enabled-changed';
const SETTINGS_SET_IS_DEVELOPER_MODE_ENABLED_CHANGED = 'settings/set-is-developer-mode-enabled-changed';
const SETTINGS_SET_IS_VIDEO_CALL_DEVTOOLS_AUTO_OPEN_ENABLED_CHANGED = 'settings/set-is-video-call-devtools-auto-open-enabled-changed';
const SETTINGS_CLEAR_PERMITTED_SCREEN_CAPTURE_PERMISSIONS = 'settings/clear-permitted-screen-capture-permissions';
const SETTINGS_NTLM_CREDENTIALS_CHANGED = 'settings/ntlm-credentials-changed';
const SETTINGS_AVAILABLE_BROWSERS_UPDATED = 'settings/available-browsers-updated';
const SETTINGS_SELECTED_BROWSER_CHANGED = 'settings/selected-browser-changed';
const SET_HAS_TRAY_MINIMIZE_NOTIFICATION_SHOWN = 'notifications/set-has-tray-minimize-notification-shown';
const DOWNLOADS_BACK_BUTTON_CLICKED = 'downloads/back-button-clicked';
const WEBVIEW_SERVER_SUPPORTED_VERSIONS_UPDATED = 'webview/server-supported-versions-updated';
const WEBVIEW_SERVER_UNIQUE_ID_UPDATED = 'webview/server-workspace-uid-updated';
const WEBVIEW_SERVER_IS_SUPPORTED_VERSION = 'webview/server-is-supported-version';
const WEBVIEW_SERVER_VERSION_UPDATED = 'webview/version-updated';
const SUPPORTED_VERSION_DIALOG_DISMISS = 'supported-versions-dialog/dismiss';
const WEBVIEW_SERVER_RELOADED = 'webview/server-reloaded';
const WEBVIEW_PDF_VIEWER_ATTACHED = 'webview/pdf-viewer/attached';
const SIDE_BAR_SERVER_RELOAD = 'side-bar/server-reload';
const SIDE_BAR_SERVER_COPY_URL = 'side-bar/server-copy-url';
const SIDE_BAR_SERVER_OPEN_DEV_TOOLS = 'side-bar/server-open-dev-tools';
const SIDE_BAR_SERVER_FORCE_RELOAD = 'side-bar/server-force-reload';
const SIDE_BAR_SERVER_REMOVE = 'side-bar/server-remove';

const SERVERS_LOADED = 'servers/loaded';
const SERVER_URL_RESOLUTION_REQUESTED = 'server/url-resolution-requested';
const SERVER_URL_RESOLVED = 'server/url-resolved';
const SERVER_DOCUMENT_VIEWER_OPEN_URL = 'server/document-viewer/open-url';

/* eslint-disable complexity */

const ensureUrlFormat = serverUrl => {
  if (serverUrl) {
    return new URL(serverUrl).href;
  }
  throw new Error('cannot handle null server URLs');
};
const upsert = (state, server) => {
  const index = state.findIndex(({
    url
  }) => url === server.url);
  if (index === -1) {
    return [...state, server];
  }
  return state.map((_server, i) => i === index ? {
    ..._server,
    ...server
  } : _server);
};
const update = (state, server) => {
  const index = state.findIndex(({
    url
  }) => url === server.url);
  if (index === -1) {
    return state;
  }
  return state.map((_server, i) => i === index ? {
    ..._server,
    ...server
  } : _server);
};
const servers = (state = [], action) => {
  switch (action.type) {
    case ADD_SERVER_VIEW_SERVER_ADDED:
    case DEEP_LINKS_SERVER_ADDED:
      {
        const url = action.payload;
        return upsert(state, {
          url,
          title: url
        });
      }
    case SIDE_BAR_REMOVE_SERVER_CLICKED:
      {
        const _url = action.payload;
        return state.filter(({
          url
        }) => url !== _url);
      }
    case SIDE_BAR_SERVERS_SORTED:
      {
        const urls = action.payload;
        return state.sort(({
          url: a
        }, {
          url: b
        }) => urls.indexOf(a) - urls.indexOf(b));
      }
    case WEBVIEW_TITLE_CHANGED:
      {
        const {
          url,
          title = url
        } = action.payload;
        return upsert(state, {
          url,
          title
        });
      }
    case WEBVIEW_PAGE_TITLE_CHANGED:
      {
        const {
          url,
          pageTitle
        } = action.payload;
        return upsert(state, {
          url,
          pageTitle
        });
      }
    case WEBVIEW_SERVER_SUPPORTED_VERSIONS_UPDATED:
      {
        const {
          url,
          supportedVersions,
          source
        } = action.payload;
        return upsert(state, {
          url,
          supportedVersions,
          supportedVersionsSource: source
        });
      }
    case SUPPORTED_VERSION_DIALOG_DISMISS:
      {
        const {
          url
        } = action.payload;
        return upsert(state, {
          url,
          expirationMessageLastTimeShown: new Date()
        });
      }
    case WEBVIEW_SERVER_UNIQUE_ID_UPDATED:
      {
        const {
          url,
          uniqueID
        } = action.payload;
        return upsert(state, {
          url,
          uniqueID
        });
      }
    case WEBVIEW_USER_THEME_APPEARANCE_CHANGED:
      {
        const {
          url,
          themeAppearance
        } = action.payload;
        return upsert(state, {
          url,
          themeAppearance
        });
      }
    case WEBVIEW_SERVER_IS_SUPPORTED_VERSION:
      {
        const {
          url,
          isSupportedVersion
        } = action.payload;
        return upsert(state, {
          url,
          isSupportedVersion
        });
      }
    case WEBVIEW_SERVER_VERSION_UPDATED:
      {
        const {
          url,
          version
        } = action.payload;
        return upsert(state, {
          url,
          version
        });
      }
    case WEBVIEW_UNREAD_CHANGED:
      {
        const {
          url,
          badge
        } = action.payload;
        return upsert(state, {
          url,
          badge
        });
      }
    case WEBVIEW_USER_LOGGED_IN:
      {
        const {
          url,
          userLoggedIn
        } = action.payload;
        return upsert(state, {
          url,
          userLoggedIn
        });
      }
    case WEBVIEW_ALLOWED_REDIRECTS_CHANGED:
      {
        const {
          url,
          allowedRedirects
        } = action.payload;
        return upsert(state, {
          url,
          allowedRedirects
        });
      }
    case WEBVIEW_SIDEBAR_STYLE_CHANGED:
      {
        const {
          url,
          style
        } = action.payload;
        return upsert(state, {
          url,
          style
        });
      }
    case WEBVIEW_SIDEBAR_CUSTOM_THEME_CHANGED:
      {
        const {
          url,
          customTheme
        } = action.payload;
        return upsert(state, {
          url,
          customTheme
        });
      }
    case WEBVIEW_GIT_COMMIT_HASH_CHANGED:
      {
        const {
          url,
          gitCommitHash
        } = action.payload;
        return upsert(state, {
          url,
          gitCommitHash
        });
      }
    case WEBVIEW_FAVICON_CHANGED:
      {
        const {
          url,
          favicon
        } = action.payload;
        return upsert(state, {
          url,
          favicon
        });
      }
    case WEBVIEW_DID_NAVIGATE:
      {
        const {
          url,
          pageUrl
        } = action.payload;
        if (pageUrl !== null && pageUrl !== void 0 && pageUrl.includes(url)) {
          return upsert(state, {
            url,
            lastPath: pageUrl
          });
        }
        return state;
      }
    case WEBVIEW_DID_START_LOADING:
      {
        const {
          url
        } = action.payload;
        return upsert(state, {
          url,
          failed: false
        });
      }
    case WEBVIEW_DID_FAIL_LOAD:
      {
        const {
          url,
          isMainFrame
        } = action.payload;
        if (isMainFrame) {
          return upsert(state, {
            url,
            failed: true
          });
        }
        return state;
      }
    case SERVERS_LOADED:
      {
        const {
          servers = state
        } = action.payload;
        return servers.map(server => ({
          ...server,
          url: ensureUrlFormat(server.url)
        }));
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          servers = state
        } = action.payload;
        return servers.map(server => ({
          ...server,
          url: ensureUrlFormat(server.url),
          documentViewerOpenUrl: ''
        }));
      }
    case WEBVIEW_READY:
      {
        const {
          url,
          webContentsId
        } = action.payload;
        return update(state, {
          url,
          webContentsId
        });
      }
    case WEBVIEW_ATTACHED:
      {
        const {
          url,
          webContentsId
        } = action.payload;
        return update(state, {
          url,
          webContentsId
        });
      }
    case OUTLOOK_CALENDAR_SAVE_CREDENTIALS:
      {
        const {
          url,
          outlookCredentials
        } = action.payload;
        return upsert(state, {
          url,
          outlookCredentials
        });
      }
    case SERVER_DOCUMENT_VIEWER_OPEN_URL:
      {
        const {
          server,
          documentUrl
        } = action.payload;
        return upsert(state, {
          url: server,
          documentViewerOpenUrl: documentUrl
        });
      }
    default:
      return state;
  }
};

const availableBrowsers = (state = [], action) => {
  switch (action.type) {
    case SETTINGS_AVAILABLE_BROWSERS_UPDATED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        return state;
      }
    default:
      return state;
  }
};

const currentView = (state = 'add-new-server', action) => {
  switch (action.type) {
    case ADD_SERVER_VIEW_SERVER_ADDED:
    case DEEP_LINKS_SERVER_ADDED:
    case DEEP_LINKS_SERVER_FOCUSED:
    case MENU_BAR_SELECT_SERVER_CLICKED:
    case TOUCH_BAR_SELECT_SERVER_TOUCHED:
    case SIDE_BAR_SERVER_SELECTED:
      {
        const url = action.payload;
        return {
          url
        };
      }
    case WEBVIEW_FOCUS_REQUESTED:
      {
        const {
          url,
          view
        } = action.payload;
        if (view === 'downloads') return 'downloads';
        return {
          url
        };
      }
    case SERVERS_LOADED:
      {
        const {
          selected
        } = action.payload;
        return selected ? {
          url: selected
        } : 'add-new-server';
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          currentView = state
        } = action.payload;
        return currentView;
      }
    case MENU_BAR_ADD_NEW_SERVER_CLICKED:
    case SIDE_BAR_ADD_NEW_SERVER_CLICKED:
      return 'add-new-server';
    case SIDE_BAR_REMOVE_SERVER_CLICKED:
      {
        if (typeof state === 'object' && state.url === action.payload) {
          return 'add-new-server';
        }
        return state;
      }
    case SIDE_BAR_DOWNLOADS_BUTTON_CLICKED:
      return 'downloads';
    case SIDE_BAR_SETTINGS_BUTTON_CLICKED:
      return 'settings';
    case DOWNLOADS_BACK_BUTTON_CLICKED:
      return {
        url: action.payload
      };
    default:
      return state;
  }
};

const hasHideOnTrayNotificationShown = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.hasHideOnTrayNotificationShown);
    case SET_HAS_TRAY_MINIMIZE_NOTIFICATION_SHOWN:
      return action.payload;
    default:
      return state;
  }
};

const isAddNewServersEnabled = (state = true, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.isAddNewServersEnabled);
    default:
      return state;
  }
};

const isDeveloperModeEnabled = (state = false, action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_DEVELOPER_MODE_ENABLED_CHANGED:
    case MENU_BAR_TOGGLE_IS_DEVELOPER_MODE_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isDeveloperModeEnabled = state
        } = action.payload;
        return isDeveloperModeEnabled;
      }
    default:
      return state;
  }
};

const UPDATE_SKIPPED = 'update/skipped';
const UPDATES_CHECK_FOR_UPDATES_REQUESTED = 'updates/check-for-updates-requested';
const UPDATES_CHECKING_FOR_UPDATE = 'updates/checking-for-update';
const UPDATES_ERROR_THROWN = 'updates/error-thrown';
const UPDATES_NEW_VERSION_AVAILABLE = 'updates/new-version-available';
const UPDATES_NEW_VERSION_NOT_AVAILABLE = 'updates/new-version-not-available';
const UPDATES_READY = 'updates/ready';
const UPDATES_CHANNEL_CHANGED = 'updates/channel-changed';

const isFlashFrameEnabled = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.isFlashFrameEnabled);
    case UPDATES_READY:
      return action.payload.isFlashFrameEnabled;
    case SETTINGS_SET_FLASHFRAME_OPT_IN_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const isHardwareAccelerationEnabled = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.isHardwareAccelerationEnabled);
    case UPDATES_READY:
      return action.payload.isHardwareAccelerationEnabled;
    case SETTINGS_SET_HARDWARE_ACCELERATION_OPT_IN_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const isInternalVideoChatWindowEnabled = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.isInternalVideoChatWindowEnabled);
    case UPDATES_READY:
      return action.payload.isInternalVideoChatWindowEnabled;
    case SETTINGS_SET_INTERNALVIDEOCHATWINDOW_OPT_IN_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const isMenuBarEnabled = (state = true, action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_MENU_BAR_ENABLED_CHANGED:
    case MENU_BAR_TOGGLE_IS_MENU_BAR_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isMenuBarEnabled = state
        } = action.payload;
        return isMenuBarEnabled;
      }
    default:
      return state;
  }
};

const isMessageBoxFocused = (state = false, action) => {
  switch (action.type) {
    case WEBVIEW_MESSAGE_BOX_FOCUSED:
      return true;
    case WEBVIEW_DID_START_LOADING:
    case WEBVIEW_MESSAGE_BOX_BLURRED:
    case WEBVIEW_DID_FAIL_LOAD:
      return false;
    default:
      return state;
  }
};

const isMinimizeOnCloseEnabled = (state = process.platform === 'win32', action) => {
  switch (action.type) {
    case SETTINGS_SET_MINIMIZE_ON_CLOSE_OPT_IN_CHANGED:
      {
        return action.payload;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          isMinimizeOnCloseEnabled = state
        } = action.payload;
        return isMinimizeOnCloseEnabled;
      }
    default:
      return state;
  }
};

const isNTLMCredentialsEnabled = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        const {
          isNTLMCredentialsEnabled = state
        } = action.payload;
        return isNTLMCredentialsEnabled;
      }
    case SETTINGS_NTLM_CREDENTIALS_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const isReportEnabled = (state = false, action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      return Boolean(action.payload.isReportEnabled);
    case UPDATES_READY:
      return action.payload.isReportEnabled;
    case SETTINGS_SET_REPORT_OPT_IN_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const isShowWindowOnUnreadChangedEnabled = (state = false, action) => {
  switch (action.type) {
    case MENU_BAR_TOGGLE_IS_SHOW_WINDOW_ON_UNREAD_CHANGED_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isShowWindowOnUnreadChangedEnabled = state
        } = action.payload;
        return isShowWindowOnUnreadChangedEnabled;
      }
    default:
      return state;
  }
};

const isSideBarEnabled = (state = true, action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_SIDE_BAR_ENABLED_CHANGED:
    case MENU_BAR_TOGGLE_IS_SIDE_BAR_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isSideBarEnabled = state
        } = action.payload;
        return isSideBarEnabled;
      }
    default:
      return state;
  }
};

const isTrayIconEnabled = (state = process.platform !== 'linux', action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_TRAY_ICON_ENABLED_CHANGED:
    case MENU_BAR_TOGGLE_IS_TRAY_ICON_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isTrayIconEnabled = state
        } = action.payload;
        return isTrayIconEnabled;
      }
    default:
      return state;
  }
};

const isVideoCallDevtoolsAutoOpenEnabled = (state = false, action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_VIDEO_CALL_DEVTOOLS_AUTO_OPEN_ENABLED_CHANGED:
    case MENU_BAR_TOGGLE_IS_VIDEO_CALL_DEVTOOLS_AUTO_OPEN_ENABLED_CLICKED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isVideoCallDevtoolsAutoOpenEnabled = state
        } = action.payload;
        return isVideoCallDevtoolsAutoOpenEnabled;
      }
    default:
      return state;
  }
};

const isVideoCallWindowPersistenceEnabled = (state = true,
// Enabled by default
action) => {
  switch (action.type) {
    case SETTINGS_SET_IS_VIDEO_CALL_WINDOW_PERSISTENCE_ENABLED_CHANGED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          isVideoCallWindowPersistenceEnabled = state
        } = action.payload;
        return isVideoCallWindowPersistenceEnabled;
      }
    default:
      return state;
  }
};

const lastSelectedServerUrl = (state = '', action) => {
  switch (action.type) {
    case APP_SETTINGS_LOADED:
      {
        const {
          lastSelectedServerUrl = state,
          servers
        } = action.payload;
        if (state === '' && servers && servers.length > 0) {
          return servers[0].url;
        }
        return lastSelectedServerUrl;
      }
    case SIDE_BAR_SERVER_SELECTED:
      return action.payload;
    default:
      return state;
  }
};

const SCREEN_SHARING_DIALOG_DISMISSED = 'screen-sharing-dialog/dismissed';

const openDialog = (state = null, action) => {
  switch (action.type) {
    case MENU_BAR_ABOUT_CLICKED:
      return 'about';
    case WEBVIEW_SCREEN_SHARING_SOURCE_REQUESTED:
      return 'screen-sharing';
    case UPDATES_NEW_VERSION_AVAILABLE:
      return 'update';
    case CERTIFICATES_CLIENT_CERTIFICATE_REQUESTED:
      return 'select-client-certificate';
    case ABOUT_DIALOG_DISMISSED:
      if (state === 'about') {
        return null;
      }
      return state;
    case OUTLOOK_CALENDAR_ASK_CREDENTIALS:
      return 'outlook-credentials';
    case SCREEN_SHARING_DIALOG_DISMISSED:
    case WEBVIEW_SCREEN_SHARING_SOURCE_RESPONDED:
    case SELECT_CLIENT_CERTIFICATE_DIALOG_CERTIFICATE_SELECTED:
    case SELECT_CLIENT_CERTIFICATE_DIALOG_DISMISSED:
    case UPDATE_DIALOG_DISMISSED:
    case UPDATE_DIALOG_SKIP_UPDATE_CLICKED:
    case UPDATE_DIALOG_REMIND_UPDATE_LATER_CLICKED:
    case UPDATE_DIALOG_INSTALL_BUTTON_CLICKED:
    case OUTLOOK_CALENDAR_DIALOG_DISMISSED:
    case OUTLOOK_CALENDAR_SET_CREDENTIALS:
      return null;
    default:
      return state;
  }
};

const rootWindowIcon = (state = null, action) => {
  switch (action.type) {
    case ROOT_WINDOW_ICON_CHANGED:
      {
        return action.payload;
      }
    default:
      return state;
  }
};

const rootWindowState = (state = {
  focused: true,
  visible: true,
  maximized: false,
  minimized: false,
  fullscreen: false,
  normal: true,
  bounds: {
    x: undefined,
    y: undefined,
    width: 1000,
    height: 600
  }
}, action) => {
  switch (action.type) {
    case ROOT_WINDOW_STATE_CHANGED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          rootWindowState = state
        } = action.payload;
        return rootWindowState;
      }
    default:
      return state;
  }
};

const selectedBrowser = (state = null, action) => {
  switch (action.type) {
    case SETTINGS_SELECTED_BROWSER_CHANGED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          selectedBrowser = state
        } = action.payload;
        return selectedBrowser;
      }
    default:
      return state;
  }
};

const videoCallWindowState = (state = {
  focused: true,
  visible: true,
  maximized: false,
  minimized: false,
  fullscreen: false,
  normal: true,
  bounds: {
    x: undefined,
    y: undefined,
    width: 0,
    height: 0
  }
}, action) => {
  switch (action.type) {
    case VIDEO_CALL_WINDOW_STATE_CHANGED:
      return action.payload;
    case APP_SETTINGS_LOADED:
      {
        const {
          videoCallWindowState = state
        } = action.payload;
        return videoCallWindowState;
      }
    default:
      return state;
  }
};

const doCheckForUpdatesOnStartup = (state = true, action) => {
  switch (action.type) {
    case UPDATES_READY:
      {
        const {
          doCheckForUpdatesOnStartup
        } = action.payload;
        return doCheckForUpdatesOnStartup;
      }
    case ABOUT_DIALOG_TOGGLE_UPDATE_ON_START:
      {
        const doCheckForUpdatesOnStartup = action.payload;
        return doCheckForUpdatesOnStartup;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          doCheckForUpdatesOnStartup = state
        } = action.payload;
        return doCheckForUpdatesOnStartup;
      }
    default:
      return state;
  }
};
const isCheckingForUpdates = (state = false, action) => {
  switch (action.type) {
    case UPDATES_CHECKING_FOR_UPDATE:
      return true;
    case UPDATES_ERROR_THROWN:
      return false;
    case UPDATES_NEW_VERSION_NOT_AVAILABLE:
      return false;
    case UPDATES_NEW_VERSION_AVAILABLE:
      return false;
    default:
      return state;
  }
};
const isEachUpdatesSettingConfigurable = (state = true, action) => {
  switch (action.type) {
    case UPDATES_READY:
      {
        const {
          isEachUpdatesSettingConfigurable
        } = action.payload;
        return isEachUpdatesSettingConfigurable;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          isEachUpdatesSettingConfigurable = state
        } = action.payload;
        return isEachUpdatesSettingConfigurable;
      }
    default:
      return state;
  }
};
const isUpdatingAllowed = (state = true, action) => {
  switch (action.type) {
    case UPDATES_READY:
      {
        const {
          isUpdatingAllowed
        } = action.payload;
        return isUpdatingAllowed;
      }
    default:
      return state;
  }
};
const isUpdatingEnabled = (state = true, action) => {
  switch (action.type) {
    case UPDATES_READY:
      {
        const {
          isUpdatingEnabled
        } = action.payload;
        return isUpdatingEnabled;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          isUpdatingEnabled = state
        } = action.payload;
        return isUpdatingEnabled;
      }
    default:
      return state;
  }
};
const newUpdateVersion = (state = null, action) => {
  switch (action.type) {
    case UPDATES_NEW_VERSION_AVAILABLE:
      {
        const newUpdateVersion = action.payload;
        return newUpdateVersion;
      }
    case UPDATES_NEW_VERSION_NOT_AVAILABLE:
    case UPDATE_SKIPPED:
      {
        return null;
      }
    default:
      return state;
  }
};
const skippedUpdateVersion = (state = null, action) => {
  switch (action.type) {
    case UPDATES_READY:
      {
        const {
          skippedUpdateVersion
        } = action.payload;
        return skippedUpdateVersion;
      }
    case UPDATE_SKIPPED:
      {
        const skippedUpdateVersion = action.payload;
        return skippedUpdateVersion;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          skippedUpdateVersion = state
        } = action.payload;
        return skippedUpdateVersion;
      }
    default:
      return state;
  }
};
const updateError = (state = null, action) => {
  switch (action.type) {
    case UPDATES_CHECKING_FOR_UPDATE:
      return null;
    case UPDATES_ERROR_THROWN:
      return action.payload;
    case UPDATES_NEW_VERSION_NOT_AVAILABLE:
      return null;
    case UPDATES_NEW_VERSION_AVAILABLE:
      return null;
    default:
      return state;
  }
};
const updateChannel = (state = 'latest', action) => {
  switch (action.type) {
    case ABOUT_DIALOG_UPDATE_CHANNEL_CHANGED:
    case UPDATES_CHANNEL_CHANGED:
      {
        return action.payload;
      }
    case UPDATES_READY:
      {
        const {
          updateChannel
        } = action.payload;
        return updateChannel;
      }
    case APP_SETTINGS_LOADED:
      {
        const {
          updateChannel = state
        } = action.payload;
        return updateChannel;
      }
    default:
      return state;
  }
};

const rootReducer = redux.combineReducers({
  allowedJitsiServers,
  appPath,
  appVersion,
  availableBrowsers,
  clientCertificates,
  currentView,
  doCheckForUpdatesOnStartup,
  downloads,
  externalProtocols,
  isCheckingForUpdates,
  isEachUpdatesSettingConfigurable,
  isMenuBarEnabled,
  isMessageBoxFocused,
  isShowWindowOnUnreadChangedEnabled,
  isSideBarEnabled,
  isTrayIconEnabled,
  isMinimizeOnCloseEnabled,
  isUpdatingAllowed,
  isUpdatingEnabled,
  mainWindowTitle,
  machineTheme,
  newUpdateVersion,
  openDialog,
  rootWindowIcon,
  rootWindowState,
  selectedBrowser,
  servers,
  skippedUpdateVersion,
  trustedCertificates,
  notTrustedCertificates,
  updateError,
  isReportEnabled,
  isFlashFrameEnabled,
  isHardwareAccelerationEnabled,
  isInternalVideoChatWindowEnabled,
  isAddNewServersEnabled,
  hasHideOnTrayNotificationShown,
  lastSelectedServerUrl,
  allowedNTLMCredentialsDomains,
  isNTLMCredentialsEnabled,
  videoCallWindowState,
  isVideoCallWindowPersistenceEnabled,
  isDeveloperModeEnabled,
  updateChannel,
  isVideoCallDevtoolsAutoOpenEnabled
});

let reduxStore;
let lastAction;
const catchLastAction = () => next => action => {
  lastAction = action;
  return next(action);
};
const createMainReduxStore = () => {
  const middlewares = redux.applyMiddleware(catchLastAction, forwardToRenderers);
  reduxStore = redux.createStore(rootReducer, {}, middlewares);
};
const dispatch = action => {
  reduxStore.dispatch(action);
};
const dispatchSingle = action => {
  reduxStore.dispatch({
    ...action,
    ipcMeta: {
      ...action.ipcMeta,
      scope: 'single'
    }
  });
};
const dispatchLocal = action => {
  reduxStore.dispatch({
    ...action,
    ipcMeta: {
      ...action.ipcMeta,
      scope: 'local'
    },
    meta: {
      scope: 'local'
    }
  });
};
const select = selector => selector(reduxStore.getState());
const watch = (selector, watcher) => {
  const initial = select(selector);
  watcher(initial, undefined);
  let prev = initial;
  return reduxStore.subscribe(() => {
    const curr = select(selector);
    if (Object.is(prev, curr)) {
      return;
    }
    watcher(curr, prev);
    prev = curr;
  });
};
const listen = (typeOrPredicate, listener) => {
  const effectivePredicate = typeof typeOrPredicate === 'function' ? typeOrPredicate : action => action.type === typeOrPredicate;
  return reduxStore.subscribe(() => {
    if (!effectivePredicate(lastAction)) {
      return;
    }
    listener(lastAction);
  });
};
class Service {
  constructor() {
    _defineProperty(this, "unsubscribers", new Set());
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialize() {}

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {}
  watch(selector, watcher) {
    this.unsubscribers.add(watch(selector, watcher));
  }

  // eslint-disable-next-line no-dupe-class-members

  // eslint-disable-next-line no-dupe-class-members
  listen(typeOrPredicate, listener) {
    if (typeof typeOrPredicate === 'string') {
      this.unsubscribers.add(listen(typeOrPredicate, listener));
      return;
    }
    this.unsubscribers.add(listen(typeOrPredicate, listener));
  }
  setUp() {
    this.initialize();
  }
  tearDown() {
    this.unsubscribers.forEach(unsubscribe => unsubscribe());
    this.destroy();
  }
}

// const isResponseTo = <Response extends RootAction>(id: unknown, type: Response['type']) =>
//   (action: RootAction): action is Response =>
//     isResponse(action) && action.type === type && action.meta.id === id;

const request = (requestAction, ...types) => new Promise((resolve, reject) => {
  const id = Math.random().toString(36).slice(2);
  const unsubscribe = listen(isResponseTo(id, ...types), action => {
    unsubscribe();
    if (isErrored(action)) {
      reject(action.payload);
      return;
    }
    if (hasPayload(action)) {
      resolve(action.payload);
    }
  });
  dispatch({
    ...requestAction,
    meta: {
      request: true,
      id
    }
  });
});

const readSetting = key => {
  try {
    const filePath = path__default.default.join(electron.app.getPath('userData'), 'config.json');
    const content = fs__default.default.readFileSync(filePath, 'utf8');
    const json = JSON.parse(content);
    return json[key];
  } catch (e) {
    return null;
  }
};

const setUserDataDirectory = () => {
  if (process.mas) {
    return;
  }
  const folder = path__default.default.join(electron.app.getPath('appData'), `${electron.app.name} (development)`);
  if (!fs__default.default.existsSync(folder)) {
    fs__default.default.mkdirSync(folder, {
      recursive: true
    });
  }
  console.log(`Setting user data directory to ${folder}`);
  electron.app.setPath('userData', folder);
};
const setupRootWindowReload = async webContents => {
  const chokidar = await import('chokidar');
  chokidar.watch(path__default.default.join(electron.app.getAppPath(), 'app/rootWindow.js'), {
    awaitWriteFinish: true
  }).on('change', () => {
    if (webContents.isDestroyed()) {
      return;
    }
    console.log('Reloading root window...');
    webContents.reload();
  });
};
const setupPreloadReload = async webContents => {
  const chokidar = await import('chokidar');
  chokidar.watch([path__default.default.join(electron.app.getAppPath(), 'app/preload.js'), path__default.default.join(electron.app.getAppPath(), 'app/injected.js')], {
    awaitWriteFinish: true
  }).on('change', () => {
    if (webContents.isDestroyed()) {
      return;
    }
    console.log('Reloading webview...');
    webContents.reload();
  });
};

const selectGlobalBadge = ({
  servers
}) => {
  const badges = servers.map(({
    badge
  }) => badge);
  const mentionCount = badges.filter(badge => Number.isInteger(badge)).reduce((sum, count) => sum + count, 0);
  return mentionCount || badges.some(badge => !!badge) && 'â¢' || undefined;
};
const selectGlobalBadgeText = reselect.createSelector(selectGlobalBadge, badge => {
  if (badge === 'â¢') {
    return 'â¢';
  }
  if (Number.isInteger(badge)) {
    return String(badge);
  }
  return '';
});
const isBadgeCount = badge => Number.isInteger(badge);
const selectGlobalBadgeCount = reselect.createSelector(selectGlobalBadge, badge => isBadgeCount(badge) ? badge : 0);

function debounce(cb, wait = 20) {
  let h;
  const callable = (...args) => {
    h && clearTimeout(h);
    h = setTimeout(() => cb(...args), wait);
  };
  return callable;
}

const getAppIconPath = ({
  platform
}) => {
  if (platform !== 'win32') {
    throw Error('only win32 platform is supported');
  }
  return `${electron.app.getAppPath()}/app/images/icon.ico`;
};
const getMacOSTrayIconPath = badge => path__default.default.join(electron.app.getAppPath(), `app/images/tray/darwin/${badge ? 'notification' : 'default'}Template.png`);
const getWindowsTrayIconPath = badge => {
  const name = !badge && 'default' || badge === 'â¢' && 'notification-dot' || typeof badge === 'number' && badge > 9 && 'notification-plus-9' || `notification-${badge}`;
  return path__default.default.join(electron.app.getAppPath(), `app/images/tray/win32/${name}.ico`);
};
const getLinuxTrayIconPath = badge => {
  const name = !badge && 'default' || badge === 'â¢' && 'notification-dot' || typeof badge === 'number' && badge > 9 && 'notification-plus-9' || `notification-${badge}`;
  return path__default.default.join(electron.app.getAppPath(), `app/images/tray/linux/${name}.png`);
};
const getTrayIconPath = ({
  badge,
  platform
}) => {
  switch (platform !== null && platform !== void 0 ? platform : process.platform) {
    case 'darwin':
      return getMacOSTrayIconPath(badge);
    case 'win32':
      return getWindowsTrayIconPath(badge);
    case 'linux':
      return getLinuxTrayIconPath(badge);
    default:
      throw Error(`unsupported platform (${platform})`);
  }
};

const webPreferences = {
  nodeIntegration: true,
  nodeIntegrationInSubFrames: true,
  contextIsolation: false,
  webviewTag: true
};
const selectRootWindowState = ({
  rootWindowState
}) => rootWindowState !== null && rootWindowState !== void 0 ? rootWindowState : {
  bounds: {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  },
  focused: false,
  fullscreen: false,
  maximized: false,
  minimized: false,
  normal: false,
  visible: false
};
let _rootWindow;
let tempWindow;
const getRootWindow = () => new Promise((resolve, reject) => {
  setTimeout(() => {
    _rootWindow ? resolve(_rootWindow) : reject(new Error());
  }, 300);
});
const platformTitleBarStyle = process.platform === 'darwin' ? 'hidden' : 'default';
const createRootWindow = () => {
  _rootWindow = new electron.BrowserWindow({
    width: 1000,
    height: 600,
    minWidth: 400,
    minHeight: 400,
    titleBarStyle: platformTitleBarStyle,
    backgroundColor: '#2f343d',
    show: false,
    webPreferences
  });

  // Block navigation to smb:// protocol
  _rootWindow.webContents.on('will-navigate', (event, url) => {
    if (typeof url === 'string' && url.toLowerCase().startsWith('smb://')) {
      event.preventDefault();
    }
  });
  _rootWindow.webContents.setWindowOpenHandler(({
    url
  }) => {
    if (url.toLowerCase().startsWith('smb://')) {
      return {
        action: 'deny'
      };
    }
    return {
      action: 'allow'
    };
  });
  _rootWindow.addListener('close', event => {
    event.preventDefault();
  });
  tempWindow.destroy();
};
const normalizeNumber = value => value && isFinite(1 / value) ? value : 0;
const isInsideSomeScreen = ({
  x,
  y,
  width,
  height
}) => electron.screen.getAllDisplays().some(({
  bounds
}) => x >= bounds.x && y >= bounds.y && x + width <= bounds.x + bounds.width && y + height <= bounds.y + bounds.height);
const applyRootWindowState = browserWindow => {
  const rootWindowState = select(selectRootWindowState);
  const isTrayIconEnabled = select(({
    isTrayIconEnabled
  }) => isTrayIconEnabled);
  let {
    x = null,
    y = null
  } = rootWindowState.bounds;
  let {
    width,
    height
  } = rootWindowState.bounds;
  if (x === null || y === null || !isInsideSomeScreen({
    x,
    y,
    width,
    height
  })) {
    const primaryDisplay = electron.screen.getPrimaryDisplay();
    const {
      bounds: {
        width: primaryDisplayWidth,
        height: primaryDisplayHeight
      }
    } = primaryDisplay;
    x = Math.round((primaryDisplayWidth - width) / 2);
    y = Math.round((primaryDisplayHeight - height) / 2);
    width = normalizeNumber(primaryDisplay.workAreaSize.width * 0.9);
    height = normalizeNumber(primaryDisplay.workAreaSize.height * 0.9);
  }
  if (browserWindow.isVisible()) {
    return;
  }
  x = normalizeNumber(x);
  y = normalizeNumber(y);
  width = normalizeNumber(width);
  height = normalizeNumber(height);
  if (browserWindow && Number.isInteger(width) && Number.isInteger(height) && Number.isInteger(x) && Number.isInteger(y)) {
    browserWindow.setBounds({
      width,
      height,
      x,
      y
    });
  }
  if (rootWindowState.maximized) {
    browserWindow.maximize();
  }
  if (rootWindowState.minimized) {
    browserWindow.minimize();
  }
  if (rootWindowState.fullscreen) {
    browserWindow.setFullScreen(true);
  }
  if (rootWindowState.visible || !isTrayIconEnabled) {
    browserWindow.show();
  }
  if (rootWindowState.focused) {
    browserWindow.focus();
  }
};
const fetchRootWindowState = async () => {
  const browserWindow = await getRootWindow();
  return {
    focused: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isFocused(),
    visible: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isVisible(),
    maximized: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isMaximized(),
    minimized: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isMinimized(),
    fullscreen: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isFullScreen(),
    normal: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.isNormal(),
    bounds: browserWindow === null || browserWindow === void 0 ? void 0 : browserWindow.getNormalBounds()
  };
};
const setupRootWindow = () => {
  const unsubscribers = [watch(selectGlobalBadgeCount, async globalBadgeCount => {
    const browserWindow = await getRootWindow();
    if (browserWindow.isFocused() || globalBadgeCount === 0) {
      return;
    }
    const {
      isShowWindowOnUnreadChangedEnabled,
      isFlashFrameEnabled
    } = select(({
      isShowWindowOnUnreadChangedEnabled,
      isFlashFrameEnabled
    }) => ({
      isShowWindowOnUnreadChangedEnabled,
      isFlashFrameEnabled
    }));
    if (isShowWindowOnUnreadChangedEnabled && !browserWindow.isVisible()) {
      const isMinimized = browserWindow.isMinimized();
      const isMaximized = browserWindow.isMaximized();
      browserWindow.showInactive();
      if (isMinimized) {
        browserWindow.minimize();
      }
      if (isMaximized) {
        browserWindow.maximize();
      }
      return;
    }
    if (isFlashFrameEnabled && process.platform !== 'darwin') {
      browserWindow.flashFrame(true);
    }
  }), watch(({
    currentView,
    servers
  }) => {
    const currentServer = typeof currentView === 'object' ? servers.find(({
      url
    }) => url === currentView.url) : null;
    return (currentServer === null || currentServer === void 0 ? void 0 : currentServer.pageTitle) || (currentServer === null || currentServer === void 0 ? void 0 : currentServer.title) || electron.app.name;
  }, async windowTitle => {
    const browserWindow = await getRootWindow();
    browserWindow.setTitle(windowTitle);
    dispatch({
      type: APP_MAIN_WINDOW_TITLE_SET,
      payload: windowTitle
    });
  }), listen(WEBVIEW_FOCUS_REQUESTED, async () => {
    const rootWindow = await getRootWindow();
    rootWindow.focus();
    rootWindow.show();
  })];
  const fetchAndDispatchWindowState = debounce(async () => {
    dispatchLocal({
      type: ROOT_WINDOW_STATE_CHANGED,
      payload: await fetchRootWindowState()
    });
  }, 1000);
  getRootWindow().then(rootWindow => {
    rootWindow.addListener('show', fetchAndDispatchWindowState);
    rootWindow.addListener('hide', fetchAndDispatchWindowState);
    rootWindow.addListener('focus', fetchAndDispatchWindowState);
    rootWindow.addListener('blur', fetchAndDispatchWindowState);
    rootWindow.addListener('maximize', fetchAndDispatchWindowState);
    rootWindow.addListener('unmaximize', fetchAndDispatchWindowState);
    rootWindow.addListener('minimize', fetchAndDispatchWindowState);
    rootWindow.addListener('restore', fetchAndDispatchWindowState);
    rootWindow.addListener('resize', fetchAndDispatchWindowState);
    rootWindow.addListener('move', fetchAndDispatchWindowState);
    fetchAndDispatchWindowState();
    rootWindow.addListener('focus', async () => {
      rootWindow.flashFrame(false);
    });
    rootWindow.addListener('close', async () => {
      if (rootWindow !== null && rootWindow !== void 0 && rootWindow.isFullScreen()) {
        await new Promise(resolve => rootWindow.once('leave-full-screen', () => resolve()));
        rootWindow.setFullScreen(false);
      }
      if (process.platform !== 'linux') rootWindow.blur();
      const isTrayIconEnabled = select(({
        isTrayIconEnabled
      }) => isTrayIconEnabled !== null && isTrayIconEnabled !== void 0 ? isTrayIconEnabled : true);
      if (process.platform === 'darwin' || isTrayIconEnabled) {
        rootWindow.hide();
        return;
      }
      const isMinimizeOnCloseEnabled = select(({
        isMinimizeOnCloseEnabled
      }) => isMinimizeOnCloseEnabled !== null && isMinimizeOnCloseEnabled !== void 0 ? isMinimizeOnCloseEnabled : true);
      if (process.platform === 'win32' && isMinimizeOnCloseEnabled) {
        rootWindow.minimize();
        return;
      }
      electron.app.quit();
    });
    unsubscribers.push(() => {
      rootWindow.removeAllListeners();
      rootWindow.close();
    });
  });
  if (process.platform === 'linux' || process.platform === 'win32') {
    const selectRootWindowIcon = reselect.createStructuredSelector({
      globalBadge: selectGlobalBadge,
      rootWindowIcon: ({
        rootWindowIcon
      }) => rootWindowIcon
    });
    unsubscribers.push(watch(selectRootWindowIcon, async ({
      globalBadge,
      rootWindowIcon
    }) => {
      const browserWindow = await getRootWindow();
      if (!rootWindowIcon) {
        browserWindow.setIcon(electron.nativeImage.createFromPath(getTrayIconPath({
          platform: process.platform,
          badge: globalBadge
        })));
        return;
      }
      const icon = electron.nativeImage.createEmpty();
      const {
        scaleFactor
      } = electron.screen.getPrimaryDisplay();
      if (process.platform === 'linux') {
        rootWindowIcon.icon.forEach(representation => {
          icon.addRepresentation({
            ...representation,
            scaleFactor
          });
        });
      }
      if (process.platform === 'win32') {
        for (const representation of rootWindowIcon.icon) {
          var _representation$width;
          icon.addRepresentation({
            ...representation,
            scaleFactor: (_representation$width = representation.width) !== null && _representation$width !== void 0 ? _representation$width : 0 / 32
          });
        }
      }
      browserWindow.setIcon(icon);
      if (process.platform === 'win32') {
        let overlayIcon = null;
        const overlayDescription = typeof globalBadge === 'number' && i18next__default.default.t('unreadMention', {
          appName: electron.app.name,
          count: globalBadge
        }) || globalBadge === 'â¢' && i18next__default.default.t('unreadMessage', {
          appName: electron.app.name
        }) || i18next__default.default.t('noUnreadMessage', {
          appName: electron.app.name
        });
        if (rootWindowIcon.overlay) {
          overlayIcon = electron.nativeImage.createEmpty();
          for (const representation of rootWindowIcon.overlay) {
            overlayIcon.addRepresentation({
              ...representation,
              scaleFactor: 1
            });
          }
        }
        const isTrayIconEnabled = select(({
          isTrayIconEnabled
        }) => isTrayIconEnabled !== null && isTrayIconEnabled !== void 0 ? isTrayIconEnabled : true);
        if (!isTrayIconEnabled) {
          const t = i18next__default.default.t.bind(i18next__default.default);
          const translate = `taskbar.${overlayDescription}`;
          const taskbarTitle = globalBadge !== undefined ? `(${globalBadge}) ${t(translate)}` : t(translate);
          browserWindow.setTitle(taskbarTitle);
        }
        browserWindow.setOverlayIcon(overlayIcon, overlayDescription);
      }
    }), watch(({
      isMenuBarEnabled
    }) => isMenuBarEnabled, async isMenuBarEnabled => {
      const browserWindow = await getRootWindow();
      browserWindow.autoHideMenuBar = !isMenuBarEnabled;
      browserWindow.setMenuBarVisibility(isMenuBarEnabled);
    }));
  }
  electron.app.addListener('before-quit', () => {
    unsubscribers.forEach(unsubscriber => unsubscriber());
  });
};
const ensureWindowsMediaRegistration = async () => {
  if (process.platform !== 'win32') {
    return;
  }
  try {
    const browserWindow = await getRootWindow();
    await browserWindow.webContents.executeJavaScript(`
      if (!window._rocketChatMediaRegistered) {
        window._rocketChatMediaRegistered = true;
        navigator.mediaDevices.getUserMedia({ audio: true, video: false })
          .then(() => console.log('Media access registered with Windows'))
          .catch(() => console.log('Media registration attempted'));
      }
    `);
  } catch (error) {
    console.log('Media registration failed:', error);
  }
};
const showRootWindow = async () => {
  const browserWindow = await getRootWindow();
  browserWindow.loadFile(path__default.default.join(electron.app.getAppPath(), 'app/index.html'));
  {
    setupRootWindowReload(browserWindow.webContents);
  }
  return new Promise(resolve => {
    browserWindow.once('ready-to-show', () => {
      applyRootWindowState(browserWindow);
      const isTrayIconEnabled = select(({
        isTrayIconEnabled
      }) => isTrayIconEnabled);
      if (electron.app.commandLine.hasSwitch('start-hidden') && isTrayIconEnabled) {
        console.debug('Start application in background');
        browserWindow.hide();
      }
      setupRootWindow();
      ensureWindowsMediaRegistration();
      resolve();
    });
  });
};
const watchMachineTheme = () => {
  dispatchMachineTheme();
  electron.nativeTheme.on('updated', () => {
    dispatchMachineTheme();
  });
};
const dispatchMachineTheme = () => {
  const isDarkMode = electron.nativeTheme.shouldUseDarkColors;
  dispatch({
    type: APP_MACHINE_THEME_SET,
    payload: isDarkMode ? 'dark' : 'light'
  });
};
const exportLocalStorage = async () => {
  try {
    tempWindow = new electron.BrowserWindow({
      show: false,
      webPreferences
    });
    tempWindow.loadFile(path__default.default.join(electron.app.getAppPath(), 'app/index.html'));
    await new Promise(resolve => {
      tempWindow.once('ready-to-show', () => {
        resolve();
      });
    });
    return tempWindow.webContents.executeJavaScript(`(() => {
      const data = ({...localStorage})
      localStorage.clear();
      return data;
    })()`);
  } catch (error) {
    console.error(error);
    return {};
  }
};

const t$7 = i18next__default.default.t.bind(i18next__default.default);
const askForAppDataReset = async parentWindow => {
  parentWindow === null || parentWindow === void 0 || parentWindow.show();
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'question',
    buttons: [t$7('dialog.resetAppData.yes'), t$7('dialog.resetAppData.cancel')],
    defaultId: 1,
    title: t$7('dialog.resetAppData.title'),
    message: t$7('dialog.resetAppData.message')
  });
  return response === 0;
};
const askForServerAddition = async (serverUrl, parentWindow) => {
  parentWindow === null || parentWindow === void 0 || parentWindow.show();
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'question',
    buttons: [t$7('dialog.addServer.add'), t$7('dialog.addServer.cancel')],
    defaultId: 0,
    title: t$7('dialog.addServer.title'),
    message: t$7('dialog.addServer.message', {
      host: serverUrl
    })
  });
  return response === 0;
};
const warnAboutInvalidServerUrl = (_serverUrl, _reason, _parentWindow) => {
  // TODO
  throw Error('not implemented');
};
let AskUpdateInstallResponse = /*#__PURE__*/function (AskUpdateInstallResponse) {
  AskUpdateInstallResponse[AskUpdateInstallResponse["INSTALL_LATER"] = 0] = "INSTALL_LATER";
  AskUpdateInstallResponse[AskUpdateInstallResponse["INSTALL_NOW"] = 1] = "INSTALL_NOW";
  return AskUpdateInstallResponse;
}({});
const askUpdateInstall = async parentWindow => {
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'question',
    title: t$7('dialog.updateReady.title'),
    message: t$7('dialog.updateReady.message'),
    buttons: [t$7('dialog.updateReady.installLater'), t$7('dialog.updateReady.installNow')],
    defaultId: 1
  });
  if (response === 1) {
    return AskUpdateInstallResponse.INSTALL_NOW;
  }
  return AskUpdateInstallResponse.INSTALL_LATER;
};
const warnAboutInstallUpdateLater = async parentWindow => {
  await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'info',
    title: t$7('dialog.updateInstallLater.title'),
    message: t$7('dialog.updateInstallLater.message'),
    buttons: [t$7('dialog.updateInstallLater.ok')],
    defaultId: 0
  });
};
let AskForCertificateTrustResponse = /*#__PURE__*/function (AskForCertificateTrustResponse) {
  AskForCertificateTrustResponse[AskForCertificateTrustResponse["YES"] = 0] = "YES";
  AskForCertificateTrustResponse[AskForCertificateTrustResponse["NO"] = 1] = "NO";
  return AskForCertificateTrustResponse;
}({});
const askForCertificateTrust = async (issuerName, detail, parentWindow) => {
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    title: t$7('dialog.certificateError.title'),
    message: t$7('dialog.certificateError.message', {
      issuerName
    }),
    detail,
    type: 'warning',
    buttons: [t$7('dialog.certificateError.yes'), t$7('dialog.certificateError.no')],
    cancelId: 1,
    defaultId: 1
  });
  if (response === 0) {
    return AskForCertificateTrustResponse.YES;
  }
  return AskForCertificateTrustResponse.NO;
};
const warnAboutUpdateDownload = async parentWindow => {
  await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'info',
    title: t$7('dialog.updateDownloading.title'),
    message: t$7('dialog.updateDownloading.message'),
    buttons: [t$7('dialog.updateDownloading.ok')],
    defaultId: 0
  });
};
const warnAboutUpdateSkipped = async parentWindow => {
  await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'warning',
    title: t$7('dialog.updateSkip.title'),
    message: t$7('dialog.updateSkip.message'),
    buttons: [t$7('dialog.updateSkip.ok')],
    defaultId: 0
  });
};
const askForOpeningExternalProtocol = async (url, parentWindow) => {
  const {
    response,
    checkboxChecked
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'warning',
    buttons: [t$7('dialog.openingExternalProtocol.yes'), t$7('dialog.openingExternalProtocol.no')],
    defaultId: 1,
    title: t$7('dialog.openingExternalProtocol.title'),
    message: t$7('dialog.openingExternalProtocol.message', {
      protocol: url.protocol
    }),
    detail: t$7('dialog.openingExternalProtocol.detail', {
      url: url.toString()
    }),
    checkboxLabel: t$7('dialog.openingExternalProtocol.dontAskAgain'),
    checkboxChecked: false
  });
  return {
    allowed: response === 0,
    dontAskAgain: checkboxChecked
  };
};
const askForJitsiCaptureScreenPermission = async (url, parentWindow) => {
  const {
    response,
    checkboxChecked
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'warning',
    buttons: [t$7('dialog.allowVideoCallCaptureScreen.yes'), t$7('dialog.allowVideoCallCaptureScreen.no')],
    defaultId: 1,
    title: t$7('dialog.allowVideoCallCaptureScreen.title'),
    message: t$7('dialog.allowVideoCallCaptureScreen.message'),
    detail: t$7('dialog.allowVideoCallCaptureScreen.detail', {
      url: url.toString()
    }),
    checkboxLabel: t$7('dialog.allowVideoCallCaptureScreen.dontAskAgain'),
    checkboxChecked: false
  });
  return {
    allowed: response === 0,
    dontAskAgain: checkboxChecked
  };
};
const askForClearScreenCapturePermission = async parentWindow => {
  parentWindow === null || parentWindow === void 0 || parentWindow.show();
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'question',
    buttons: [t$7('dialog.clearPermittedScreenCaptureServers.yes'), t$7('dialog.clearPermittedScreenCaptureServers.cancel')],
    defaultId: 1,
    title: t$7('dialog.clearPermittedScreenCaptureServers.title'),
    message: t$7('dialog.clearPermittedScreenCaptureServers.message')
  });
  return response === 0;
};
const askForMediaPermissionSettings = async (permissionType, parentWindow) => {
  parentWindow === null || parentWindow === void 0 || parentWindow.show();
  const {
    response
  } = await electron.dialog.showMessageBox(parentWindow !== null && parentWindow !== void 0 ? parentWindow : await getRootWindow(), {
    type: 'warning',
    buttons: [t$7('dialog.mediaPermission.openSettings'), t$7('dialog.mediaPermission.cancel')],
    defaultId: 0,
    title: t$7('dialog.mediaPermission.title'),
    message: t$7('dialog.mediaPermission.message', {
      permissionType: t$7(`dialog.mediaPermission.${permissionType}`)
    }),
    detail: t$7('dialog.mediaPermission.detail')
  });
  return response === 0;
};

// Cache browsers to avoid repeatedly fetching them
let cachedBrowsers = null;
let browserLoadPromise = null;

/**
 * Lazy load browsers asynchronously
 * This ensures we don't slow down app startup
 */
const loadBrowsersLazy = () => {
  if (cachedBrowsers) {
    return Promise.resolve(cachedBrowsers);
  }
  if (!browserLoadPromise) {
    // Start loading browsers asynchronously after a delay to not block the app startup
    browserLoadPromise = new Promise(resolve => {
      // Delay browser detection for 2 seconds after this function is first called
      // to avoid slowing down app startup and initial interactions
      setTimeout(async () => {
        try {
          const browsers = await detectBrowsers.getAvailableBrowsers();
          cachedBrowsers = browsers;
          const browserIds = browsers.map(browser => browser.browser);
          if (browserIds.length > 0) {
            dispatch({
              type: SETTINGS_AVAILABLE_BROWSERS_UPDATED,
              payload: browserIds
            });
          }
          resolve(browsers);
        } catch (error) {
          console.error('Error detecting browsers:', error);
          resolve([]);
        }
      }, 2000);
    });
  }
  return browserLoadPromise;
};

/**
 * Launches a URL in the selected browser from settings or falls back to system default
 *
 * @param url The URL to open
 * @returns Promise that resolves when the browser is launched
 */
const openExternal = async url => {
  // Get the selected browser from settings
  const selectedBrowser = readSetting('selectedBrowser');

  // If no specific browser is selected, use the system default
  if (!selectedBrowser) {
    return electron.shell.openExternal(url);
  }
  try {
    // Lazy load browsers when needed
    const browsers = await loadBrowsersLazy();

    // Find the selected browser in the available browsers
    const browser = browsers.find(browser => browser.browser === selectedBrowser);
    if (browser) {
      // Launch the selected browser with the URL
      return detectBrowsers.launchBrowser(browser, url);
    }
    // If the selected browser isn't available, fall back to system default
    console.warn(`Selected browser "${selectedBrowser}" not found, using system default.`);
    return electron.shell.openExternal(url);
  } catch (error) {
    console.error('Error launching browser:', error);
    // Fall back to shell.openExternal on error
    return electron.shell.openExternal(url);
  }
};

/**
 * Trigger preloading of browsers in the background
 * Call this function when the app is fully loaded
 */
const preloadBrowsersList = () => {
  // Begin loading browsers in the background after app is ready
  setTimeout(() => {
    loadBrowsersLazy().catch(error => {
      console.error('Failed to preload browsers list:', error);
    });
  }, 5000); // Delay for 5 seconds after this function is called
};

const packageJsonInformation = {
  productName: packageJson.productName,
  goUrlShortener: packageJson.goUrlShortener
};
const electronBuilderJsonInformation = {
  appId: electronBuilderJson.appId,
  protocol: electronBuilderJson.protocols.schemes[0]
};
const getPlatformName = () => {
  switch (process.platform) {
    case 'win32':
      return 'Windows';
    case 'linux':
      return 'Linux';
    case 'darwin':
      return 'macOS';
    default:
      return 'Unknown';
  }
};
const relaunchApp = (...args) => {
  const command = process.argv.slice(1, electron.app.isPackaged ? 1 : 2);
  electron.app.relaunch({
    args: [...command, ...args]
  });
  electron.app.exit();
};
const performElectronStartup = () => {
  electron.app.setAsDefaultProtocolClient(electronBuilderJsonInformation.protocol);
  electron.app.setAppUserModelId(electronBuilderJsonInformation.appId);
  electron.app.commandLine.appendSwitch('--autoplay-policy', 'no-user-gesture-required');
  electron.app.commandLine.appendSwitch('disable-features', 'HardwareMediaKeyHandling,MediaSessionService');
  if (getPlatformName() === 'macOS' && process.mas) {
    electron.app.commandLine.appendSwitch('disable-accelerated-video-decode');
  }
  const args = process.argv.slice(electron.app.isPackaged ? 1 : 2);
  if (args.includes('--reset-app-data')) {
    rimraf.rimraf.sync(electron.app.getPath('userData'));
    relaunchApp();
    return;
  }
  const canStart = process.mas || electron.app.requestSingleInstanceLock();
  if (!canStart) {
    electron.app.exit();
    return;
  }
  const isHardwareAccelerationEnabled = readSetting('isHardwareAccelerationEnabled');
  if (args.includes('--disable-gpu') || isHardwareAccelerationEnabled === false) {
    console.log('Disabling Hardware acceleration');
    electron.app.disableHardwareAcceleration();
    electron.app.commandLine.appendSwitch('--disable-2d-canvas-image-chromium');
    electron.app.commandLine.appendSwitch('--disable-accelerated-2d-canvas');
    electron.app.commandLine.appendSwitch('--disable-gpu');
  }
};
const setupApp = () => {
  electron.app.addListener('activate', async () => {
    const browserWindow = await getRootWindow();
    if (!browserWindow.isVisible()) {
      browserWindow.showInactive();
    }
    browserWindow.focus();
  });
  electron.app.addListener('window-all-closed', () => {
    // Don't quit immediately if this might be caused by video call window closure
    // especially during first launch when main window might not be fully ready
    setTimeout(() => {
      const allWindows = electron.BrowserWindow.getAllWindows();

      // Only quit if there are truly no windows left after a brief delay
      // This prevents crashes when video call window closes before main window is established
      if (allWindows.length === 0) {
        console.log('No windows remaining after delay, quitting application');
        electron.app.quit();
      } else {
        console.log(`${allWindows.length} window(s) still exist, not quitting`);
      }
    }, 100); // Brief delay to let window state stabilize
  });
  electron.app.whenReady().then(() => preloadBrowsersList());
  listen(SETTINGS_SET_HARDWARE_ACCELERATION_OPT_IN_CHANGED, () => {
    relaunchApp();
  });
  listen(APP_ALLOWED_NTLM_CREDENTIALS_DOMAINS_SET, action => {
    if (action.payload.length > 0) {
      electron.session.defaultSession.allowNTLMCredentialsForDomains(action.payload);
    }
  });
  listen(SETTINGS_NTLM_CREDENTIALS_CHANGED, action => {
    if (action.payload === true) {
      const allowedNTLMCredentialsDomains = readSetting('allowedNTLMCredentialsDomains');
      if (allowedNTLMCredentialsDomains) {
        console.log('Setting NTLM credentials', allowedNTLMCredentialsDomains);
        electron.session.defaultSession.allowNTLMCredentialsForDomains(allowedNTLMCredentialsDomains);
      }
    } else {
      console.log('Clearing NTLM credentials');
      electron.session.defaultSession.allowNTLMCredentialsForDomains('');
    }
  });
  listen(SETTINGS_CLEAR_PERMITTED_SCREEN_CAPTURE_PERMISSIONS, async () => {
    const permitted = await askForClearScreenCapturePermission();
    if (permitted) {
      dispatch({
        type: JITSI_SERVER_CAPTURE_SCREEN_PERMISSIONS_CLEARED,
        payload: {}
      });
    }
  });
  const allowedNTLMCredentialsDomains = readSetting('allowedNTLMCredentialsDomains');
  const isNTLMCredentialsEnabled = readSetting('isNTLMCredentialsEnabled');
  if (isNTLMCredentialsEnabled && allowedNTLMCredentialsDomains.length > 0) {
    console.log('Setting NTLM credentials', allowedNTLMCredentialsDomains);
    electron.session.defaultSession.allowNTLMCredentialsForDomains(allowedNTLMCredentialsDomains);
  }
  dispatch({
    type: APP_PATH_SET,
    payload: electron.app.getAppPath()
  });
  dispatch({
    type: APP_VERSION_SET,
    payload: electron.app.getVersion()
  });
  dispatch({
    type: APP_MAIN_WINDOW_TITLE_SET,
    payload: 'Rocket.Chat'
  });
};

const selectPersistableValues = reselect.createStructuredSelector({
  currentView: ({
    currentView
  }) => currentView,
  doCheckForUpdatesOnStartup: ({
    doCheckForUpdatesOnStartup
  }) => doCheckForUpdatesOnStartup,
  downloads: ({
    downloads
  }) => downloads,
  machineTheme: ({
    machineTheme
  }) => machineTheme,
  isMenuBarEnabled: ({
    isMenuBarEnabled
  }) => isMenuBarEnabled,
  isShowWindowOnUnreadChangedEnabled: ({
    isShowWindowOnUnreadChangedEnabled
  }) => isShowWindowOnUnreadChangedEnabled,
  isSideBarEnabled: ({
    isSideBarEnabled
  }) => isSideBarEnabled,
  isTrayIconEnabled: ({
    isTrayIconEnabled
  }) => isTrayIconEnabled,
  rootWindowState: ({
    rootWindowState
  }) => rootWindowState,
  servers: ({
    servers
  }) => servers,
  skippedUpdateVersion: ({
    skippedUpdateVersion
  }) => skippedUpdateVersion,
  trustedCertificates: ({
    trustedCertificates
  }) => trustedCertificates,
  notTrustedCertificates: ({
    notTrustedCertificates
  }) => notTrustedCertificates,
  isEachUpdatesSettingConfigurable: ({
    isEachUpdatesSettingConfigurable
  }) => isEachUpdatesSettingConfigurable,
  isUpdatingEnabled: ({
    isUpdatingEnabled
  }) => isUpdatingEnabled,
  isHardwareAccelerationEnabled: ({
    isHardwareAccelerationEnabled
  }) => isHardwareAccelerationEnabled,
  externalProtocols: ({
    externalProtocols
  }) => externalProtocols,
  allowedJitsiServers: ({
    allowedJitsiServers
  }) => allowedJitsiServers,
  isReportEnabled: ({
    isReportEnabled
  }) => isReportEnabled,
  isFlashFrameEnabled: ({
    isFlashFrameEnabled
  }) => isFlashFrameEnabled,
  isInternalVideoChatWindowEnabled: ({
    isInternalVideoChatWindowEnabled
  }) => isInternalVideoChatWindowEnabled,
  isMinimizeOnCloseEnabled: ({
    isMinimizeOnCloseEnabled
  }) => isMinimizeOnCloseEnabled,
  isAddNewServersEnabled: ({
    isAddNewServersEnabled
  }) => isAddNewServersEnabled,
  isDeveloperModeEnabled: ({
    isDeveloperModeEnabled
  }) => isDeveloperModeEnabled,
  hasHideOnTrayNotificationShown: ({
    hasHideOnTrayNotificationShown
  }) => hasHideOnTrayNotificationShown,
  lastSelectedServerUrl: ({
    lastSelectedServerUrl
  }) => lastSelectedServerUrl,
  allowedNTLMCredentialsDomains: ({
    allowedNTLMCredentialsDomains
  }) => allowedNTLMCredentialsDomains,
  isNTLMCredentialsEnabled: ({
    isNTLMCredentialsEnabled
  }) => isNTLMCredentialsEnabled,
  mainWindowTitle: ({
    mainWindowTitle
  }) => mainWindowTitle || 'Rocket.Chat',
  selectedBrowser: ({
    selectedBrowser
  }) => selectedBrowser,
  videoCallWindowState: ({
    videoCallWindowState
  }) => videoCallWindowState,
  isVideoCallWindowPersistenceEnabled: ({
    isVideoCallWindowPersistenceEnabled
  }) => isVideoCallWindowPersistenceEnabled,
  isVideoCallDevtoolsAutoOpenEnabled: ({
    isVideoCallDevtoolsAutoOpenEnabled
  }) => isVideoCallDevtoolsAutoOpenEnabled,
  updateChannel: ({
    updateChannel
  }) => updateChannel
});

const migrations = {
  '>=3.1.0': before => {
    var _rest$currentView;
    const {
      currentServerUrl,
      ...rest
    } = before;
    return {
      ...rest,
      currentView: currentServerUrl ? {
        url: currentServerUrl
      } : (_rest$currentView = rest.currentView) !== null && _rest$currentView !== void 0 ? _rest$currentView : 'add-new-server',
      downloads: {}
    };
  },
  '>=3.5.0': before => ({
    ...before,
    isReportEnabled: true,
    isInternalVideoChatWindowEnabled: true,
    isFlashFrameEnabled: process.platform === 'win32' || process.platform === 'darwin'
  }),
  '>=3.7.9': before => ({
    ...before,
    isMinimizeOnCloseEnabled: process.platform === 'win32'
  }),
  '>=3.8.0': before => ({
    ...before,
    isReportEnabled: !process.mas
  }),
  '>=3.8.4': before => ({
    ...before,
    isInternalVideoChatWindowEnabled: !process.mas,
    isAddNewServersEnabled: true
  }),
  '>=3.8.7': before => ({
    ...before,
    isHardwareAccelerationEnabled: true
  }),
  '>=3.8.9': before => ({
    ...before,
    isAddNewServersEnabled: true
  }),
  '>=3.8.12': before => ({
    ...before,
    hasHideOnTrayNotificationShown: false
  }),
  '>=3.9.6': before => ({
    ...before,
    isNTLMCredentialsEnabled: false,
    allowedNTLMCredentialsDomains: null,
    lastSelectedServerUrl: ''
  }),
  '>=4.1.0': before => ({
    ...before,
    mainWindowTitle: 'Rocket.Chat',
    machineTheme: 'light'
  }),
  '>=4.2.0': before => ({
    ...before,
    selectedBrowser: null
  }),
  '>=4.4.0': before => ({
    ...before,
    isDeveloperModeEnabled: false
  }),
  '>=4.5.0': before => ({
    ...before,
    updateChannel: 'latest'
  })
};

let electronStore;
const getElectronStore = () => {
  if (!electronStore) {
    electronStore = new ElectronStore__default.default({
      migrations: Object.fromEntries(Object.entries(migrations).map(([semver, transform]) => [semver, store => {
        store.store = transform(store.store);
      }])),
      projectVersion: electron.app.getVersion(),
      configFileMode: 0o666
    });
  }
  return electronStore;
};
const getPersistedValues = () => getElectronStore().store;
let lastSavedTime = 0;
const persistValues = values => {
  if (Date.now() - lastSavedTime > 1000) {
    try {
      getElectronStore().set(values);
    } catch (error) {
      error instanceof Error && console.error(error);
    }
    lastSavedTime = Date.now();
  }
};

const loadUserDataOverriddenSettings = async () => {
  try {
    const filePath = path__default.default.join(electron.app.getPath('userData'), 'overridden-settings.json');
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    return json && typeof json === 'object' ? json : {};
  } catch (error) {
    return {};
  }
};
const loadAppAsarOverriddenSettings = async () => {
  try {
    const filePath = path__default.default.join(electron.app.getAppPath(), electron.app.getAppPath().endsWith('app.asar') ? '..' : '.', 'overridden-settings.json');
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    return json && typeof json === 'object' ? json : {};
  } catch (error) {
    return {};
  }
};
const mergePersistableValues = async localStorage => {
  var _userRootWindowState$, _values, _userRootWindowState$2, _values2, _userRootWindowState$3, _values3, _userRootWindowState$4, _values4, _userRootWindowState$5, _values5, _userRootWindowState$6, _values6, _userRootWindowState$7, _values7;
  const initialValues = select(selectPersistableValues);
  const electronStoreValues = getPersistedValues();
  const userDataOverriddenSettings = await loadUserDataOverriddenSettings();
  const appAsarOverriddenSettings = await loadAppAsarOverriddenSettings();
  const localStorageValues = Object.fromEntries(Object.entries(localStorage).map(([key, value]) => {
    try {
      return [key, JSON.parse(value)];
    } catch (error) {
      return [];
    }
  }));
  let values = selectPersistableValues({
    ...initialValues,
    ...electronStoreValues,
    ...localStorageValues,
    ...userDataOverriddenSettings,
    ...appAsarOverriddenSettings
  });
  if (localStorage.autohideMenu) {
    values = {
      ...values,
      isMenuBarEnabled: localStorage.autohideMenu !== 'true'
    };
  }
  if (localStorage.showWindowOnUnreadChanged) {
    values = {
      ...values,
      isShowWindowOnUnreadChangedEnabled: localStorage.showWindowOnUnreadChanged === 'true'
    };
  }
  if (localStorage['sidebar-closed']) {
    values = {
      ...values,
      isSideBarEnabled: localStorage['sidebar-closed'] !== 'true'
    };
  }
  if (localStorage.hideTray) {
    values = {
      ...values,
      isTrayIconEnabled: localStorage.hideTray !== 'true'
    };
  }
  const userRootWindowState = await (async () => {
    try {
      const filePath = path__default.default.join(electron.app.getPath('userData'), 'main-window-state.json');
      const content = await fs__default.default.promises.readFile(filePath, 'utf8');
      const json = JSON.parse(content);
      await fs__default.default.promises.unlink(filePath);
      return json && typeof json === 'object' ? json : {};
    } catch (error) {
      return {};
    }
  })();
  values = {
    ...values,
    rootWindowState: {
      focused: true,
      visible: !((_userRootWindowState$ = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.isHidden) !== null && _userRootWindowState$ !== void 0 ? _userRootWindowState$ : !((_values = values) !== null && _values !== void 0 && (_values = _values.rootWindowState) !== null && _values !== void 0 && _values.visible)),
      maximized: (_userRootWindowState$2 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.isMaximized) !== null && _userRootWindowState$2 !== void 0 ? _userRootWindowState$2 : (_values2 = values) === null || _values2 === void 0 || (_values2 = _values2.rootWindowState) === null || _values2 === void 0 ? void 0 : _values2.maximized,
      minimized: (_userRootWindowState$3 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.isMinimized) !== null && _userRootWindowState$3 !== void 0 ? _userRootWindowState$3 : (_values3 = values) === null || _values3 === void 0 || (_values3 = _values3.rootWindowState) === null || _values3 === void 0 ? void 0 : _values3.minimized,
      fullscreen: false,
      normal: !(userRootWindowState !== null && userRootWindowState !== void 0 && userRootWindowState.isMinimized || userRootWindowState !== null && userRootWindowState !== void 0 && userRootWindowState.isMaximized),
      bounds: {
        x: (_userRootWindowState$4 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.x) !== null && _userRootWindowState$4 !== void 0 ? _userRootWindowState$4 : normalizeNumber((_values4 = values) === null || _values4 === void 0 || (_values4 = _values4.rootWindowState) === null || _values4 === void 0 || (_values4 = _values4.bounds) === null || _values4 === void 0 ? void 0 : _values4.x),
        y: (_userRootWindowState$5 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.y) !== null && _userRootWindowState$5 !== void 0 ? _userRootWindowState$5 : normalizeNumber((_values5 = values) === null || _values5 === void 0 || (_values5 = _values5.rootWindowState) === null || _values5 === void 0 || (_values5 = _values5.bounds) === null || _values5 === void 0 ? void 0 : _values5.y),
        width: (_userRootWindowState$6 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.width) !== null && _userRootWindowState$6 !== void 0 ? _userRootWindowState$6 : (_values6 = values) === null || _values6 === void 0 || (_values6 = _values6.rootWindowState) === null || _values6 === void 0 || (_values6 = _values6.bounds) === null || _values6 === void 0 ? void 0 : _values6.width,
        height: (_userRootWindowState$7 = userRootWindowState === null || userRootWindowState === void 0 ? void 0 : userRootWindowState.height) !== null && _userRootWindowState$7 !== void 0 ? _userRootWindowState$7 : (_values7 = values) === null || _values7 === void 0 || (_values7 = _values7.rootWindowState) === null || _values7 === void 0 || (_values7 = _values7.bounds) === null || _values7 === void 0 ? void 0 : _values7.height
      }
    }
  };
  dispatch({
    type: APP_SETTINGS_LOADED,
    payload: values
  });
};
const watchAndPersistChanges = () => {
  watch(selectPersistableValues, values => {
    persistValues(values);
  });
};

let ServerUrlResolutionStatus = /*#__PURE__*/function (ServerUrlResolutionStatus) {
  ServerUrlResolutionStatus["OK"] = "ok";
  ServerUrlResolutionStatus["INVALID_URL"] = "invalid-url";
  ServerUrlResolutionStatus["TIMEOUT"] = "timeout";
  ServerUrlResolutionStatus["INVALID"] = "invalid";
  return ServerUrlResolutionStatus;
}({});
const isServerUrlResolutionResult = obj => {
  if (!Array.isArray(obj)) {
    return false;
  }
  return obj.length === 3 && typeof obj[0] === 'string' && [ServerUrlResolutionStatus.INVALID, ServerUrlResolutionStatus.INVALID_URL, ServerUrlResolutionStatus.TIMEOUT].includes(obj[1]) && typeof obj[2] === 'object' || obj.length === 2 && typeof obj[0] === 'string' && obj[1] === ServerUrlResolutionStatus.OK;
};

let getAbsoluteUrl;

const NOTIFICATIONS_CREATE_REQUESTED = 'notifications/create-requested';
const NOTIFICATIONS_CREATE_RESPONDED = 'notifications/create-responded';
const NOTIFICATIONS_NOTIFICATION_ACTIONED = 'notifications/notification-actioned';
const NOTIFICATIONS_NOTIFICATION_CLICKED = 'notifications/notification-clicked';
const NOTIFICATIONS_NOTIFICATION_CLOSED = 'notifications/notification-closed';
const NOTIFICATIONS_NOTIFICATION_DISMISSED = 'notifications/notification-dismissed';
const NOTIFICATIONS_NOTIFICATION_REPLIED = 'notifications/notification-replied';
const NOTIFICATIONS_NOTIFICATION_SHOWN = 'notifications/notification-shown';

const normalizeIconUrl = iconUrl => {
  if (/^data:/.test(iconUrl)) {
    return iconUrl;
  }
  if (!/^https?:\/\//.test(iconUrl)) {
    return getAbsoluteUrl(iconUrl);
  }
  return iconUrl;
};
const eventHandlers = new Map();
const createNotification$1 = async ({
  title,
  icon,
  onEvent,
  ...options
}) => {
  const id = await request({
    type: NOTIFICATIONS_CREATE_REQUESTED,
    payload: {
      title,
      ...(icon ? {
        icon: normalizeIconUrl(icon)
      } : {}),
      ...options
    }
  }, NOTIFICATIONS_CREATE_RESPONDED);
  eventHandlers.set(id, event => onEvent === null || onEvent === void 0 ? void 0 : onEvent({
    type: event.type,
    detail: event.detail
  }));
  return id;
};

const items = new Map();
const handleWillDownloadEvent = async (_event, item, serverWebContents) => {
  const itemId = Date.now();
  items.set(itemId, item);
  const server = select(({
    servers
  }) => servers.find(server => server.webContentsId === serverWebContents.id));
  if (!server) {
    // TODO: check if the download always comes from the main frame webContents
    throw new Error('could not match the server');
  }
  dispatch({
    type: DOWNLOAD_CREATED,
    payload: {
      itemId,
      state: item.isPaused() ? 'paused' : item.getState(),
      status: item.isPaused() ? DownloadStatus.PAUSED : DownloadStatus.ALL,
      fileName: item.getFilename(),
      receivedBytes: item.getReceivedBytes(),
      totalBytes: item.getTotalBytes(),
      startTime: item.getStartTime() * 1000,
      endTime: undefined,
      url: item.getURL(),
      serverUrl: server === null || server === void 0 ? void 0 : server.url,
      serverTitle: server === null || server === void 0 ? void 0 : server.title,
      mimeType: item.getMimeType(),
      savePath: item.getSavePath()
    }
  });
  item.on('updated', () => {
    dispatch({
      type: DOWNLOAD_UPDATED,
      payload: {
        itemId,
        state: item.isPaused() ? 'paused' : item.getState(),
        status: item.isPaused() ? DownloadStatus.PAUSED : DownloadStatus.ALL,
        fileName: item.getFilename(),
        receivedBytes: item.getReceivedBytes(),
        totalBytes: item.getTotalBytes(),
        startTime: item.getStartTime() * 1000,
        endTime: Date.now(),
        url: item.getURL(),
        mimeType: item.getMimeType(),
        savePath: item.getSavePath()
      }
    });
  });
  item.on('done', (_event, state) => {
    createNotification$1({
      title: 'Downloads',
      body: item.getFilename(),
      subtitle: state === 'completed' ? i18next.t('downloads.notifications.downloadFinished') : i18next.t('downloads.notifications.downloadCancelled')
    });
    dispatch({
      type: DOWNLOAD_UPDATED,
      payload: {
        itemId,
        state: item.getState(),
        status: item.getState() === 'cancelled' ? DownloadStatus.CANCELLED : DownloadStatus.ALL,
        fileName: item.getFilename(),
        receivedBytes: item.getReceivedBytes(),
        totalBytes: item.getTotalBytes(),
        startTime: item.getStartTime() * 1000,
        endTime: Date.now(),
        url: item.getURL(),
        mimeType: item.getMimeType(),
        savePath: item.getSavePath()
      }
    });
    items.delete(itemId);
  });
};
const setupDownloads = () => {
  handle('downloads/show-in-folder', async (_webContents, itemId) => {
    const download = select(({
      downloads
    }) => downloads[itemId]);
    if (!download) {
      return;
    }
    electron.shell.showItemInFolder(download.savePath);
  });
  handle('downloads/copy-link', async (_webContent, itemId) => {
    const download = select(({
      downloads
    }) => downloads[itemId]);
    if (!download) {
      return;
    }
    electron.clipboard.write({
      text: download.url
    });
  });
  handle('downloads/pause', async (_webContent, itemId) => {
    if (!items.has(itemId)) {
      return;
    }
    const item = items.get(itemId);
    if (item !== null && item !== void 0 && item.isPaused()) {
      return;
    }
    item === null || item === void 0 || item.pause();
  });
  handle('downloads/resume', async (_webContent, itemId) => {
    if (!items.has(itemId)) {
      return;
    }
    const item = items.get(itemId);
    if (!(item !== null && item !== void 0 && item.canResume())) {
      return;
    }
    item === null || item === void 0 || item.resume();
  });
  handle('downloads/cancel', async (_webContent, itemId) => {
    if (!items.has(itemId)) {
      return;
    }
    const item = items.get(itemId);
    item === null || item === void 0 || item.cancel();
  });
  handle('downloads/retry', async (_webContent, itemId) => {
    var _URL$searchParams$get;
    const {
      download,
      webContentsId
    } = select(({
      downloads,
      servers
    }) => {
      var _servers$find;
      const download = downloads[itemId];
      const {
        webContentsId
      } = (_servers$find = servers.find(server => server.url === download.serverUrl)) !== null && _servers$find !== void 0 ? _servers$find : {};
      return {
        download,
        webContentsId
      };
    });
    const downloadStartTimestamp = new URL(download.url).searchParams.get('X-Amz-Date');
    const expiresIn = (_URL$searchParams$get = new URL(download.url).searchParams.get('X-Amz-Expires')) !== null && _URL$searchParams$get !== void 0 ? _URL$searchParams$get : 120;
    const parsedStartTime = {
      year: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(0, 4),
      month: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(4, 6),
      day: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(6, 8),
      hour: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(9, 11),
      minute: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(11, 13),
      second: downloadStartTimestamp === null || downloadStartTimestamp === void 0 ? void 0 : downloadStartTimestamp.substring(13, 15)
    };
    const s3Expired = new Date().getTime() > new Date(`${parsedStartTime.year}-${parsedStartTime.month}-${parsedStartTime.day}T${parsedStartTime.hour}:${parsedStartTime.minute}:${parsedStartTime.second}Z`).getTime() + +expiresIn * 1000;
    if (s3Expired) {
      createNotification$1({
        title: i18next.t('downloads.notifications.downloadExpired'),
        body: i18next.t('downloads.notifications.downloadExpiredMessage'),
        subtitle: download.fileName
      });
      dispatch({
        type: DOWNLOAD_UPDATED,
        payload: {
          ...download,
          state: 'expired',
          status: DownloadStatus.CANCELLED
        }
      });
      return;
    }
    dispatch({
      type: DOWNLOAD_REMOVED,
      payload: itemId
    });
    if (webContentsId && electron.webContents !== undefined) {
      if (electron.webContents.fromId !== undefined) {
        const webContentsInstance = electron.webContents.fromId(webContentsId);
        if (webContentsInstance !== undefined) {
          webContentsInstance.downloadURL(download.url);
        }
      }
    }
  });
  handle('downloads/remove', async (_webContent, itemId) => {
    if (items.has(itemId)) {
      const item = items.get(itemId);
      item === null || item === void 0 || item.cancel();
    }
    dispatch({
      type: DOWNLOAD_REMOVED,
      payload: itemId
    });
  });
};

const t$6 = i18next__default.default.t.bind(i18next__default.default);
const loadUserTrustedCertificates = async () => {
  try {
    const filePath = path__default.default.join(electron.app.getPath('userData'), 'certificate.json');
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    await fs__default.default.promises.unlink(filePath);
    return json && typeof json === 'object' ? json : {};
  } catch (error) {
    return {};
  }
};
const serializeCertificate = certificate => `${certificate.issuerName}\n${certificate.data.toString()}`;
const queuedTrustRequests = new Map();
const setupNavigation = async () => {
  electron.app.addListener('certificate-error', async (event, _webContents, requestedUrl, error, certificate, callback) => {
    var _queuedTrustRequests$2, _queuedTrustRequests$3;
    event.preventDefault();
    const serialized = serializeCertificate(certificate);
    const {
      host
    } = new URL(requestedUrl);
    let trustedCertificates = select(({
      trustedCertificates
    }) => trustedCertificates);
    const isTrusted = !!trustedCertificates[host] && trustedCertificates[host] === serialized;
    if (isTrusted) {
      callback(true);
      return;
    }
    let notTrustedCertificates = select(({
      notTrustedCertificates
    }) => notTrustedCertificates);
    const isNotTrusted = !!notTrustedCertificates[host] && notTrustedCertificates[host] === serialized;
    if (isNotTrusted) {
      callback(false);
      return;
    }
    if (queuedTrustRequests.has(certificate.fingerprint)) {
      var _queuedTrustRequests$;
      (_queuedTrustRequests$ = queuedTrustRequests.get(certificate.fingerprint)) === null || _queuedTrustRequests$ === void 0 || _queuedTrustRequests$.push(callback);
      return;
    }
    queuedTrustRequests.set(certificate.fingerprint, [callback]);
    let detail = `URL: ${requestedUrl}\nError: ${error}`;
    if (trustedCertificates[host]) {
      detail = t$6('error.differentCertificate', {
        detail
      });
    }
    const response = await askForCertificateTrust(certificate.issuerName, detail);
    const isTrustedByUser = response;
    (_queuedTrustRequests$2 = queuedTrustRequests.get(certificate.fingerprint)) === null || _queuedTrustRequests$2 === void 0 || _queuedTrustRequests$2.forEach(cb => cb(isTrustedByUser === AskForCertificateTrustResponse.YES));
    queuedTrustRequests.delete(certificate.fingerprint);
    trustedCertificates = select(({
      trustedCertificates
    }) => trustedCertificates);
    if (isTrustedByUser === AskForCertificateTrustResponse.YES) {
      dispatch({
        type: TRUSTED_CERTIFICATES_UPDATED,
        payload: {
          ...trustedCertificates,
          [host]: serialized
        }
      });
    }
    (_queuedTrustRequests$3 = queuedTrustRequests.get(certificate.fingerprint)) === null || _queuedTrustRequests$3 === void 0 || _queuedTrustRequests$3.forEach(cb => cb(isTrustedByUser === AskForCertificateTrustResponse.NO));
    queuedTrustRequests.delete(certificate.fingerprint);
    notTrustedCertificates = select(({
      notTrustedCertificates
    }) => notTrustedCertificates);
    if (isTrustedByUser === AskForCertificateTrustResponse.NO) {
      dispatch({
        type: NOT_TRUSTED_CERTIFICATES_UPDATED,
        payload: {
          ...notTrustedCertificates,
          [host]: serialized
        }
      });
    }
  });
  electron.app.addListener('select-client-certificate', async (event, _webContents, _url, certificateList, callback) => {
    event.preventDefault();
    if (certificateList.length === 1) {
      callback(certificateList[0]);
      return;
    }
    const fingerprint = await request({
      type: CERTIFICATES_CLIENT_CERTIFICATE_REQUESTED,
      payload: JSON.parse(JSON.stringify(certificateList))
    }, SELECT_CLIENT_CERTIFICATE_DIALOG_CERTIFICATE_SELECTED, SELECT_CLIENT_CERTIFICATE_DIALOG_DISMISSED);
    const certificate = certificateList.find(certificate => certificate.fingerprint === fingerprint);
    if (!certificate) {
      callback(undefined);
      return;
    }
    callback(certificate);
  });
  electron.app.addListener('login', (event, _webContents, authenticationResponseDetails, _authInfo, callback) => {
    event.preventDefault();
    const servers = select(({
      servers
    }) => servers);
    for (const server of servers) {
      const {
        host: serverHost,
        username,
        password
      } = new URL(server.url);
      const requestHost = new URL(authenticationResponseDetails.url).host;
      if (serverHost !== requestHost || !username) {
        callback();
        return;
      }
      callback(username, password);
    }
  });
  const trustedCertificates = select(({
    trustedCertificates
  }) => trustedCertificates);
  const userTrustedCertificates = await loadUserTrustedCertificates();
  dispatch({
    type: CERTIFICATES_LOADED,
    payload: {
      ...trustedCertificates,
      ...userTrustedCertificates
    }
  });
};
const isProtocolAllowed = async rawUrl => {
  const url = new URL(rawUrl);
  const instrinsicProtocols = ['http:', 'https:', 'mailto:'];
  const persistedProtocols = Object.entries(select(({
    externalProtocols
  }) => externalProtocols)).filter(([, allowed]) => allowed).map(([protocol]) => protocol);
  const allowedProtocols = [...instrinsicProtocols, ...persistedProtocols];
  if (allowedProtocols.includes(url.protocol)) {
    return true;
  }
  const {
    allowed,
    dontAskAgain
  } = await askForOpeningExternalProtocol(url);
  if (dontAskAgain) {
    dispatch({
      type: EXTERNAL_PROTOCOL_PERMISSION_UPDATED,
      payload: {
        protocol: url.protocol,
        allowed
      }
    });
  }
  return allowed;
};

const SPELL_CHECKING_TOGGLED = 'spell-checking/toggled';
const SPELL_CHECKING_LANGUAGE_TOGGLED = 'spell-checking/language-toggled';

const t$5 = i18next__default.default.t.bind(i18next__default.default);
const createSpellCheckingMenuTemplate = (serverViewWebContents, {
  isEditable,
  dictionarySuggestions
}) => {
  if (!isEditable) {
    return [];
  }
  const {
    availableSpellCheckerLanguages
  } = serverViewWebContents.session;
  const spellCheckerLanguages = serverViewWebContents.session.getSpellCheckerLanguages();
  return [...(spellCheckerLanguages.length > 0 && dictionarySuggestions ? [...(dictionarySuggestions.length === 0 ? [{
    label: t$5('contextMenu.noSpellingSuggestions'),
    enabled: false
  }] : dictionarySuggestions.slice(0, 6).map(dictionarySuggestion => ({
    label: dictionarySuggestion,
    click: () => {
      serverViewWebContents.replaceMisspelling(dictionarySuggestion);
    }
  }))), ...(dictionarySuggestions.length > 6 ? [{
    label: t$5('contextMenu.moreSpellingSuggestions'),
    submenu: dictionarySuggestions.slice(6).map(dictionarySuggestion => ({
      label: dictionarySuggestion,
      click: () => {
        serverViewWebContents.replaceMisspelling(dictionarySuggestion);
      }
    }))
  }] : []), {
    type: 'separator'
  }] : []), ...(process.platform === 'darwin' ? [{
    label: t$5('contextMenu.spelling'),
    type: 'checkbox',
    checked: spellCheckerLanguages.length > 0,
    click: ({
      checked
    }) => {
      dispatch({
        type: SPELL_CHECKING_TOGGLED,
        payload: checked
      });
    }
  }] : [{
    label: t$5('contextMenu.spellingLanguages'),
    enabled: availableSpellCheckerLanguages.length > 0,
    submenu: [...availableSpellCheckerLanguages.map(availableSpellCheckerLanguage => ({
      label: availableSpellCheckerLanguage,
      type: 'checkbox',
      checked: spellCheckerLanguages.includes(availableSpellCheckerLanguage),
      click: ({
        checked
      }) => {
        dispatch({
          type: SPELL_CHECKING_LANGUAGE_TOGGLED,
          payload: {
            name: availableSpellCheckerLanguage,
            enabled: checked
          }
        });
      }
    }))]
  }]), {
    type: 'separator'
  }];
};
const createImageMenuTemplate = (serverViewWebContents, {
  mediaType,
  srcURL,
  x,
  y
}) => mediaType === 'image' ? [{
  label: t$5('contextMenu.saveImageAs'),
  click: () => serverViewWebContents.downloadURL(srcURL)
}, {
  label: t$5('contextMenu.copyImage'),
  click: () => serverViewWebContents.copyImageAt(x, y)
}, {
  type: 'separator'
}] : [];
const createLinkMenuTemplate = (_serverViewWebContents, {
  linkURL,
  linkText
}) => linkURL ? [{
  label: t$5('contextMenu.openLink'),
  click: () => {
    isProtocolAllowed(linkURL).then(allowed => {
      if (!allowed) {
        return;
      }
      openExternal(linkURL);
    });
  }
}, {
  label: t$5('contextMenu.copyLinkText'),
  click: () => electron.clipboard.write({
    text: linkText,
    bookmark: linkText
  }),
  enabled: !!linkText
}, {
  label: t$5('contextMenu.copyLinkAddress'),
  click: () => electron.clipboard.write({
    text: linkURL,
    bookmark: linkText
  })
}, {
  type: 'separator'
}] : [];
const createDefaultMenuTemplate = (_serverViewWebContents, {
  editFlags: {
    canUndo = false,
    canRedo = false,
    canCut = false,
    canCopy = false,
    canPaste = false,
    canSelectAll = false
  }
}) => [{
  label: t$5('contextMenu.undo'),
  role: 'undo',
  accelerator: 'CommandOrControl+Z',
  enabled: canUndo
}, {
  label: t$5('contextMenu.redo'),
  role: 'redo',
  accelerator: process.platform === 'win32' ? 'Control+Y' : 'CommandOrControl+Shift+Z',
  enabled: canRedo
}, {
  type: 'separator'
}, {
  label: t$5('contextMenu.cut'),
  role: 'cut',
  accelerator: 'CommandOrControl+X',
  enabled: canCut
}, {
  label: t$5('contextMenu.copy'),
  role: 'copy',
  accelerator: 'CommandOrControl+C',
  enabled: canCopy
}, {
  label: t$5('contextMenu.paste'),
  role: 'paste',
  accelerator: 'CommandOrControl+V',
  enabled: canPaste
}, {
  label: t$5('contextMenu.selectAll'),
  role: 'selectAll',
  accelerator: 'CommandOrControl+A',
  enabled: canSelectAll
}];
const createPopupMenuForServerView = (serverViewWebContents, params) => electron.Menu.buildFromTemplate([...createSpellCheckingMenuTemplate(serverViewWebContents, params), ...createImageMenuTemplate(serverViewWebContents, params), ...createLinkMenuTemplate(serverViewWebContents, params), ...createDefaultMenuTemplate(serverViewWebContents, params)]);

const t$4 = i18next__default.default.t.bind(i18next__default.default);
const webContentsByServerUrl = new Map();
const getWebContentsByServerUrl = url => webContentsByServerUrl.get(url);
const initializeServerWebContentsAfterReady = (_serverUrl, guestWebContents, rootWindow) => {
  const handleContextMenu = async (event, params) => {
    event.preventDefault();
    const menu = createPopupMenuForServerView(guestWebContents, params);
    menu.popup({
      window: rootWindow
    });
  };
  guestWebContents.addListener('context-menu', handleContextMenu);
  guestWebContents.on('page-title-updated', (_event, pageTitle) => {
    dispatch({
      type: WEBVIEW_PAGE_TITLE_CHANGED,
      payload: {
        url: _serverUrl,
        pageTitle
      }
    });
  });
};
const serverReloadView = async serverUrl => {
  const url = new URL(serverUrl).href;
  const guestWebContents = getWebContentsByServerUrl(url);
  await (guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.loadURL(url));
  if (url) {
    dispatch({
      type: WEBVIEW_SERVER_RELOADED,
      payload: {
        url
      }
    });
  }
};
const initializeServerWebContentsAfterAttach = (serverUrl, guestWebContents, rootWindow) => {
  webContentsByServerUrl.set(serverUrl, guestWebContents);
  const webviewSession = guestWebContents.session;
  guestWebContents.addListener('destroyed', () => {
    guestWebContents.removeAllListeners();
    webviewSession.removeAllListeners();
    webContentsByServerUrl.delete(serverUrl);
    const canPurge = select(({
      servers
    }) => !servers.some(server => server.url === serverUrl));
    if (canPurge) {
      webviewSession.clearStorageData();
      return;
    }
    webviewSession.flushStorageData();
  });
  const handleDidStartLoading = () => {
    dispatch({
      type: WEBVIEW_DID_START_LOADING,
      payload: {
        url: serverUrl
      }
    });
    rootWindow.webContents.send(WEBVIEW_DID_START_LOADING, serverUrl);
  };
  const handleDidFailLoad = (_event, errorCode, _errorDescription, _validatedURL, isMainFrame, _frameProcessId, _frameRoutingId) => {
    if (errorCode === -3) {
      console.warn('Ignoring likely spurious did-fail-load with errorCode -3, cf https://github.com/electron/electron/issues/14004');
      return;
    }
    dispatch({
      type: WEBVIEW_DID_FAIL_LOAD,
      payload: {
        url: serverUrl,
        isMainFrame
      }
    });
  };
  const handleDidNavigateInPage = (_event, pageUrl, _isMainFrame, _frameProcessId, _frameRoutingId) => {
    dispatch({
      type: WEBVIEW_DID_NAVIGATE,
      payload: {
        url: serverUrl,
        pageUrl
      }
    });
  };
  const handleBeforeInputEvent = (_event, {
    type,
    key
  }) => {
    if (type !== 'keyUp' && type !== 'keyDown') {
      return;
    }
    const shortcutKey = process.platform === 'darwin' ? 'Meta' : 'Control';
    if (key !== shortcutKey && key !== 'Escape') {
      return;
    }
    rootWindow.webContents.sendInputEvent({
      type,
      keyCode: key,
      modifiers: []
    });
  };
  guestWebContents.addListener('did-start-loading', handleDidStartLoading);
  guestWebContents.addListener('did-fail-load', handleDidFailLoad);
  guestWebContents.addListener('did-navigate-in-page', handleDidNavigateInPage);
  guestWebContents.addListener('before-input-event', handleBeforeInputEvent);
};
const attachGuestWebContentsEvents = async () => {
  const rootWindow = await getRootWindow();
  const handleWillAttachWebview = (_event, webPreferences, _params) => {
    delete webPreferences.enableBlinkFeatures;
    webPreferences.preload = path__default.default.join(electron.app.getAppPath(), 'app/preload.js');
    webPreferences.nodeIntegration = false;
    webPreferences.nodeIntegrationInWorker = false;
    webPreferences.nodeIntegrationInSubFrames = false;
    webPreferences.webSecurity = true;
    webPreferences.contextIsolation = true;
    webPreferences.sandbox = false;
  };
  const handleDidAttachWebview = (_event, webContents) => {
    // webContents.send('console-warn', '%c%s', 'color: red; font-size: 32px;', t('selfxss.title'));
    // webContents.send('console-warn', '%c%s', 'font-size: 20px;', t('selfxss.description'));
    // webContents.send('console-warn', '%c%s', 'font-size: 20px;', t('selfxss.moreInfo'));

    {
      setupPreloadReload(webContents);
    }
    webContents.setWindowOpenHandler(({
      url,
      frameName,
      disposition
    }) => {
      if (disposition === 'foreground-tab' || disposition === 'background-tab') {
        isProtocolAllowed(url).then(allowed => {
          if (!allowed) {
            return {
              action: 'deny'
            };
          }
          openExternal(url);
          return {
            action: 'deny'
          };
        });
        return {
          action: 'deny'
        };
      }
      const isVideoCall = frameName === 'Video Call';
      return {
        action: 'allow',
        overrideBrowserWindowOptions: {
          ...(isVideoCall ? {
            webPreferences: {
              preload: path__default.default.join(electron.app.getAppPath(), 'app/preload.js'),
              sandbox: false
            }
          } : {}),
          show: false
        }
      };
    });
    webContents.addListener('did-create-window', (window, {
      url,
      frameName,
      disposition,
      referrer,
      postBody
    }) => {
      window.once('ready-to-show', () => {
        window.show();
      });
      isProtocolAllowed(url).then(allowed => {
        if (!allowed) {
          window.destroy();
          return;
        }
        const isGoogleSignIn = frameName === 'Login' && disposition === 'new-window' && new URL(url).hostname.match(/(\.)?google\.com$/);
        window.loadURL(url, {
          userAgent: isGoogleSignIn ? electron.app.userAgentFallback.replace(`Electron/${process.versions.electron} `, '').replace(`${electron.app.name}/${electron.app.getVersion()} `, '') : electron.app.userAgentFallback,
          httpReferrer: referrer,
          ...(postBody && {
            extraHeaders: `Content-Type: ${postBody.contentType}; boundary=${postBody.boundary}`,
            postData: postBody.data
          })
        });
      });
    });
  };
  const handlePermissionRequest = async (_webContents, permission, callback, details) => {
    console.log('Permission request', permission, details);
    switch (permission) {
      case 'media':
        {
          const {
            mediaTypes = []
          } = details;
          if (process.platform === 'darwin') {
            const allowed = (!mediaTypes.includes('audio') || (await electron.systemPreferences.askForMediaAccess('microphone'))) && (!mediaTypes.includes('video') || (await electron.systemPreferences.askForMediaAccess('camera')));
            callback(allowed);
            return;
          }
          callback(true);
          return;
        }
      case 'geolocation':
      case 'notifications':
      case 'midiSysex':
      case 'pointerLock':
      case 'fullscreen':
        callback(true);
        return;
      case 'openExternal':
        {
          if (!details.externalURL) {
            callback(false);
            return;
          }
          const allowed = await isProtocolAllowed(details.externalURL);
          callback(allowed);
          return;
        }
      default:
        callback(false);
    }
  };
  listen(WEBVIEW_READY, action => {
    const guestWebContents = electron.webContents.fromId(action.payload.webContentsId);
    initializeServerWebContentsAfterReady(action.payload.url, guestWebContents, rootWindow);
    guestWebContents.session.setPermissionRequestHandler(handlePermissionRequest);
    guestWebContents.session.on('will-download', (event, item, _webContents) => {
      var _path$extname;
      const fileName = item.getFilename();
      const extension = (_path$extname = path__default.default.extname(fileName)) === null || _path$extname === void 0 ? void 0 : _path$extname.slice(1).toLowerCase();
      const savePath = electron.dialog.showSaveDialogSync(rootWindow, {
        defaultPath: item.getFilename(),
        filters: [{
          name: `*.${extension}`,
          extensions: [extension]
        }, {
          name: '*.*',
          extensions: ['*']
        }]
      });
      if (savePath !== undefined) {
        item.setSavePath(savePath);
        handleWillDownloadEvent(event, item, _webContents);
        return;
      }
      event.preventDefault();
    });

    // prevents the webview from navigating because of twitter preview links
    guestWebContents.on('will-navigate', (e, redirectUrl) => {
      const preventNavigateHosts = ['t.co', 'twitter.com'];
      if (preventNavigateHosts.includes(new URL(redirectUrl).hostname)) {
        e.preventDefault();
        isProtocolAllowed(redirectUrl).then(allowed => {
          if (!allowed) {
            return;
          }
          openExternal(redirectUrl);
        });
      }
    });
  });
  listen(WEBVIEW_ATTACHED, action => {
    const guestWebContents = electron.webContents.fromId(action.payload.webContentsId);
    initializeServerWebContentsAfterAttach(action.payload.url, guestWebContents, rootWindow);
  });
  listen(LOADING_ERROR_VIEW_RELOAD_SERVER_CLICKED, action => {
    const guestWebContents = getWebContentsByServerUrl(action.payload.url);
    guestWebContents === null || guestWebContents === void 0 || guestWebContents.loadURL(action.payload.url);
  });
  listen(SIDE_BAR_SERVER_RELOAD, action => {
    serverReloadView(action.payload);
  });
  listen(SIDE_BAR_SERVER_COPY_URL, async action => {
    const guestWebContents = getWebContentsByServerUrl(action.payload);
    const currentUrl = await (guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.getURL());
    electron.clipboard.writeText(currentUrl || '');
  });
  listen(SIDE_BAR_SERVER_OPEN_DEV_TOOLS, action => {
    const guestWebContents = getWebContentsByServerUrl(action.payload);
    guestWebContents === null || guestWebContents === void 0 || guestWebContents.openDevTools();
  });
  listen(SIDE_BAR_SERVER_FORCE_RELOAD, action => {
    const guestWebContents = getWebContentsByServerUrl(action.payload);
    if (!guestWebContents) {
      return;
    }
    dispatch({
      type: CLEAR_CACHE_TRIGGERED,
      payload: guestWebContents.id
    });
  });
  listen(SIDE_BAR_SERVER_REMOVE, action => {
    dispatch({
      type: SIDE_BAR_REMOVE_SERVER_CLICKED,
      payload: action.payload
    });
  });
  listen(SIDE_BAR_CONTEXT_MENU_TRIGGERED, action => {
    const {
      payload: serverUrl
    } = action;
    const menuTemplate = [{
      label: t$4('sidebar.item.reload'),
      click: () => {
        const guestWebContents = getWebContentsByServerUrl(serverUrl);
        guestWebContents === null || guestWebContents === void 0 || guestWebContents.loadURL(serverUrl);
        if (serverUrl) {
          dispatch({
            type: WEBVIEW_SERVER_RELOADED,
            payload: {
              url: serverUrl
            }
          });
        }
      }
    }, {
      label: t$4('sidebar.item.remove'),
      click: () => {
        dispatch({
          type: SIDE_BAR_REMOVE_SERVER_CLICKED,
          payload: serverUrl
        });
      }
    }, {
      type: 'separator'
    }, {
      label: t$4('sidebar.item.openDevTools'),
      click: () => {
        const guestWebContents = getWebContentsByServerUrl(serverUrl);
        guestWebContents === null || guestWebContents === void 0 || guestWebContents.openDevTools();
      }
    }, {
      label: t$4('sidebar.item.copyCurrentUrl'),
      click: async () => {
        const guestWebContents = getWebContentsByServerUrl(serverUrl);
        const currentUrl = await (guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.getURL());
        electron.clipboard.writeText(currentUrl || '');
      }
    }, {
      label: t$4('sidebar.item.reloadClearingCache'),
      click: async () => {
        const guestWebContents = getWebContentsByServerUrl(serverUrl);
        if (!guestWebContents) {
          return;
        }
        dispatch({
          type: CLEAR_CACHE_TRIGGERED,
          payload: guestWebContents.id
        });
      }
    }];
    const menu = electron.Menu.buildFromTemplate(menuTemplate);
    menu.popup({
      window: rootWindow
    });
  });
  listen(CERTIFICATES_CLEARED, () => {
    for (const serverViewWebContents of webContentsByServerUrl.values()) {
      serverViewWebContents.reloadIgnoringCache();
    }
  });
  rootWindow.webContents.addListener('will-attach-webview', handleWillAttachWebview);
  rootWindow.webContents.addListener('did-attach-webview', handleDidAttachWebview);
  handle('server-view/get-url', async webContents => {
    var _Array$from$find;
    return (_Array$from$find = Array.from(webContentsByServerUrl.entries()).find(([, v]) => v === webContents)) === null || _Array$from$find === void 0 ? void 0 : _Array$from$find[0];
  });
  let injectableCode;
  handle('server-view/ready', async webContents => {
    if (!injectableCode) {
      injectableCode = await fs__default.default.promises.readFile(path__default.default.join(electron.app.getAppPath(), 'app/injected.js'), 'utf8');
    }
    webContents.executeJavaScript(injectableCode, true);
    {
      injectableCode = undefined;
    }
  });
  handle('server-view/open-url-on-browser', async (_webContents, url) => {
    const allowed = await isProtocolAllowed(url);
    if (!allowed) {
      return;
    }
    openExternal(url);
  });
};

// This module contains all the urls used in the app

const rocketchat = {
  site: 'https://rocket.chat',
  subdomain: subdomain => `https://${subdomain}.rocket.chat`
};
const supportedVersions = ({
  domain,
  uniqueId
}) => `https://releases.rocket.chat/v2/server/supportedVersions?domain=${domain}&uniqueId=${uniqueId}&source=desktop`;
const server = serverUrl => ({
  uniqueId: `${serverUrl}api/v1/settings.public?_id=uniqueID`,
  setting: id => `${serverUrl}api/v1/settings.public?query={"_id": ${JSON.stringify(id)}}`,
  info: `${serverUrl}api/info`,
  calendarEvents: {
    list: `${serverUrl}api/v1/calendar-events.list`,
    import: `${serverUrl}api/v1/calendar-events.import`,
    update: `${serverUrl}api/v1/calendar-events.update`,
    delete: `${serverUrl}api/v1/calendar-events.delete`
  }
});
const docs = {
  index: 'https://docs.rocket.chat/',
  // TODO: should it be a go link?
  supportedVersions: 'https://go.rocket.chat/i/supported-versions',
  newIssue: 'https://github.com/RocketChat/Rocket.Chat/issues/new' // TODO: should it be a go link?
};

const REQUIRED_SERVER_VERSION_RANGE = '>=2.0.0';
const convertToURL = input => {
  let url;
  if (/^https?:\/\//.test(input)) {
    url = new URL(input);
  } else {
    url = new URL(`https://${input}`);
  }
  const {
    protocol,
    username,
    password,
    hostname,
    port,
    pathname
  } = url;
  return Object.assign(new URL('https://0.0.0.0'), {
    protocol,
    username,
    password,
    hostname,
    port: protocol === 'http' && port === '80' && undefined || protocol === 'https' && port === '443' && undefined || port,
    pathname: /\/$/.test(pathname) ? pathname : `${pathname}/`
  });
};
const fetchServerInformation = async url => {
  const {
    webContents
  } = await getRootWindow();
  const [urlHref, version] = await invoke(webContents, 'servers/fetch-info', url.href);
  return [convertToURL(urlHref), version];
};
const resolveServerUrl = async input => {
  let url;
  try {
    url = convertToURL(input);
  } catch (error) {
    return [input, ServerUrlResolutionStatus.INVALID_URL, error];
  }
  let version;
  try {
    [url, version] = await fetchServerInformation(url);
  } catch (error) {
    if (!(error instanceof Error)) {
      throw error;
    }
    if (!/(^https?:\/\/)|(\.)|(^([^:]+:[^@]+@)?localhost(:\d+)?$)/.test(input)) {
      return resolveServerUrl(rocketchat.subdomain(input));
    }
    if ((error === null || error === void 0 ? void 0 : error.name) === 'AbortError') {
      return [url.href, ServerUrlResolutionStatus.TIMEOUT, error];
    }
    return [url.href, ServerUrlResolutionStatus.INVALID, error];
  }
  const semver = semver$1.coerce(version);
  if (!semver || !semver$1.satisfies(semver, REQUIRED_SERVER_VERSION_RANGE)) {
    return [url.href, ServerUrlResolutionStatus.INVALID, new Error(`incompatible server version (${version}, expected ${REQUIRED_SERVER_VERSION_RANGE})`)];
  }
  return [url.href, ServerUrlResolutionStatus.OK];
};
const loadAppServers = async () => {
  try {
    let filePath = path__default.default.join(electron.app.getAppPath(), electron.app.getAppPath().endsWith('app.asar') ? '..' : '.', 'servers.json');
    if (process.platform === 'darwin') {
      const darwinFilePath = `/Library/Preferences/${packageJsonInformation.productName}/servers.json`;
      if (fs__default.default.existsSync(darwinFilePath)) filePath = darwinFilePath;
    }
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    return json && typeof json === 'object' ? json : {};
  } catch (error) {
    return {};
  }
};
const loadUserServers = async () => {
  try {
    const filePath = path__default.default.join(electron.app.getPath('userData'), 'servers.json');
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    await fs__default.default.promises.unlink(filePath);
    return json && typeof json === 'object' ? json : {};
  } catch (error) {
    return {};
  }
};
const setupServers = async localStorage => {
  var _ref, _serversMap$get$url, _serversMap$get, _servers$, _servers$2;
  listen(SERVER_URL_RESOLUTION_REQUESTED, async action => {
    if (!hasMeta(action)) {
      return;
    }
    try {
      dispatch({
        type: SERVER_URL_RESOLVED,
        payload: await resolveServerUrl(action.payload),
        meta: {
          response: true,
          id: action.meta.id
        }
      });
    } catch (error) {
      isServerUrlResolutionResult(error) && dispatch({
        type: SERVER_URL_RESOLVED,
        payload: error,
        error: true,
        meta: {
          response: true,
          id: action.meta.id
        }
      });
    }
  });
  listen(WEBVIEW_GIT_COMMIT_HASH_CHECK, async action => {
    const {
      url,
      gitCommitHash
    } = action.payload;
    const servers = select(({
      servers
    }) => servers);
    const server = servers.find(server => server.url === url);
    if ((server === null || server === void 0 ? void 0 : server.gitCommitHash) !== gitCommitHash && (server === null || server === void 0 ? void 0 : server.gitCommitHash) !== undefined) {
      dispatch({
        type: WEBVIEW_GIT_COMMIT_HASH_CHANGED,
        payload: {
          url,
          gitCommitHash
        }
      });
      const guestWebContents = getWebContentsByServerUrl(url);
      await (guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.session.clearStorageData({
        storages: ['indexdb']
      }));
      await (guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.session.clearCache());
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.reload();
    }
  });
  let servers = select(({
    servers
  }) => servers);
  let currentServerUrl = select(({
    currentView
  }) => typeof currentView === 'object' ? currentView.url : null);
  const serversMap = new Map(servers.filter(Boolean).filter(({
    url,
    title
  }) => typeof url === 'string' && typeof title === 'string').map(server => [server.url, server]));
  if (localStorage['rocket.chat.hosts']) {
    try {
      const storedString = JSON.parse(localStorage['rocket.chat.hosts']);
      if (/^https?:\/\//.test(storedString)) {
        serversMap.set(storedString, {
          url: storedString,
          title: storedString
        });
      } else {
        const storedValue = JSON.parse(storedString);
        if (Array.isArray(storedValue)) {
          storedValue.map(url => url.replace(/\/$/, '')).forEach(url => {
            serversMap.set(url, {
              url,
              title: url
            });
          });
        }
      }
    } catch (error) {
      console.warn(error);
    }
  }
  if (serversMap.size === 0) {
    const appConfiguration = await loadAppServers();
    for (const [title, url] of Object.entries(appConfiguration)) {
      serversMap.set(url, {
        url,
        title
      });
    }
    const userConfiguration = await loadUserServers();
    for (const [title, url] of Object.entries(userConfiguration)) {
      serversMap.set(url, {
        url,
        title
      });
    }
  }
  if (localStorage['rocket.chat.currentHost'] && localStorage['rocket.chat.currentHost'] !== 'null') {
    currentServerUrl = localStorage['rocket.chat.currentHost'];
  }
  servers = Array.from(serversMap.values());
  currentServerUrl = currentServerUrl ? (_ref = (_serversMap$get$url = (_serversMap$get = serversMap.get(currentServerUrl)) === null || _serversMap$get === void 0 ? void 0 : _serversMap$get.url) !== null && _serversMap$get$url !== void 0 ? _serversMap$get$url : (_servers$ = servers[0]) === null || _servers$ === void 0 ? void 0 : _servers$.url) !== null && _ref !== void 0 ? _ref : null : (_servers$2 = servers[0]) === null || _servers$2 === void 0 ? void 0 : _servers$2.url;
  if (localStorage['rocket.chat.sortOrder']) {
    try {
      const sorting = JSON.parse(localStorage['rocket.chat.sortOrder']);
      if (Array.isArray(sorting)) {
        servers = [...serversMap.values()].sort((a, b) => sorting.indexOf(a.url) - sorting.indexOf(b.url));
      }
    } catch (error) {
      console.warn(error);
    }
  }
  dispatch({
    type: SERVERS_LOADED,
    payload: {
      servers,
      selected: currentServerUrl
    }
  });
};

const isDefinedProtocol = parsedUrl => parsedUrl.protocol === `${electronBuilderJsonInformation.protocol}:`;
const isGoUrlShortener = parsedUrl => parsedUrl.protocol === 'https:' && parsedUrl.hostname === packageJsonInformation.goUrlShortener;
const parseDeepLink = input => {
  if (/^--/.test(input)) {
    // input is a CLI flag
    return null;
  }
  let url;
  try {
    url = new URL(input);
  } catch (error) {
    return null;
  }
  if (isDefinedProtocol(url)) {
    const action = url.hostname;
    const args = url.searchParams;
    return {
      action,
      args
    };
  }
  if (isGoUrlShortener(url)) {
    const action = url.pathname;
    const args = url.searchParams;
    return {
      action,
      args
    };
  }
  return null;
};
let processDeepLinksInArgs = async () => undefined;
const performOnServer = async (url, action) => {
  const [serverUrl, status, error] = await resolveServerUrl(url);
  if (status !== ServerUrlResolutionStatus.OK) {
    var _error$message;
    await warnAboutInvalidServerUrl(serverUrl, (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : '');
    return;
  }
  const isServerAdded = select(({
    servers
  }) => servers.some(server => server.url === serverUrl));
  if (isServerAdded) {
    dispatch({
      type: DEEP_LINKS_SERVER_FOCUSED,
      payload: serverUrl
    });
    await action(serverUrl);
    return;
  }
  const permitted = await askForServerAddition(serverUrl);
  if (!permitted) {
    return;
  }
  dispatch({
    type: DEEP_LINKS_SERVER_ADDED,
    payload: serverUrl
  });
  await action(serverUrl);
};
const getWebContents = serverUrl => new Promise(resolve => {
  const poll = () => {
    const webContents = getWebContentsByServerUrl(serverUrl);
    if (webContents) {
      resolve(webContents);
      return;
    }
    setTimeout(poll, 100);
  };
  poll();
});
const performAuthentication = async ({
  host,
  token,
  userId
}) => performOnServer(host, async serverUrl => {
  const url = new URL('home', serverUrl);
  url.searchParams.append('resumeToken', token);
  url.searchParams.append('userId', userId);
  const webContents = await getWebContents(serverUrl);
  webContents.loadURL(url.href);
});

// https://developer.rocket.chat/rocket.chat/deeplink#channel-group-dm
const performOpenRoom = async ({
  host,
  path,
  token,
  userId
}) => performOnServer(host, async serverUrl => {
  if (!path) {
    return;
  }
  if (!/^\/?(direct|group|channel|livechat)\/[0-9a-zA-Z-_.]+/.test(path)) {
    return;
  }
  const url = new URL(path, serverUrl);
  if (token && userId) {
    url.searchParams.append('resumeToken', token);
    url.searchParams.append('userId', userId);
  }
  const webContents = await getWebContents(serverUrl);
  webContents.loadURL(url.href);
});
const performInvite = async ({
  host,
  path
}) => performOnServer(host, async serverUrl => {
  if (!/^invite\//.test(path)) {
    return;
  }
  const webContents = await getWebContents(serverUrl);
  webContents.loadURL(new URL(path, serverUrl).href);
});
const performConference = async ({
  host,
  path
}) => performOnServer(host, async serverUrl => {
  if (!/^conference\//.test(path)) {
    return;
  }
  const webContents = await getWebContents(serverUrl);
  webContents.loadURL(new URL(path, serverUrl).href);
});
const processDeepLink = async deepLink => {
  const parsedDeepLink = parseDeepLink(deepLink);
  if (!parsedDeepLink) {
    return;
  }
  const {
    action,
    args
  } = parsedDeepLink;
  switch (action) {
    case 'auth':
      {
        var _args$get, _args$get2, _args$get3;
        const host = (_args$get = args.get('host')) !== null && _args$get !== void 0 ? _args$get : undefined;
        const token = (_args$get2 = args.get('token')) !== null && _args$get2 !== void 0 ? _args$get2 : undefined;
        const userId = (_args$get3 = args.get('userId')) !== null && _args$get3 !== void 0 ? _args$get3 : undefined;
        if (host && token && userId) {
          await performAuthentication({
            host,
            token,
            userId
          });
        }
        break;
      }
    case 'room':
      {
        var _args$get4, _args$get5, _args$get6, _args$get7;
        const host = (_args$get4 = args.get('host')) !== null && _args$get4 !== void 0 ? _args$get4 : undefined;
        const path = (_args$get5 = args.get('path')) !== null && _args$get5 !== void 0 ? _args$get5 : undefined;
        const token = (_args$get6 = args.get('token')) !== null && _args$get6 !== void 0 ? _args$get6 : undefined;
        const userId = (_args$get7 = args.get('userId')) !== null && _args$get7 !== void 0 ? _args$get7 : undefined;
        if (host && path) {
          await performOpenRoom({
            host,
            path,
            token,
            userId
          });
        }
        break;
      }
    case 'invite':
      {
        var _args$get8, _args$get9;
        const host = (_args$get8 = args.get('host')) !== null && _args$get8 !== void 0 ? _args$get8 : undefined;
        const path = (_args$get9 = args.get('path')) !== null && _args$get9 !== void 0 ? _args$get9 : undefined;
        if (host && path) {
          await performInvite({
            host,
            path
          });
        }
        break;
      }
    case 'conference':
      {
        var _args$get0, _args$get1;
        const host = (_args$get0 = args.get('host')) !== null && _args$get0 !== void 0 ? _args$get0 : undefined;
        const path = (_args$get1 = args.get('path')) !== null && _args$get1 !== void 0 ? _args$get1 : undefined;
        if (host && path) {
          await performConference({
            host,
            path
          });
        }
        break;
      }
  }
};
const setupDeepLinks = () => {
  electron.app.addListener('open-url', async (event, url) => {
    event.preventDefault();
    const browserWindow = await getRootWindow();
    if (!browserWindow.isVisible()) {
      browserWindow.showInactive();
    }
    browserWindow.focus();
    await processDeepLink(url);
  });
  electron.app.addListener('second-instance', async (event, argv) => {
    event.preventDefault();
    const browserWindow = await getRootWindow();
    if (browserWindow && !browserWindow.isVisible()) {
      browserWindow.showInactive();
    }
    if (browserWindow) browserWindow.focus();
    const args = argv.slice(electron.app.isPackaged ? 1 : 2);
    for (const arg of args) {
      // eslint-disable-next-line no-await-in-loop
      await processDeepLink(arg);
    }
  });
  processDeepLinksInArgs = async () => {
    const args = process.argv.slice(electron.app.isPackaged ? 1 : 2);
    for (const arg of args) {
      // eslint-disable-next-line no-await-in-loop
      await processDeepLink(arg);
    }
  };
};

const startDocumentViewerHandler = () => {
  handle('document-viewer/open-window', async (event, url, _format, _options) => {
    const validUrl = new URL(url);
    const allowedProtocols = ['http:', 'https:'];
    if (!allowedProtocols.includes(validUrl.protocol)) {
      return;
    }
    const server = select(({
      servers
    }) => servers.find(s => new URL(s.url).origin === new URL(event.getURL()).origin));
    if (!server) {
      return;
    }
    dispatch({
      type: SERVER_DOCUMENT_VIEWER_OPEN_URL,
      payload: {
        server: server.url,
        documentUrl: url
      }
    });
  });
  listen(WEBVIEW_PDF_VIEWER_ATTACHED, async action => {
    const webContentsId = action.payload.WebContentsId;
    const webContent = electron.webContents.fromId(webContentsId);
    if (!webContent) {
      return;
    }
    webContent.on('will-navigate', (event, url) => {
      // Only prevent navigation for PDF viewer webviews, not video call windows
      // Check if this is actually a PDF viewer by examining the context
      const currentUrl = webContent.getURL();

      // Skip handling if this is a video call window or not a PDF viewer context
      if (currentUrl.includes('video-call-window.html') || currentUrl.includes('app/video-call-window.html')) {
        return;
      }

      // Also check if the navigation URL is an external protocol (like zoommtg://)
      // that should be handled by the system, not intercepted
      try {
        const navUrl = new URL(url);
        const isExternalProtocol = !['http:', 'https:', 'file:', 'data:', 'about:'].includes(navUrl.protocol);

        // If it's an external protocol, let the system handle it normally
        if (isExternalProtocol) {
          return;
        }
      } catch (e) {
        // If URL parsing fails, let the default handling proceed
        return;
      }
      event.preventDefault();
      setTimeout(() => {
        openExternal(url);
      }, 10);
    });
  });
};

const listenToBugsnagEnabledToggle = async appType => {
  {
    return;
  }
};
const setupRendererErrorHandling = async appType => {
  listenToBugsnagEnabledToggle();
};
const setupMainErrorHandling = async () => setupRendererErrorHandling();

const I18N_LNG_REQUESTED = 'i18n/lng-requested';
const I18N_LNG_RESPONDED = 'i18n/lng-responded';

const fallbackLng = 'en';
const byteUnits = ['byte', 'kilobyte', 'megabyte', 'gigabyte', 'terabyte', 'petabyte'];
const formatBytes = bytes => {
  const order = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), byteUnits.length - 1);
  const unit = byteUnits[order];
  if (!unit) {
    return '???';
  }
  const formatter = new Intl.NumberFormat(undefined, {
    notation: 'compact',
    style: 'unit',
    unit,
    maximumFractionDigits: 1
  });
  return formatter.format(bytes / Math.pow(1024, order));
};
const formatByteSpeed = bytesPerSecond => {
  const order = Math.min(Math.floor(Math.log(bytesPerSecond) / Math.log(1024)), byteUnits.length - 1);
  const unit = byteUnits[order];
  if (!unit) {
    return '???';
  }
  const formatter = new Intl.NumberFormat(undefined, {
    notation: 'compact',
    style: 'unit',
    unit: `${unit}-per-second`,
    maximumFractionDigits: 1
  });
  return formatter.format(bytesPerSecond / Math.pow(1024, order));
};
const formatPercentage = ratio => {
  const formatter = new Intl.NumberFormat(undefined, {
    style: 'percent',
    maximumFractionDigits: 0
  });
  return formatter.format(ratio);
};
const formatDuration = duration => {
  const formatter = new Intl.RelativeTimeFormat(undefined, {
    style: 'narrow',
    numeric: 'always'
  });
  duration /= 1000;
  if (duration / 60 < 1) {
    return formatter.format(duration, 'second');
  }
  duration /= 60;
  if (duration / 60 < 1) {
    return formatter.format(duration, 'minute');
  }
  duration /= 60;
  if (duration / 24 < 1) {
    return formatter.format(duration, 'hour');
  }
  duration /= 24;
  if (duration / 7 < 1) {
    return formatter.format(duration, 'day');
  }
  duration /= 7;
  if (duration / 30 < 1) {
    return formatter.format(duration, 'week');
  }
  duration /= 30;
  if (duration / 12 < 1) {
    return formatter.format(duration, 'month');
  }
  duration /= 12;
  return formatter.format(duration, 'year');
};
const interpolation = {
  format: (value, format, lng) => {
    if (value instanceof Date && !Number.isNaN(value.getTime())) {
      return new Intl.DateTimeFormat(lng).format(value);
    }
    switch (format) {
      case 'byteSize':
        return formatBytes(value);
      case 'byteSpeed':
        return formatByteSpeed(value);
      case 'percentage':
        return formatPercentage(value);
      case 'duration':
        return formatDuration(value);
    }
    return String(value);
  }
};

var resources = {
  'de-DE': () => Promise.resolve().then(function () { return require('./de-DE.i18n-zYeVcvFe.js'); }),
  'en': () => Promise.resolve().then(function () { return require('./en.i18n-jwfYqV9u.js'); }),
  'es': () => Promise.resolve().then(function () { return require('./es.i18n-mvst8T2P.js'); }),
  'fi': () => Promise.resolve().then(function () { return require('./fi.i18n-olN9WWsA.js'); }),
  'fr': () => Promise.resolve().then(function () { return require('./fr.i18n-G8cHMWxa.js'); }),
  'hu': () => Promise.resolve().then(function () { return require('./hu.i18n-P-xRBioD.js'); }),
  'it-IT': () => Promise.resolve().then(function () { return require('./it-IT.i18n-2hFwDdhB.js'); }),
  'ja': () => Promise.resolve().then(function () { return require('./ja.i18n-NBkU_Y_C.js'); }),
  'pl': () => Promise.resolve().then(function () { return require('./pl.i18n-MFa8J0bQ.js'); }),
  'pt-BR': () => Promise.resolve().then(function () { return require('./pt-BR.i18n-X-8Hs69r.js'); }),
  'ru': () => Promise.resolve().then(function () { return require('./ru.i18n-8xMmcVtm.js'); }),
  'tr-TR': () => Promise.resolve().then(function () { return require('./tr-TR.i18n-4A1ULGdv.js'); }),
  'uk-UA': () => Promise.resolve().then(function () { return require('./uk-UA.i18n-R8_DNMRq.js'); }),
  'zh-CN': () => Promise.resolve().then(function () { return require('./zh-CN.i18n-vJV6_qFp.js'); }),
  'zh-TW': () => Promise.resolve().then(function () { return require('./zh-TW.i18n-s3uonwp0.js'); })
};

const hasLng = lng => lng in resources;
const getLng = async () => {
  await electron.app.whenReady();
  const locale = electron.app.getSystemLocale();
  let [languageCode, countryCode] = locale.split(/[-_]/);
  if (!languageCode || languageCode.length !== 2) {
    return fallbackLng;
  }
  languageCode = languageCode.toLowerCase();
  const isCountryCodeInexistentOrNonStandard = !countryCode || countryCode.length !== 2;
  countryCode = isCountryCodeInexistentOrNonStandard ? '' : countryCode.toUpperCase();
  const lng = countryCode ? `${languageCode}-${countryCode}` : languageCode;
  if (hasLng(lng)) {
    return lng;
  }
  return Object.keys(resources).find(language => language.startsWith(languageCode));
};
class I18nService extends Service {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "initialization", void 0);
    _defineProperty(this, "t", i18next__default.default.t.bind(i18next__default.default));
  }
  async initializeAsync() {
    const lng = await getLng();
    this.t = await i18next__default.default.init({
      lng,
      fallbackLng,
      resources: {
        ...(lng && lng in resources && {
          [lng]: {
            translation: await resources[lng]()
          }
        }),
        [fallbackLng]: {
          translation: await resources[fallbackLng]()
        }
      },
      interpolation,
      initImmediate: true
    });
  }
  initialize() {
    this.initialization = this.initializeAsync();
    this.listen(I18N_LNG_REQUESTED, action => {
      var _action$meta;
      if (!hasMeta(action) || !action.meta.id) {
        return;
      }
      dispatch({
        type: I18N_LNG_RESPONDED,
        payload: hasLng(i18next__default.default.language) ? i18next__default.default.language : fallbackLng,
        meta: {
          response: true,
          id: (_action$meta = action.meta) === null || _action$meta === void 0 ? void 0 : _action$meta.id
        }
      });
    });
  }
  wait() {
    var _this$initialization;
    return (_this$initialization = this.initialization) !== null && _this$initialization !== void 0 ? _this$initialization : Promise.reject(new Error('not initialized'));
  }
}
var i18n = new I18nService();

const isJitsiServerAllowed = async rawUrl => {
  const url = new URL(rawUrl);
  const persistedServers = Object.entries(select(({
    allowedJitsiServers
  }) => allowedJitsiServers)).filter(([key]) => key === url.host);
  if (persistedServers.length) {
    return {
      allowed: persistedServers[0][1],
      dontAskAgain: true
    };
  }
  const {
    allowed,
    dontAskAgain
  } = await askForJitsiCaptureScreenPermission(url);
  if (dontAskAgain) {
    dispatch({
      type: JITSI_SERVER_CAPTURE_SCREEN_PERMISSION_UPDATED,
      payload: {
        jitsiServer: url.hostname,
        allowed
      }
    });
  }
  return {
    allowed,
    dontAskAgain
  };
};

let permitted = false;
let dontAskAgain = false;
let firstAskPermission = true;
const handleJitsiDesktopCapturerGetSources = () => {
  handle('jitsi-desktop-capturer-get-sources', async (_webContents, [opts, jitsiDomain]) => {
    if (permitted) return electron.desktopCapturer.getSources(opts);
    if (dontAskAgain) return [];
    if (firstAskPermission) {
      firstAskPermission = false;
      const askResult = await isJitsiServerAllowed(jitsiDomain);
      permitted = askResult.allowed;
      dontAskAgain = askResult.dontAskAgain;
    }
    return [];
  });
};

const resolveIcon = async iconUrl => {
  if (!iconUrl) {
    return undefined;
  }
  if (/^data:/.test(iconUrl)) {
    return electron.nativeImage.createFromDataURL(iconUrl);
  }
  try {
    const {
      webContents
    } = await getRootWindow();
    const dataUri = await invoke(webContents, 'notifications/fetch-icon', iconUrl);
    return electron.nativeImage.createFromDataURL(dataUri);
  } catch (error) {
    console.error(error);
    return undefined;
  }
};
const notifications = new Map();
const createNotification = async (id, {
  title,
  subtitle,
  body,
  icon,
  silent,
  canReply,
  actions
}, ipcMeta) => {
  const notification = new electron.Notification({
    title,
    subtitle,
    body: body !== null && body !== void 0 ? body : '',
    icon: await resolveIcon(icon),
    silent: silent !== null && silent !== void 0 ? silent : undefined,
    hasReply: canReply,
    actions: actions === null || actions === void 0 ? void 0 : actions.map(action => ({
      type: 'button',
      text: action.title
    }))
  });
  notification.addListener('show', () => {
    dispatchSingle({
      type: NOTIFICATIONS_NOTIFICATION_SHOWN,
      payload: {
        id
      },
      ipcMeta
    });
  });
  notification.addListener('close', () => {
    dispatchSingle({
      type: NOTIFICATIONS_NOTIFICATION_CLOSED,
      payload: {
        id
      },
      ipcMeta
    });
    notifications.delete(id);
  });
  notification.addListener('click', () => {
    dispatchSingle({
      type: NOTIFICATIONS_NOTIFICATION_CLICKED,
      payload: {
        id,
        title
      },
      ipcMeta
    });
  });
  notification.addListener('reply', (_event, reply) => {
    dispatchSingle({
      type: NOTIFICATIONS_NOTIFICATION_REPLIED,
      payload: {
        id,
        reply
      },
      ipcMeta
    });
  });
  notification.addListener('action', (_event, index) => {
    dispatchSingle({
      type: NOTIFICATIONS_NOTIFICATION_ACTIONED,
      payload: {
        id,
        index
      },
      ipcMeta
    });
  });
  notifications.set(id, notification);
  notification.show();
  return id;
};
const updateNotification = async (id, {
  title,
  body,
  silent,
  renotify
}) => {
  const notification = notifications.get(id);
  if (title) {
    notification.title = title;
  }
  if (body) {
    notification.body = body;
  }
  if (silent) {
    notification.silent = silent;
  }
  if (renotify) {
    notification.show();
  }
  return id;
};
const handleCreateEvent = async ({
  tag,
  ...options
}, ipcMeta) => {
  if (tag && notifications.has(tag)) {
    return updateNotification(tag, options);
  }
  const id = tag || Math.random().toString(36).slice(2);
  return createNotification(id, options, ipcMeta);
};
const setupNotifications = () => {
  listen(NOTIFICATIONS_CREATE_REQUESTED, async action => {
    if (!hasMeta(action)) {
      return;
    }
    dispatch({
      type: NOTIFICATIONS_CREATE_RESPONDED,
      payload: await handleCreateEvent(action.payload, action.ipcMeta),
      meta: {
        id: action.meta.id,
        response: true
      }
    });
  });
  listen(NOTIFICATIONS_NOTIFICATION_DISMISSED, action => {
    var _notifications$get;
    (_notifications$get = notifications.get(action.payload.id)) === null || _notifications$get === void 0 || _notifications$get.close();
  });
};

/**
 * Checks if a version meets or exceeds a minimum required version
 * Safely handles various version string formats by normalizing with semver.coerce
 *
 * @param version The version to check
 * @param minimumVersion The minimum version required
 * @returns boolean Whether the version meets or exceeds the minimum required version
 */
function meetsMinimumVersion(version, minimumVersion) {
  var _coerce;
  if (!version) return false;

  // Coerce version to a valid semver format and use its normalized form
  const normalizedVersion = ((_coerce = semver$1.coerce(version)) === null || _coerce === void 0 ? void 0 : _coerce.version) || '0.0.0';
  return semver$1.gte(normalizedVersion, minimumVersion);
}

/* eslint-disable new-cap */
const getOutlookEvents = async (credentials, date) => {
  try {
    const {
      login,
      password,
      serverUrl
    } = credentials;
    const xhrApi = new xhr.XhrApi({
      decompress: true
    });
    xhrApi.useNtlmAuthentication(login, password);
    ewsJavascriptApi.ConfigurationApi.ConfigureXHR(xhrApi);
    const exchange = new ewsJavascriptApi.ExchangeService(ewsJavascriptApi.ExchangeVersion.Exchange2013);
    // This credentials object isn't used when ntlm is active, but the lib still requires it.
    exchange.Credentials = new ewsJavascriptApi.WebCredentials(login, password);
    exchange.Url = new ewsJavascriptApi.Uri(`${serverUrl}/ews/exchange.asmx`);
    const validatedDate = new Date(date);
    const folderId = new ewsJavascriptApi.FolderId(ewsJavascriptApi.WellKnownFolderName.Calendar);
    const minTime = new ewsJavascriptApi.DateTime(validatedDate.getFullYear(), validatedDate.getMonth() + 1, validatedDate.getDate());
    const maxTime = new ewsJavascriptApi.DateTime(validatedDate.getFullYear(), validatedDate.getMonth() + 1, validatedDate.getDate(), 23, 59, 59);
    const view = new ewsJavascriptApi.CalendarView(minTime, maxTime);
    let appointments = [];
    try {
      appointments = (await exchange.FindAppointments(folderId, view)).Items;
    } catch (error) {
      console.error(error);
      return Promise.reject(error);
    }
    // Filter out appointments that end exactly at midnight
    const filtered = appointments.filter(appointment => appointment.End > minTime);
    if (filtered.length === 0) {
      return [];
    }
    const propertySet = new ewsJavascriptApi.PropertySet(ewsJavascriptApi.BasePropertySet.FirstClassProperties);
    try {
      await exchange.LoadPropertiesForItems(filtered, propertySet);
    } catch (error) {
      return Promise.reject(error);
    }
    return filtered.map(appointment => {
      var _appointment$IsAllDay, _appointment$IsCancel, _appointment$JoinOnli, _appointment$Reminder;
      let description = '';
      try {
        var _appointment$Body;
        if ((_appointment$Body = appointment.Body) !== null && _appointment$Body !== void 0 && _appointment$Body.Text) {
          description = appointment.Body.Text;
        }
      } catch {
        // Ignore errors when the appointment body is missing.
      }

      // Check if the busy status is Busy
      // LegacyFreeBusyStatus enum: Free = 0, Tentative = 1, Busy = 2, OOF = 3
      const isBusy = appointment.LegacyFreeBusyStatus === ewsJavascriptApi.LegacyFreeBusyStatus.Busy;
      return {
        id: appointment.Id.UniqueId,
        subject: appointment.Subject,
        startTime: appointment.Start.ToISOString(),
        endTime: appointment.End.ToISOString(),
        description,
        isAllDay: (_appointment$IsAllDay = appointment.IsAllDayEvent) !== null && _appointment$IsAllDay !== void 0 ? _appointment$IsAllDay : false,
        isCanceled: (_appointment$IsCancel = appointment.IsCancelled) !== null && _appointment$IsCancel !== void 0 ? _appointment$IsCancel : false,
        meetingUrl: (_appointment$JoinOnli = appointment.JoinOnlineMeetingUrl) !== null && _appointment$JoinOnli !== void 0 ? _appointment$JoinOnli : undefined,
        reminderMinutesBeforeStart: (_appointment$Reminder = appointment.ReminderMinutesBeforeStart) !== null && _appointment$Reminder !== void 0 ? _appointment$Reminder : undefined,
        busy: isBusy
      };
    });
  } catch (error) {
    console.error(error);
    return Promise.reject(error);
  }
};

const getServerInformationByWebContentsId = webContentsId => {
  const {
    servers
  } = select(selectPersistableValues);
  const server = servers.find(server => server.webContentsId === webContentsId);
  return server || {};
};
function checkIfCredentialsAreNotEmpty(credentials) {
  return credentials.login.trim() !== '' && credentials.password.trim() !== '' && credentials.userId.trim() !== '' && credentials.serverUrl.trim() !== '';
}
function encryptedCredentials(credentials) {
  return {
    ...credentials,
    login: electron.safeStorage.encryptString(credentials.login).toString('base64'),
    password: electron.safeStorage.encryptString(credentials.password).toString('base64')
  };
}
function decryptedCredentials(credentials) {
  return {
    ...credentials,
    login: electron.safeStorage.decryptString(Buffer.from(credentials.login, 'base64')).toString(),
    password: electron.safeStorage.decryptString(Buffer.from(credentials.password, 'base64')).toString()
  };
}
async function listEventsFromRocketChatServer(serverUrl, userId, token) {
  try {
    const response = await axios__default.default.get(server(serverUrl).calendarEvents.list, {
      headers: {
        'Content-Type': 'application/json',
        'X-Auth-Token': token,
        'X-User-Id': userId
      },
      params: {
        date: new Date().toISOString()
      }
    });
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error);
  }
}
async function createEventOnRocketChatServer(serverUrl, userId, token, event) {
  try {
    // Get server object to check version
    const {
      servers
    } = select(selectPersistableValues);
    const server$1 = servers.find(server => server.url === serverUrl);

    // Base payload
    const payload = {
      externalId: event.id,
      subject: event.subject,
      startTime: event.startTime,
      description: event.description,
      reminderMinutesBeforeStart: event.reminderMinutesBeforeStart
    };

    // Add endTime and busy only for server version 7.5.0 or higher
    if (server$1 !== null && server$1 !== void 0 && server$1.version && meetsMinimumVersion(server$1.version, '7.5.0')) {
      payload.endTime = event.endTime;
      payload.busy = event.busy;
    }
    await axios__default.default.post(server(serverUrl).calendarEvents.import, payload, {
      headers: {
        'Content-Type': 'application/json',
        'X-Auth-Token': token,
        'X-User-Id': userId
      }
    });
  } catch (error) {
    console.error('Error saving event on server:', error);
  }
}
async function updateEventOnRocketChatServer(serverUrl, userId, token, rocketChatEventId, event) {
  try {
    // Get server object to check version
    const {
      servers
    } = select(selectPersistableValues);
    const server$1 = servers.find(server => server.url === serverUrl);

    // Base payload
    const payload = {
      eventId: rocketChatEventId,
      subject: event.subject,
      startTime: event.startTime,
      description: event.description,
      reminderMinutesBeforeStart: event.reminderMinutesBeforeStart
    };

    // Add endTime and busy only for server version 7.5.0 or higher
    if (server$1 !== null && server$1 !== void 0 && server$1.version && meetsMinimumVersion(server$1.version, '7.5.0')) {
      payload.endTime = event.endTime;
      payload.busy = event.busy;
    }
    await axios__default.default.post(server(serverUrl).calendarEvents.update, payload, {
      headers: {
        'Content-Type': 'application/json',
        'X-Auth-Token': token,
        'X-User-Id': userId
      }
    });
  } catch (error) {
    console.error('Error updating event on server:', error);
  }
}
async function deleteEventOnRocketChatServer(serverUrl, userId, token, rocketChatEventId) {
  try {
    await axios__default.default.post(server(serverUrl).calendarEvents.delete, {
      eventId: rocketChatEventId
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-Auth-Token': token,
        'X-User-Id': userId
      }
    });
  } catch (error) {
    console.error('Error deleting event on server:', error);
  }
}
async function syncEventsWithRocketChatServer(serverUrl, credentials, token) {
  if (!checkIfCredentialsAreNotEmpty(credentials)) return;
  const eventsOnOutlookServer = await getOutlookEvents(credentials, new Date(Date.now()));
  const eventsOnRocketChatServer = await listEventsFromRocketChatServer(serverUrl, credentials.userId, token);
  const appointmentsFound = eventsOnOutlookServer.map(appointment => appointment.id);
  const externalEventsFromRocketChatServer = eventsOnRocketChatServer === null || eventsOnRocketChatServer === void 0 ? void 0 : eventsOnRocketChatServer.data.filter(({
    externalId
  }) => externalId);

  // Get server object to check version
  const {
    servers
  } = select(selectPersistableValues);
  const server = servers.find(server => server.url === serverUrl);
  for await (const appointment of eventsOnOutlookServer) {
    try {
      const alreadyOnRocketChatServer = externalEventsFromRocketChatServer.find(({
        externalId
      }) => externalId === appointment.id);
      const {
        subject,
        startTime,
        description,
        reminderMinutesBeforeStart
      } = appointment;

      // If the appointment is not in the rocket.chat calendar for today, add it.
      if (!alreadyOnRocketChatServer) {
        createEventOnRocketChatServer(serverUrl, credentials.userId, token, appointment);
        continue;
      }

      // If nothing on the event has changed, do nothing.
      if (alreadyOnRocketChatServer.subject === subject && alreadyOnRocketChatServer.startTime === startTime && alreadyOnRocketChatServer.description === description && alreadyOnRocketChatServer.reminderMinutesBeforeStart === reminderMinutesBeforeStart && (!(server !== null && server !== void 0 && server.version) || !meetsMinimumVersion(server.version, '7.5.0') || alreadyOnRocketChatServer.endTime === appointment.endTime && alreadyOnRocketChatServer.busy === appointment.busy)) {
        continue;
      }

      // If the appointment is in the rocket.chat calendar for today, but something has changed, update it.
      await updateEventOnRocketChatServer(serverUrl, credentials.userId, token, alreadyOnRocketChatServer._id, appointment);
    } catch (error) {
      console.error('Error syncing event:', error);
    }
  }
  if (!eventsOnRocketChatServer.data.length) {
    return;
  }
  for await (const event of eventsOnRocketChatServer.data) {
    if (!event.externalId || appointmentsFound.includes(event.externalId)) {
      continue;
    }
    try {
      await deleteEventOnRocketChatServer(serverUrl, credentials.userId, token, event._id);
    } catch (e) {
      console.error(e);
    }
  }
}
let recurringSyncTaskId;
let userAPIToken;
async function maybeSyncEvents(serverToSync) {
  if (!userAPIToken) throw new Error('No user token');
  if (!serverToSync.webContentsId) throw new Error('No webContentsId');
  const server = getServerInformationByWebContentsId(serverToSync.webContentsId);
  if (!server.outlookCredentials) throw new Error('No credentials');
  const credentials = electron.safeStorage.isEncryptionAvailable() ? decryptedCredentials(server.outlookCredentials) : server.outlookCredentials;
  if (!checkIfCredentialsAreNotEmpty(credentials)) throw new Error('Credentials are empty');
  try {
    await syncEventsWithRocketChatServer(server.url, credentials, userAPIToken);
    console.log('Recurring task executed successfully');
  } catch (e) {
    console.error('Error sending events to server', e);
  }
}
async function recurringSyncTask(serverToSync) {
  try {
    console.log('Executing recurring task');
    await maybeSyncEvents(serverToSync);
  } catch (error) {
    console.error('Error occurred:', error);
    clearInterval(recurringSyncTaskId);
  }
}
function startRecurringSyncTask(server) {
  if (!userAPIToken) return;
  recurringSyncTaskId = setInterval(() => recurringSyncTask(server), 60 * 60 * 1000); // minutes * seconds * milliseconds
}
const startOutlookCalendarUrlHandler = () => {
  handle('outlook-calendar/set-user-token', async (event, token, userId) => {
    userAPIToken = token;
    const server = getServerInformationByWebContentsId(event.id);
    if (!server) return;
    const {
      outlookCredentials
    } = server;
    if (!outlookCredentials) return;
    if (outlookCredentials.userId !== userId || !userAPIToken) return;
    if (!checkIfCredentialsAreNotEmpty(outlookCredentials)) return;
    startRecurringSyncTask(server);
    setImmediate(() => {
      try {
        maybeSyncEvents(server);
      } catch (e) {
        console.error('Failed to sync outlook events on startup.', e);
      }
    });
  });
  handle('outlook-calendar/clear-credentials', async event => {
    const server = getServerInformationByWebContentsId(event.id);
    if (!server) return;
    const {
      outlookCredentials
    } = server;
    if (!outlookCredentials) return;
    dispatch({
      type: OUTLOOK_CALENDAR_SAVE_CREDENTIALS,
      payload: {
        url: server.url,
        outlookCredentials: {
          userId: outlookCredentials.userId,
          serverUrl: outlookCredentials.serverUrl,
          login: '',
          password: ''
        }
      }
    });
  });
  handle('outlook-calendar/set-exchange-url', async (event, url, userId) => {
    const server = getServerInformationByWebContentsId(event.id);
    if (!server) return;
    const {
      outlookCredentials
    } = server;
    if ((outlookCredentials === null || outlookCredentials === void 0 ? void 0 : outlookCredentials.userId) !== userId || (outlookCredentials === null || outlookCredentials === void 0 ? void 0 : outlookCredentials.serverUrl) !== url) {
      dispatch({
        type: OUTLOOK_CALENDAR_SAVE_CREDENTIALS,
        payload: {
          url: server.url,
          outlookCredentials: {
            userId,
            serverUrl: url,
            login: '',
            password: ''
          }
        }
      });
    }
  });
  handle('outlook-calendar/has-credentials', async event => {
    const server = getServerInformationByWebContentsId(event.id);
    if (!server) return false;
    const {
      outlookCredentials
    } = server;
    if (!outlookCredentials) return false;
    return checkIfCredentialsAreNotEmpty(outlookCredentials);
  });
  handle('outlook-calendar/get-events', async (event, _date) => {
    const server = getServerInformationByWebContentsId(event.id);
    const {
      outlookCredentials
    } = server;
    if (
    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
    !outlookCredentials || !outlookCredentials.userId || !outlookCredentials.serverUrl) {
      return Promise.reject(new Error('No credentials'));
    }
    let credentials;
    let saveCredentials = false;
    if (!checkIfCredentialsAreNotEmpty(outlookCredentials)) {
      const response = await request({
        type: OUTLOOK_CALENDAR_ASK_CREDENTIALS,
        payload: {
          server,
          userId: outlookCredentials.userId,
          isEncryptionAvailable: electron.safeStorage.isEncryptionAvailable()
        }
      }, OUTLOOK_CALENDAR_SET_CREDENTIALS, OUTLOOK_CALENDAR_DIALOG_DISMISSED);
      if (response.dismissDialog === true) {
        return {
          status: 'canceled'
        };
      }
      if (!checkIfCredentialsAreNotEmpty(response === null || response === void 0 ? void 0 : response.outlookCredentials)) {
        return Promise.reject(new Error('Invalid credentials'));
      }
      credentials = response.outlookCredentials;
      saveCredentials = response.saveCredentials || false;
    } else {
      credentials = electron.safeStorage.isEncryptionAvailable() ? decryptedCredentials(outlookCredentials) : outlookCredentials;
    }
    try {
      await syncEventsWithRocketChatServer(server.url, credentials, userAPIToken);
    } catch (e) {
      console.error('Error syncing events with Rocket.Chat server', e);
      return Promise.reject(e);
    }
    if (saveCredentials) {
      startRecurringSyncTask(server);
      dispatch({
        type: OUTLOOK_CALENDAR_SAVE_CREDENTIALS,
        payload: {
          url: server.url,
          outlookCredentials: electron.safeStorage.isEncryptionAvailable() ? encryptedCredentials(credentials) : credentials
        }
      });
    }
    return {
      status: 'success'
    };
  });
};

const setupScreenSharing = () => {
  listen(WEBVIEW_SCREEN_SHARING_SOURCE_REQUESTED, requestAction => {
    if (!hasMeta(requestAction) || !requestAction.meta.id) {
      return;
    }
    const predicate = action => isResponseTo(requestAction.meta.id, WEBVIEW_SCREEN_SHARING_SOURCE_RESPONDED, SCREEN_SHARING_DIALOG_DISMISSED)(action);
    const unsubscribe = listen(predicate, responseAction => {
      var _requestAction$meta;
      unsubscribe();
      const sourceId = responseAction.type === WEBVIEW_SCREEN_SHARING_SOURCE_RESPONDED ? responseAction.payload : null;
      dispatch({
        type: WEBVIEW_SCREEN_SHARING_SOURCE_RESPONDED,
        payload: sourceId,
        meta: {
          response: true,
          id: (_requestAction$meta = requestAction.meta) === null || _requestAction$meta === void 0 ? void 0 : _requestAction$meta.id
        }
      });
    });
  });
};

const clearWebviewStorageKeepingLoginData = async guestWebContents => {
  if (!guestWebContents) return;
  await guestWebContents.session.clearCache();
  await guestWebContents.session.clearStorageData({
    storages: ['cookies', 'indexdb', 'filesystem', 'shadercache', 'websql', 'serviceworkers', 'cachestorage']
  });
  guestWebContents === null || guestWebContents === void 0 || guestWebContents.reloadIgnoringCache();
};
const clearWebviewStorageDeletingLoginData = async guestWebContents => {
  if (!guestWebContents) return;
  await guestWebContents.session.clearCache();
  await guestWebContents.session.clearStorageData();
  guestWebContents === null || guestWebContents === void 0 || guestWebContents.reloadIgnoringCache();
};
const handleClearCacheDialog = () => {
  listen(CLEAR_CACHE_DIALOG_KEEP_LOGIN_DATA_CLICKED, async action => {
    const guestWebContents = electron.webContents.fromId(action.payload);
    if (!guestWebContents) {
      return;
    }
    await clearWebviewStorageKeepingLoginData(guestWebContents);
  });
  listen(CLEAR_CACHE_DIALOG_DELETE_LOGIN_DATA_CLICKED, async action => {
    const guestWebContents = electron.webContents.fromId(action.payload);
    if (!guestWebContents) {
      return;
    }
    await clearWebviewStorageDeletingLoginData(guestWebContents);
  });
};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

const debug$1 = typeof process === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error('SEMVER', ...args) : () => {};
var debug_1 = debug$1;

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0';
const MAX_LENGTH$1 = 256;
const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */9007199254740991;

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16;

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;
const RELEASE_TYPES = ['major', 'premajor', 'minor', 'preminor', 'patch', 'prepatch', 'prerelease'];
var constants = {
  MAX_LENGTH: MAX_LENGTH$1,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010
};

var re$1 = {exports: {}};

(function (module, exports) {
	const {
	  MAX_SAFE_COMPONENT_LENGTH,
	  MAX_SAFE_BUILD_LENGTH,
	  MAX_LENGTH
	} = constants;
	const debug = debug_1;
	exports = module.exports = {};

	// The actual regexps go on exports.re
	const re = exports.re = [];
	const safeRe = exports.safeRe = [];
	const src = exports.src = [];
	const t = exports.t = {};
	let R = 0;
	const LETTERDASHNUMBER = '[a-zA-Z0-9-]';

	// Replace some greedy regex tokens to prevent regex dos issues. These regex are
	// used internally via the safeRe object since all inputs in this library get
	// normalized first to trim and collapse all extra whitespace. The original
	// regexes are exported for userland consumption and lower level usage. A
	// future breaking change could export the safer regex only with a note that
	// all input should have extra whitespace removed.
	const safeRegexReplacements = [['\\s', 1], ['\\d', MAX_LENGTH], [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]];
	const makeSafeRegex = value => {
	  for (const [token, max] of safeRegexReplacements) {
	    value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
	  }
	  return value;
	};
	const createToken = (name, value, isGlobal) => {
	  const safe = makeSafeRegex(value);
	  const index = R++;
	  debug(name, index, value);
	  t[name] = index;
	  src[index] = value;
	  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
	  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
	};

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
	createToken('NUMERICIDENTIFIERLOOSE', '\\d+');

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);

	// ## Main Version
	// Three dot-separated numeric identifiers.

	createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
	createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
	createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
	createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	createToken('FULLPLAIN', `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
	createToken('FULL', `^${src[t.FULLPLAIN]}$`);

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
	createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);
	createToken('GTLT', '((?:<|>)?=?)');

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
	createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
	createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
	createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
	createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
	createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	createToken('COERCE', `${'(^|[^\\d])' + '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\d])`);
	createToken('COERCERTL', src[t.COERCE], true);

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	createToken('LONETILDE', '(?:~>?)');
	createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
	exports.tildeTrimReplace = '$1~';
	createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
	createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	createToken('LONECARET', '(?:\\^)');
	createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
	exports.caretTrimReplace = '$1^';
	createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
	createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
	createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
	exports.comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
	createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);

	// Star ranges basically just allow anything at all.
	createToken('STAR', '(<|>)?=?\\s*\\*');
	// >=0.0.0 is like a star
	createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
	createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$'); 
} (re$1, re$1.exports));

var reExports = re$1.exports;

// parse out just the options we care about
const looseOption = Object.freeze({
  loose: true
});
const emptyOpts = Object.freeze({});
const parseOptions$1 = options => {
  if (!options) {
    return emptyOpts;
  }
  if (typeof options !== 'object') {
    return looseOption;
  }
  return options;
};
var parseOptions_1 = parseOptions$1;

const numeric = /^[0-9]+$/;
const compareIdentifiers$1 = (a, b) => {
  const anum = numeric.test(a);
  const bnum = numeric.test(b);
  if (anum && bnum) {
    a = +a;
    b = +b;
  }
  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);
var identifiers = {
  compareIdentifiers: compareIdentifiers$1,
  rcompareIdentifiers
};

const debug = debug_1;
const {
  MAX_LENGTH,
  MAX_SAFE_INTEGER
} = constants;
const {
  safeRe: re,
  t: t$3
} = reExports;
const parseOptions = parseOptions_1;
const {
  compareIdentifiers
} = identifiers;
let SemVer$1 = class SemVer {
  constructor(version, options) {
    options = parseOptions(options);
    if (version instanceof SemVer) {
      if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
    }
    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease;
    const m = version.trim().match(options.loose ? re[t$3.LOOSE] : re[t$3.FULL]);
    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`);
    }
    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version');
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version');
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version');
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map(id => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }
  format() {
    this.version = `${this.major}.${this.minor}.${this.patch}`;
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`;
    }
    return this.version;
  }
  toString() {
    return this.version;
  }
  compare(other) {
    debug('SemVer.compare', this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0;
      }
      other = new SemVer(other, this.options);
    }
    if (other.version === this.version) {
      return 0;
    }
    return this.compareMain(other) || this.comparePre(other);
  }
  compareMain(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  }
  comparePre(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    let i = 0;
    do {
      const a = this.prerelease[i];
      const b = other.prerelease[i];
      debug('prerelease compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0;
      } else if (b === undefined) {
        return 1;
      } else if (a === undefined) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i);
  }
  compareBuild(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    let i = 0;
    do {
      const a = this.build[i];
      const b = other.build[i];
      debug('prerelease compare', i, a, b);
      if (a === undefined && b === undefined) {
        return 0;
      } else if (b === undefined) {
        return 1;
      } else if (a === undefined) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i);
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc(release, identifier, identifierBase) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier, identifierBase);
        break;
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier, identifierBase);
        break;
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0;
        this.inc('patch', identifier, identifierBase);
        this.inc('pre', identifier, identifierBase);
        break;
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase);
        }
        this.inc('pre', identifier, identifierBase);
        break;
      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        {
          const base = Number(identifierBase) ? 1 : 0;
          if (!identifier && identifierBase === false) {
            throw new Error('invalid increment argument: identifier is empty');
          }
          if (this.prerelease.length === 0) {
            this.prerelease = [base];
          } else {
            let i = this.prerelease.length;
            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }
            if (i === -1) {
              // didn't increment anything
              if (identifier === this.prerelease.join('.') && identifierBase === false) {
                throw new Error('invalid increment argument: identifier already exists');
              }
              this.prerelease.push(base);
            }
          }
          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            let prerelease = [identifier, base];
            if (identifierBase === false) {
              prerelease = [identifier];
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease;
              }
            } else {
              this.prerelease = prerelease;
            }
          }
          break;
        }
      default:
        throw new Error(`invalid increment argument: ${release}`);
    }
    this.raw = this.format();
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`;
    }
    return this;
  }
};
var semver = SemVer$1;

const SemVer = semver;
const compare$1 = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
var compare_1 = compare$1;

const compare = compare_1;
const gte = (a, b, loose) => compare(a, b, loose) >= 0;
var gte_1 = gte;

var semverGte = /*@__PURE__*/getDefaultExportFromCjs(gte_1);

const publicKey = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvZ/T/RHOr6+yo/iMLUlf
agMiMLFxQR/5Qtc85ykMBvKZqbBGb9zU68VB9n54alrbZG5FdcHkSJXgJIBXF2bk
TGTfBi58JmltZirSWzvXoXnT4ieGNZv+BqnP9zzj9HXOVhVncbRmJPEIJOZfL9AQ
beix3rPgZx3ZepAaoMQnz11dZKDGzkMN75WkTdf324X3DeFgLVmjsYuAcLl/AJMA
uPKSSt0XOQUsfrT7rEqXIrj8rIJcWxIHICMRrwfjw2Qh+3pfIrh7XSzxlW4zCKBN
RpavrrCnpOFRfkC5T9eMKLgyapjufOtbjuzu25N3urBsg6oRFNzsGXWp1C7DwUO2
kwIDAQAB
-----END PUBLIC KEY-----`;
const decodeSupportedVersions = token => jwt__default.default.verify(token, publicKey, {
  algorithms: ['RS256']
});
let builtinSupportedVersions;
const getBuiltinSupportedVersions = async () => {
  if (builtinSupportedVersions) return builtinSupportedVersions;
  try {
    const filePath = node_url.fileURLToPath(new URL('./supportedVersions.jwt', (typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('main.js', document.baseURI).href))));
    const encodedToken = await promises.readFile(filePath, 'utf8');
    builtinSupportedVersions = decodeSupportedVersions(encodedToken);
    return builtinSupportedVersions;
  } catch (e) {
    console.error('Error loading supportedVersions.jwt', e);
    return undefined;
  }
};
const logRequestError = description => error => {
  if (axios__default.default.isAxiosError(error)) {
    if (error.response) {
      console.error(`Couldn't load ${description}: ${error.response.status} ${error.response.data}`);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.error(`Couldn't load ${description}: ${error.message}`);
    }
  } else {
    console.error('Fetching ${description} error:', error);
  }
  return undefined;
};
const getCloudInfo = async (url, uniqueId) => {
  const domain = new URL(url).hostname;
  const response = await axios__default.default.get(supportedVersions({
    domain,
    uniqueId
  }));
  return response.data;
};
const getServerInfo = async url => {
  const response = await axios__default.default.get(server(url).info);
  return response.data;
};
const getUniqueId = async (url, version) => {
  var _coerce;
  const validVersion = ((_coerce = semver$1.coerce((version === null || version === void 0 ? void 0 : version.trim()) || '0.0.0')) === null || _coerce === void 0 ? void 0 : _coerce.version) || '0.0.0';
  const serverUrl = semverGte(validVersion, '7.0.0') ? server(url).uniqueId : server(url).setting('uniqueID');
  try {
    var _response$data;
    const response = await axios__default.default.get(serverUrl);
    const value = (_response$data = response.data) === null || _response$data === void 0 || (_response$data = _response$data.settings) === null || _response$data === void 0 || (_response$data = _response$data[0]) === null || _response$data === void 0 ? void 0 : _response$data.value;
    if (!value) {
      console.warn(`No unique ID found for server ${url}`);
      return null;
    }
    return value;
  } catch (error) {
    console.warn(`Error fetching unique ID for server ${url}:`, error);
    return null;
  }
};
const dispatchVersionUpdated = url => info => {
  dispatch({
    type: WEBVIEW_SERVER_VERSION_UPDATED,
    payload: {
      url,
      version: info.version
    }
  });
  return info;
};
const dispatchUniqueIdUpdated = url => uniqueID => {
  if (uniqueID) {
    dispatch({
      type: WEBVIEW_SERVER_UNIQUE_ID_UPDATED,
      payload: {
        url,
        uniqueID
      }
    });
  }
  return uniqueID;
};
const dispatchSupportedVersionsUpdated = (url, supportedVersions, {
  source
}) => {
  dispatch({
    type: WEBVIEW_SERVER_SUPPORTED_VERSIONS_UPDATED,
    payload: {
      url,
      supportedVersions,
      source
    }
  });
};
const updateSupportedVersionsData = async serverUrl => {
  var _serverInfo$supported;
  const builtinSupportedVersions = await getBuiltinSupportedVersions();
  const server = select(({
    servers
  }) => servers.find(server => server.url === serverUrl));
  if (!server) return;
  const serverInfo = await getServerInfo(server.url).then(dispatchVersionUpdated(server.url)).catch(logRequestError('server info'));
  if (!serverInfo) return;
  const uniqueID = await getUniqueId(server.url, server.version || '').then(dispatchUniqueIdUpdated(server.url)).catch(logRequestError('unique ID'));
  const serverEncoded = (_serverInfo$supported = serverInfo.supportedVersions) === null || _serverInfo$supported === void 0 ? void 0 : _serverInfo$supported.signed;
  if (!serverEncoded) {
    if (!uniqueID) {
      if (!builtinSupportedVersions) return;
      dispatchSupportedVersionsUpdated(server.url, builtinSupportedVersions, {
        source: 'builtin'
      });
      return;
    }
    const cloudInfo = await getCloudInfo(server.url, uniqueID).catch(logRequestError('cloud info'));
    const cloudEncoded = cloudInfo === null || cloudInfo === void 0 ? void 0 : cloudInfo.signed;
    if (!cloudEncoded) return;
    const cloudSupportedVersions = decodeSupportedVersions(cloudEncoded);
    dispatchSupportedVersionsUpdated(server.url, cloudSupportedVersions, {
      source: 'cloud'
    });
    return;
  }
  const serverSupportedVersions = decodeSupportedVersions(serverEncoded);
  if (!builtinSupportedVersions) {
    dispatchSupportedVersionsUpdated(server.url, serverSupportedVersions, {
      source: 'server'
    });
    return;
  }
  const builtinTimetamp = Date.parse(builtinSupportedVersions.timestamp);
  const serverTimestamp = Date.parse(serverSupportedVersions.timestamp);
  if (serverTimestamp > builtinTimetamp) {
    dispatchSupportedVersionsUpdated(server.url, serverSupportedVersions, {
      source: 'server'
    });
    return;
  }
  dispatchSupportedVersionsUpdated(server.url, builtinSupportedVersions, {
    source: 'builtin'
  });
};
function checkSupportedVersionServers() {
  listen(WEBVIEW_READY, async action => {
    updateSupportedVersionsData(action.payload.url);
  });
  listen(SUPPORTED_VERSION_DIALOG_DISMISS, async action => {
    updateSupportedVersionsData(action.payload.url);
  });
  listen(WEBVIEW_SERVER_RELOADED, async action => {
    updateSupportedVersionsData(action.payload.url);
  });
  electron.ipcMain.handle('refresh-supported-versions', async (_event, serverUrl) => {
    updateSupportedVersionsData(serverUrl);
  });
}

const setSpellCheckerLanguages = async languages => {
  await electron.app.whenReady();
  const filteredLanguages = Array.from(languages).filter(language => electron.session.defaultSession.availableSpellCheckerLanguages.includes(language));
  electron.session.defaultSession.setSpellCheckerLanguages(filteredLanguages);
  electron.webContents.getAllWebContents().forEach(webContents => {
    webContents.session.setSpellCheckerLanguages(filteredLanguages);
  });
};
const setupSpellChecking = async () => {
  setSpellCheckerLanguages(new Set(electron.session.defaultSession.getSpellCheckerLanguages()));
  listen(SPELL_CHECKING_TOGGLED, action => {
    const spellCheckerLanguages = new Set(action.payload ? electron.session.defaultSession.getSpellCheckerLanguages() : []);
    setSpellCheckerLanguages(spellCheckerLanguages);
  });
  listen(SPELL_CHECKING_LANGUAGE_TOGGLED, action => {
    const spellCheckerLanguages = new Set(electron.session.defaultSession.getSpellCheckerLanguages());
    if (action.payload.enabled) {
      spellCheckerLanguages.add(action.payload.name);
    } else {
      spellCheckerLanguages.delete(action.payload.name);
    }
    setSpellCheckerLanguages(spellCheckerLanguages);
  });
};

const handleCertificatesManager = () => {
  handle('certificatesManager/remove', async (_webContent, domain) => {
    const trustedCertificates = select(({
      trustedCertificates
    }) => trustedCertificates);
    const notTrustedCertificates = select(({
      notTrustedCertificates
    }) => notTrustedCertificates);
    if (trustedCertificates.hasOwnProperty(domain)) {
      delete trustedCertificates[domain];
      dispatch({
        type: TRUSTED_CERTIFICATES_UPDATED,
        payload: {
          ...trustedCertificates
        }
      });
    }
    if (notTrustedCertificates.hasOwnProperty(domain)) {
      delete notTrustedCertificates[domain];
      dispatch({
        type: NOT_TRUSTED_CERTIFICATES_UPDATED,
        payload: {
          ...notTrustedCertificates
        }
      });
    }
  });
};

class DockService extends Service {
  initialize() {
    if (process.platform !== 'darwin') {
      return;
    }
    this.watch(selectGlobalBadgeText, globalBadgeText => {
      var _app$dock;
      (_app$dock = electron.app.dock) === null || _app$dock === void 0 || _app$dock.setBadge(globalBadgeText);
    });
    this.watch(selectGlobalBadgeCount, (globalBadgeCount, prevGlobalBadgeCount) => {
      const {
        isFlashFrameEnabled
      } = select(({
        isFlashFrameEnabled
      }) => ({
        isFlashFrameEnabled
      }));
      if (globalBadgeCount <= 0 || (prevGlobalBadgeCount !== null && prevGlobalBadgeCount !== void 0 ? prevGlobalBadgeCount : 0) > 0) {
        return;
      }
      if (isFlashFrameEnabled) {
        var _app$dock2;
        (_app$dock2 = electron.app.dock) === null || _app$dock2 === void 0 || _app$dock2.bounce();
      }
    });
  }
}
var dock = new DockService();

const DESKTOP_CAPTURER_CACHE_TTL = 3000;
const SOURCE_VALIDATION_CACHE_TTL = 30000;
const CACHE_CLEANUP_DELAY = 60000;
const DESTRUCTION_CHECK_INTERVAL = 50;
const DEVTOOLS_TIMEOUT = 2000;
const WEBVIEW_CHECK_INTERVAL = 100;
let videoCallWindow = null;
let isVideoCallWindowDestroying = false;
let pendingVideoCallUrl = null;

// Helper function to log URL changes
const setPendingVideoCallUrl = (url, reason) => {
  const previous = pendingVideoCallUrl;
  pendingVideoCallUrl = url;
  console.log(`Video call window: pendingVideoCallUrl updated - ${reason}`, {
    previous,
    new: url,
    timestamp: new Date().toISOString()
  });
};
let desktopCapturerCache = null;
let desktopCapturerPromise = null;
const sourceValidationCache = new Set();
let sourceValidationCacheTimestamp = 0;
let cacheCleanupTimer = null;
let videoCallWindowCreationCount = 0;
let videoCallWindowDestructionCount = 0;
const logVideoCallWindowStats = () => {
  console.log('Video call window stats:', {
    created: videoCallWindowCreationCount,
    destroyed: videoCallWindowDestructionCount,
    currentInstance: videoCallWindow ? 'active' : 'none',
    cacheStatus: desktopCapturerCache ? 'cached' : 'empty',
    promiseStatus: desktopCapturerPromise ? 'pending' : 'none',
    cleanupTimer: cacheCleanupTimer ? 'active' : 'none'
  });
};
const handleDesktopCapturerGetSources = () => {
  handle('desktop-capturer-get-sources', async (_webContents, opts) => {
    try {
      const options = Array.isArray(opts) ? opts[0] : opts;
      if (desktopCapturerCache && Date.now() - desktopCapturerCache.timestamp < DESKTOP_CAPTURER_CACHE_TTL) {
        return desktopCapturerCache.sources;
      }
      if (desktopCapturerPromise) {
        return await desktopCapturerPromise;
      }
      desktopCapturerPromise = (async () => {
        try {
          const sources = await electron.desktopCapturer.getSources(options);
          const validSources = sources.filter(source => {
            if (!source.name || source.name.trim() === '') {
              return false;
            }
            const now = Date.now();
            const cacheExpired = now - sourceValidationCacheTimestamp > SOURCE_VALIDATION_CACHE_TTL;
            if (!cacheExpired && sourceValidationCache.has(source.id)) {
              return true;
            }
            if (source.thumbnail.isEmpty()) {
              return false;
            }
            if (cacheExpired) {
              sourceValidationCache.clear();
              sourceValidationCacheTimestamp = now;
            }
            sourceValidationCache.add(source.id);
            return true;
          });
          desktopCapturerCache = {
            sources: validSources,
            timestamp: Date.now()
          };
          return validSources;
        } catch (error) {
          console.error('Error getting desktop capturer sources:', error);
          desktopCapturerCache = null;
          return [];
        } finally {
          desktopCapturerPromise = null;
        }
      })();
      return await desktopCapturerPromise;
    } catch (error) {
      console.error('Error in desktop capturer handler:', error);
      desktopCapturerCache = null;
      desktopCapturerPromise = null;
      return [];
    }
  });
};
const fetchVideoCallWindowState = async browserWindow => {
  return {
    focused: browserWindow.isFocused(),
    visible: browserWindow.isVisible(),
    maximized: false,
    minimized: false,
    fullscreen: false,
    normal: true,
    bounds: browserWindow.getNormalBounds()
  };
};
const cleanupVideoCallWindow = () => {
  if (videoCallWindow && !videoCallWindow.isDestroyed() && !isVideoCallWindowDestroying) {
    console.log('Cleaning up video call window resources');
    isVideoCallWindowDestroying = true;
    try {
      // Set permission handler with additional safety
      if (videoCallWindow.webContents && !videoCallWindow.webContents.isDestroyed()) {
        videoCallWindow.webContents.session.setPermissionRequestHandler(() => false);
        videoCallWindow.webContents.executeJavaScript('void 0').catch(() => {
          // Ignore errors during cleanup
        });
      }
      try {
        const allWebContents = electron.webContents.getAllWebContents();
        const webviewContents = allWebContents.find(wc => {
          var _videoCallWindow;
          return wc.hostWebContents === ((_videoCallWindow = videoCallWindow) === null || _videoCallWindow === void 0 ? void 0 : _videoCallWindow.webContents);
        });
        if (webviewContents && !webviewContents.isDestroyed()) {
          console.log('Stopping webview JavaScript execution before window cleanup');
          webviewContents.session.setPermissionRequestHandler(() => false);
          webviewContents.loadURL('about:blank').catch(() => {});
        }
      } catch (error) {
        console.log('Could not clean webview contents, continuing with window cleanup');
      }
      if (cacheCleanupTimer) {
        clearTimeout(cacheCleanupTimer);
        cacheCleanupTimer = null;
      }
      videoCallWindow.removeAllListeners();

      // Use setImmediate to ensure this happens after current event loop
      // This prevents timing issues during app initialization
      setImmediate(() => {
        if (videoCallWindow && !videoCallWindow.isDestroyed()) {
          videoCallWindow.close();
        }
      });
    } catch (error) {
      console.error('Error during video call window cleanup:', error);
      if (videoCallWindow && !videoCallWindow.isDestroyed()) {
        try {
          videoCallWindow.removeAllListeners();
          setImmediate(() => {
            if (videoCallWindow && !videoCallWindow.isDestroyed()) {
              videoCallWindow.close();
            }
          });
        } catch (fallbackError) {
          console.error('Error in fallback cleanup:', fallbackError);
        }
      }
    }
  }

  // Use setTimeout to ensure this cleanup happens after any window events are processed
  setTimeout(() => {
    videoCallWindow = null;
    isVideoCallWindowDestroying = false;
    videoCallWindowDestructionCount++;
    console.log('Video call window cleanup completed');
    logVideoCallWindowStats();
  }, 10);
};
const setupWebviewHandlers = webContents => {
  const handleDidAttachWebview = (_event, webviewWebContents) => {
    webviewWebContents.session.setDisplayMediaRequestHandler((_request, cb) => {
      if (videoCallWindow && !videoCallWindow.isDestroyed()) {
        videoCallWindow.webContents.send('video-call-window/open-screen-picker');
        electron.ipcMain.once('video-call-window/screen-sharing-source-responded', async (_event, sourceId) => {
          if (!sourceId) {
            cb({
              video: false
            });
            return;
          }
          try {
            const sources = await electron.desktopCapturer.getSources({
              types: ['window', 'screen']
            });
            const selectedSource = sources.find(s => s.id === sourceId);
            if (!selectedSource) {
              console.warn('Selected screen sharing source no longer available:', sourceId);
              cb({
                video: false
              });
              return;
            }
            cb({
              video: selectedSource
            });
          } catch (error) {
            console.error('Error validating screen sharing source:', error);
            cb({
              video: false
            });
          }
        });
      }
    });
  };
  webContents.removeAllListeners('did-attach-webview');
  webContents.on('did-attach-webview', handleDidAttachWebview);
};
const startVideoCallWindowHandler = () => {
  handle('video-call-window/screen-recording-is-permission-granted', async () => {
    if (process__default.default.platform === 'darwin') {
      const permission = electron.systemPreferences.getMediaAccessStatus('screen');
      return permission === 'granted';
    }
    return true;
  });
  handle('video-call-window/open-screen-picker', async _webContents => {
    // This is handled by the renderer process (screenSharePicker.tsx)
    // The handler exists to satisfy the IPC call from preload script
  });
  handle('video-call-window/open-window', async (_webContents, url) => {
    console.log('Video call window: Open-window handler called with URL:', url);
    if (isVideoCallWindowDestroying) {
      console.log('Waiting for video call window destruction to complete...');
      await new Promise(resolve => {
        const checkDestructionComplete = () => {
          if (!isVideoCallWindowDestroying) {
            resolve();
          } else {
            setTimeout(checkDestructionComplete, DESTRUCTION_CHECK_INTERVAL);
          }
        };
        checkDestructionComplete();
      });
    }
    if (videoCallWindow && !videoCallWindow.isDestroyed()) {
      console.log('Closing existing video call window to create fresh one');
      videoCallWindow.close();
      videoCallWindow = null;
      if (isVideoCallWindowDestroying) {
        await new Promise(resolve => {
          const checkClosed = () => {
            if (!isVideoCallWindowDestroying) {
              resolve();
            } else {
              setTimeout(checkClosed, DESTRUCTION_CHECK_INTERVAL);
            }
          };
          checkClosed();
        });
      }
    }
    const validUrl = new URL(url);
    const allowedProtocols = ['http:', 'https:'];
    console.log('Video call window: URL validation - hostname:', validUrl.hostname, 'protocol:', validUrl.protocol);
    if (validUrl.hostname.match(/(\.)?g\.co$/)) {
      console.log('Video call window: Google URL detected, opening externally instead of internal window');
      openExternal(validUrl.toString());
      return;
    }
    if (allowedProtocols.includes(validUrl.protocol)) {
      const mainWindow = await getRootWindow();
      const winBounds = await mainWindow.getNormalBounds();
      const centeredWindowPosition = {
        x: winBounds.x + winBounds.width / 2,
        y: winBounds.y + winBounds.height / 2
      };
      const actualScreen = electron.screen.getDisplayNearestPoint({
        x: centeredWindowPosition.x,
        y: centeredWindowPosition.y
      });
      const state = select(state => ({
        videoCallWindowState: state.videoCallWindowState,
        isVideoCallWindowPersistenceEnabled: state.isVideoCallWindowPersistenceEnabled
      }));
      let {
        x,
        y,
        width,
        height
      } = state.videoCallWindowState.bounds;
      if (!state.isVideoCallWindowPersistenceEnabled || !x || !y || width === 0 || height === 0 || !isInsideSomeScreen({
        x,
        y,
        width,
        height
      })) {
        width = Math.round(actualScreen.workAreaSize.width * 0.8);
        height = Math.round(actualScreen.workAreaSize.height * 0.8);
        x = Math.round((actualScreen.workArea.width - width) / 2 + actualScreen.workArea.x);
        y = Math.round((actualScreen.workArea.height - height) / 2 + actualScreen.workArea.y);
      }
      console.log('Creating new video call window');
      videoCallWindowCreationCount++;
      if (cacheCleanupTimer) {
        clearTimeout(cacheCleanupTimer);
        cacheCleanupTimer = null;
        console.log('Cancelled cache cleanup - creating new window, cache preserved for better performance');
      }
      logVideoCallWindowStats();
      videoCallWindow = new electron.BrowserWindow({
        width,
        height,
        x,
        y,
        webPreferences: {
          nodeIntegration: true,
          nodeIntegrationInSubFrames: true,
          contextIsolation: false,
          webviewTag: true,
          experimentalFeatures: false,
          offscreen: false,
          disableHtmlFullscreenWindowResize: true,
          backgroundThrottling: true,
          v8CacheOptions: 'bypassHeatCheck',
          spellcheck: false
        },
        show: false,
        frame: true,
        transparent: false,
        skipTaskbar: false
      });
      videoCallWindow.webContents.on('will-navigate', (event, url) => {
        if (url.toLowerCase().startsWith('smb://')) {
          event.preventDefault();
        }
      });
      videoCallWindow.webContents.setWindowOpenHandler(({
        url
      }) => {
        if (url.toLowerCase().startsWith('smb://')) {
          return {
            action: 'deny'
          };
        }
        return {
          action: 'allow'
        };
      });
      if (state.isVideoCallWindowPersistenceEnabled) {
        const fetchAndDispatchWindowState = debounce(async () => {
          if (videoCallWindow && !videoCallWindow.isDestroyed()) {
            dispatchLocal({
              type: VIDEO_CALL_WINDOW_STATE_CHANGED,
              payload: await fetchVideoCallWindowState(videoCallWindow)
            });
          }
        }, 1000);
        videoCallWindow.addListener('show', fetchAndDispatchWindowState);
        videoCallWindow.addListener('hide', fetchAndDispatchWindowState);
        videoCallWindow.addListener('focus', fetchAndDispatchWindowState);
        videoCallWindow.addListener('blur', fetchAndDispatchWindowState);
        videoCallWindow.addListener('maximize', fetchAndDispatchWindowState);
        videoCallWindow.addListener('unmaximize', fetchAndDispatchWindowState);
        videoCallWindow.addListener('minimize', fetchAndDispatchWindowState);
        videoCallWindow.addListener('restore', fetchAndDispatchWindowState);
        videoCallWindow.addListener('resize', fetchAndDispatchWindowState);
        videoCallWindow.addListener('move', fetchAndDispatchWindowState);
      }
      videoCallWindow.on('closed', () => {
        console.log('Video call window closed - destroying completely');

        // Use setTimeout to ensure cleanup happens after any potential app lifecycle events
        // This prevents crashes during first launch when timing is critical
        setTimeout(() => {
          try {
            videoCallWindow = null;
            isVideoCallWindowDestroying = false;
            videoCallWindowDestructionCount++;
            cacheCleanupTimer = setTimeout(() => {
              console.log('Clearing desktop capturer cache after window idle period');
              desktopCapturerCache = null;
              desktopCapturerPromise = null;
              sourceValidationCache.clear();
              sourceValidationCacheTimestamp = 0;
              cacheCleanupTimer = null;
              console.log('Desktop capturer cache cleared due to inactivity');
            }, CACHE_CLEANUP_DELAY);
            console.log(`Desktop capturer cache will be cleared in ${CACHE_CLEANUP_DELAY / 1000} seconds if no new video call window is opened`);
            logVideoCallWindowStats();
          } catch (error) {
            console.error('Error during video call window closed event handling:', error);
          }
        }, 50); // Small delay to let app state stabilize
      });
      videoCallWindow.on('close', _event => {
        if (!isVideoCallWindowDestroying) {
          isVideoCallWindowDestroying = true;
          console.log('Video call window close initiated - preventing JS execution');
          try {
            if (videoCallWindow && !videoCallWindow.isDestroyed()) {
              videoCallWindow.webContents.session.setPermissionRequestHandler(() => false);
              videoCallWindow.webContents.executeJavaScript('void 0').catch(() => {});
            }
          } catch (error) {
            console.log('Error during close preparation:', error);
          }
        }
      });
      videoCallWindow.webContents.on('did-fail-load', (_event, errorCode, errorDescription, validatedURL, isMainFrame) => {
        console.error('Video call window failed to load:', {
          errorCode,
          errorDescription,
          validatedURL,
          isMainFrame
        });
        if (isMainFrame) {
          console.error('Main frame failed to load, this may indicate issues on low-power devices');
        }
      });
      videoCallWindow.webContents.on('dom-ready', () => {
        var _videoCallWindow2;
        {
          console.log('Video call window DOM ready');
        }
        (_videoCallWindow2 = videoCallWindow) === null || _videoCallWindow2 === void 0 || _videoCallWindow2.webContents.executeJavaScript(`
          if (typeof process !== 'undefined' && process.env && "development" === 'development') {
            console.log('Video call window: JavaScript execution test successful');
          }
          window.videoCallWindowJSWorking = true;
          setTimeout(() => {
            const rootElement = document.getElementById('root');
            const hasReactContent = rootElement && (
              rootElement.hasChildNodes() || 
              rootElement.innerHTML.trim() !== ''
            );
            
            if (!hasReactContent) {
              console.warn('Video call window: React may not have rendered - possible initialization issue');
            } else if (typeof process !== 'undefined' && process.env && "development" === 'development') {
              console.log('Video call window: React content detected successfully');
            }
          }, 5000);
        `).catch(error => {
          console.error('Video call window: JavaScript execution test failed:', error);
        });
      });
      videoCallWindow.webContents.on('console-message', (_event, level, message, line, sourceId) => {
        const logPrefix = 'Video call window console:';
        switch (level) {
          case 0:
            console.log(`${logPrefix} [INFO]`, message, `(${sourceId}:${line})`);
            break;
          case 1:
            console.warn(`${logPrefix} [WARN]`, message, `(${sourceId}:${line})`);
            break;
          case 2:
            console.error(`${logPrefix} [ERROR]`, message, `(${sourceId}:${line})`);
            break;
          default:
            console.log(`${logPrefix} [${level}]`, message, `(${sourceId}:${line})`);
        }
      });
      const htmlPath = path__default.default.join(electron.app.getAppPath(), 'app/video-call-window.html');
      console.log('Video call window: Loading HTML file from:', htmlPath);
      videoCallWindow.loadFile(htmlPath).catch(error => {
        console.error('Video call window: Failed to load HTML file:', error);
        console.error('This may indicate build issues or file system problems on low-power devices');
      });
      videoCallWindow.once('ready-to-show', () => {
        if (videoCallWindow && !videoCallWindow.isDestroyed()) {
          videoCallWindow.setTitle(packageJsonInformation.productName);
          console.log('Video call window: Window ready, waiting for renderer to signal ready state');
          console.log('Video call window: Current pending URL:', pendingVideoCallUrl);
          videoCallWindow.show();
        }
      });
      const {
        webContents
      } = videoCallWindow;
      setupWebviewHandlers(webContents);

      // Set the pending URL after window is created to prevent race condition with cleanup
      setPendingVideoCallUrl(url, 'open-window-after-creation');
      console.log('Video call window: Set pending URL after window creation:', url);
      webContents.setWindowOpenHandler(({
        url
      }) => {
        console.log('Video call window - new window requested:', url);
        if (url.toLowerCase().startsWith('smb://')) {
          return {
            action: 'deny'
          };
        }
        if (url.startsWith('http://') || url.startsWith('https://')) {
          openExternal(url);
          return {
            action: 'deny'
          };
        }
        return {
          action: 'allow'
        };
      });
      webContents.on('will-navigate', (event, url) => {
        console.log('Video call window will-navigate:', url);

        // Check for close pages and handle them specially to prevent crashes
        if (url.includes('/close.html') || url.includes('/close2.html')) {
          console.log('Video call window: Navigation to close page detected, will handle gracefully');
          // Don't prevent navigation, but note it for safer handling
        }
        try {
          const parsedUrl = new URL(url);
          if (!['http:', 'https:', 'file:', 'data:', 'about:'].includes(parsedUrl.protocol)) {
            console.log('External protocol detected in video call window:', parsedUrl.protocol);
            event.preventDefault();
            isProtocolAllowed(url).then(allowed => {
              if (allowed) {
                openExternal(url);
              }
            });
          }
        } catch (e) {
          console.warn('Failed to parse URL in video call window:', url, e);
        }
      });
      webContents.session.setPermissionRequestHandler(async (_webContents, permission, callback, details) => {
        console.log('Video call window permission request', permission, details);
        switch (permission) {
          case 'media':
            {
              const {
                mediaTypes = []
              } = details;
              if (process__default.default.platform === 'darwin') {
                const allowed = (!mediaTypes.includes('audio') || (await electron.systemPreferences.askForMediaAccess('microphone'))) && (!mediaTypes.includes('video') || (await electron.systemPreferences.askForMediaAccess('camera')));
                callback(allowed);
                break;
              }
              if (process__default.default.platform === 'win32') {
                let microphoneAllowed = true;
                let cameraAllowed = true;
                if (mediaTypes.includes('audio')) {
                  const micStatus = electron.systemPreferences.getMediaAccessStatus('microphone');
                  microphoneAllowed = micStatus === 'granted';
                }
                if (mediaTypes.includes('video')) {
                  const camStatus = electron.systemPreferences.getMediaAccessStatus('camera');
                  cameraAllowed = camStatus === 'granted';
                }
                const allowed = microphoneAllowed && cameraAllowed;
                if (!allowed) {
                  console.log('Media permissions denied by system:', {
                    microphone: microphoneAllowed,
                    camera: cameraAllowed,
                    requestedTypes: mediaTypes
                  });
                  let permissionType;
                  if (mediaTypes.includes('audio') && mediaTypes.includes('video')) {
                    permissionType = 'both';
                  } else if (mediaTypes.includes('audio')) {
                    permissionType = 'microphone';
                  } else {
                    permissionType = 'camera';
                  }
                  if (videoCallWindow && !videoCallWindow.isDestroyed()) {
                    askForMediaPermissionSettings(permissionType, videoCallWindow).then(openSettings => {
                      if (openSettings) {
                        electron.shell.openExternal('ms-settings:privacy-microphone');
                      }
                    });
                  }
                }
                callback(allowed);
                break;
              }
              callback(true);
              break;
            }
          case 'geolocation':
          case 'notifications':
          case 'midiSysex':
          case 'pointerLock':
          case 'fullscreen':
          case 'screen-wake-lock':
          case 'system-wake-lock':
            callback(true);
            return;
          case 'openExternal':
            {
              callback(true);
              return;
            }
          default:
            callback(false);
        }
      });
    }
  });
  handle('video-call-window/close-requested', async () => {
    console.log('Video call window: Close requested via navigation to close page');

    // Add safety check and delay to prevent crashes during first launch
    if (videoCallWindow && !videoCallWindow.isDestroyed()) {
      // Use setImmediate to ensure this happens after any pending navigation events
      setImmediate(() => {
        try {
          if (videoCallWindow && !videoCallWindow.isDestroyed() && !isVideoCallWindowDestroying) {
            console.log('Video call window: Proceeding with close after navigation delay');
            videoCallWindow.close();
          } else {
            console.log('Video call window: Already destroyed or being destroyed, skipping close');
          }
        } catch (error) {
          console.error('Error closing video call window after close page navigation:', error);
        }
      });
      return {
        success: true
      };
    }
    console.log('Video call window: Already destroyed, cannot close');
    return {
      success: false
    };
  });
  handle('video-call-window/open-webview-dev-tools', async () => {
    if (!videoCallWindow || videoCallWindow.isDestroyed()) {
      console.warn('Video call window not available for dev tools');
      return false;
    }
    try {
      const webviewWebContents = await new Promise(resolve => {
        const checkForWebview = () => {
          const allWebContents = electron.webContents.getAllWebContents();
          const webviewContents = allWebContents.find(wc => {
            var _videoCallWindow3;
            return wc.hostWebContents === ((_videoCallWindow3 = videoCallWindow) === null || _videoCallWindow3 === void 0 ? void 0 : _videoCallWindow3.webContents);
          });
          if (webviewContents) {
            resolve(webviewContents);
          } else {
            setTimeout(checkForWebview, WEBVIEW_CHECK_INTERVAL);
          }
        };
        checkForWebview();
        setTimeout(() => resolve(null), DEVTOOLS_TIMEOUT);
      });
      if (webviewWebContents && !webviewWebContents.isDestroyed()) {
        console.log('Opening developer tools for video call webview');
        webviewWebContents.openDevTools();
        return true;
      }
      console.warn('Video call webview webContents not found or destroyed');
      return false;
    } catch (error) {
      console.error('Error opening webview developer tools:', error);
      return false;
    }
  });
};
const openVideoCallWebviewDevTools = async () => {
  if (!videoCallWindow || videoCallWindow.isDestroyed()) {
    console.warn('Video call window not available for dev tools');
    return false;
  }
  try {
    const webviewWebContents = await new Promise(resolve => {
      const checkForWebview = () => {
        const allWebContents = electron.webContents.getAllWebContents();
        const webviewContents = allWebContents.find(wc => {
          var _videoCallWindow4;
          return wc.hostWebContents === ((_videoCallWindow4 = videoCallWindow) === null || _videoCallWindow4 === void 0 ? void 0 : _videoCallWindow4.webContents);
        });
        if (webviewContents) {
          resolve(webviewContents);
        } else {
          setTimeout(checkForWebview, WEBVIEW_CHECK_INTERVAL);
        }
      };
      checkForWebview();
      setTimeout(() => resolve(null), DEVTOOLS_TIMEOUT);
    });
    if (webviewWebContents && !webviewWebContents.isDestroyed()) {
      console.log('Opening developer tools for video call webview');
      webviewWebContents.openDevTools();
      return true;
    }
    console.warn('Video call webview webContents not found or destroyed');
    return false;
  } catch (error) {
    console.error('Error opening webview developer tools:', error);
    return false;
  }
};
const cleanupVideoCallResources = () => {
  console.log('Cleaning up all video call resources');
  if (cacheCleanupTimer) {
    clearTimeout(cacheCleanupTimer);
    cacheCleanupTimer = null;
    console.log('Cancelled pending cache cleanup timer');
  }
  desktopCapturerCache = null;
  desktopCapturerPromise = null;
  sourceValidationCache.clear();
  sourceValidationCacheTimestamp = 0;
  isVideoCallWindowDestroying = false;
  cleanupVideoCallWindow();
};
handle('video-call-window/test-ipc', async () => {
  console.log('Video call window: IPC test request received');
  return {
    success: true,
    timestamp: Date.now()
  };
});
handle('video-call-window/handshake', async () => {
  console.log('Video call window: Handshake request received');
  return {
    success: true,
    timestamp: Date.now()
  };
});
handle('video-call-window/renderer-ready', async () => {
  console.log('Video call window: Renderer signals ready state');
  if (!videoCallWindow || videoCallWindow.isDestroyed()) {
    console.error('Video call window: Window not available when renderer ready');
    throw new Error('Video call window not available');
  }
  console.log('Video call window: Renderer is ready to request URL');
  return {
    success: true
  };
});
handle('video-call-window/request-url', async () => {
  console.log('Video call window: Renderer requesting pending URL');
  if (!videoCallWindow || videoCallWindow.isDestroyed()) {
    console.error('Video call window: Window not available when requesting URL');
    return {
      success: false,
      url: null,
      autoOpenDevtools: false
    };
  }
  if (!pendingVideoCallUrl) {
    console.error('Video call window: No pending URL available');
    return {
      success: false,
      url: null,
      autoOpenDevtools: false
    };
  }
  const state = select(state => ({
    isAutoOpenEnabled: state.isVideoCallDevtoolsAutoOpenEnabled
  }));
  console.log('Video call window: Providing URL to renderer:', pendingVideoCallUrl);
  return {
    success: true,
    url: pendingVideoCallUrl,
    autoOpenDevtools: state.isAutoOpenEnabled
  };
});
handle('video-call-window/url-received', async () => {
  console.log('Video call window: URL received confirmation from renderer');
  return {
    success: true
  };
});
handle('video-call-window/webview-created', async () => {
  console.log('Video call window: Webview created confirmation');
  return {
    success: true
  };
});
handle('video-call-window/webview-loading', async () => {
  console.log('Video call window: Webview started loading');
  return {
    success: true
  };
});
handle('video-call-window/webview-ready', async () => {
  console.log('Video call window: Webview finished loading');
  return {
    success: true
  };
});
handle('video-call-window/webview-failed', async (_webContents, error) => {
  console.error('Video call window: Webview failed to load:', error);
  return {
    success: true
  };
});

const t$2 = i18next__default.default.t.bind(i18next__default.default);
const on = (condition, getMenuItems) => condition ? getMenuItems() : [];
const selectAddServersDeps = reselect.createStructuredSelector({
  isAddNewServersEnabled: ({
    isAddNewServersEnabled
  }) => isAddNewServersEnabled
});
const createAppMenu = reselect.createSelector(selectAddServersDeps, ({
  isAddNewServersEnabled
}) => ({
  id: 'appMenu',
  label: process.platform === 'darwin' ? electron.app.name : t$2('menus.fileMenu'),
  submenu: [...on(process.platform === 'darwin', () => [{
    id: 'about',
    label: t$2('menus.about', {
      appName: electron.app.name
    }),
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_ABOUT_CLICKED
      });
    }
  }, {
    type: 'separator'
  }, {
    id: 'services',
    label: t$2('menus.services'),
    role: 'services'
  }, {
    type: 'separator'
  }, {
    id: 'hide',
    label: t$2('menus.hide', {
      appName: electron.app.name
    }),
    role: 'hide'
  }, {
    id: 'hideOthers',
    label: t$2('menus.hideOthers'),
    role: 'hideOthers'
  }, {
    id: 'unhide',
    label: t$2('menus.unhide'),
    role: 'unhide'
  }, {
    type: 'separator'
  }]), ...on(process.platform !== 'darwin' && isAddNewServersEnabled, () => [{
    id: 'addNewServer',
    label: t$2('menus.addNewServer'),
    accelerator: 'CommandOrControl+N',
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_ADD_NEW_SERVER_CLICKED
      });
    }
  }, {
    type: 'separator'
  }]), {
    id: 'disableGpu',
    label: t$2('menus.disableGpu'),
    enabled: !electron.app.commandLine.hasSwitch('disable-gpu'),
    click: () => {
      relaunchApp('--disable-gpu');
    }
  }, {
    type: 'separator'
  }, {
    id: 'quit',
    label: t$2('menus.quit', {
      appName: electron.app.name
    }),
    accelerator: 'CommandOrControl+Q',
    click: () => {
      electron.app.quit();
    }
  }]
}));
const createEditMenu = reselect.createSelector(_ => undefined, () => ({
  id: 'editMenu',
  label: t$2('menus.editMenu'),
  submenu: [{
    id: 'undo',
    label: t$2('menus.undo'),
    role: 'undo'
  }, {
    id: 'redo',
    label: t$2('menus.redo'),
    role: 'redo'
  }, {
    type: 'separator'
  }, {
    id: 'cut',
    label: t$2('menus.cut'),
    role: 'cut'
  }, {
    id: 'copy',
    label: t$2('menus.copy'),
    role: 'copy'
  }, {
    id: 'paste',
    label: t$2('menus.paste'),
    role: 'paste'
  }, {
    id: 'selectAll',
    label: t$2('menus.selectAll'),
    role: 'selectAll'
  }]
}));
const selectViewDeps = reselect.createStructuredSelector({
  currentView: ({
    currentView
  }) => currentView,
  isSideBarEnabled: ({
    isSideBarEnabled
  }) => isSideBarEnabled,
  isTrayIconEnabled: ({
    isTrayIconEnabled
  }) => isTrayIconEnabled,
  isMenuBarEnabled: ({
    isMenuBarEnabled
  }) => isMenuBarEnabled,
  rootWindowState: ({
    rootWindowState
  }) => rootWindowState
});
const getCurrentView = async () => {
  const browserWindow = await getRootWindow();
  if (!browserWindow.isVisible()) {
    browserWindow.showInactive();
  }
  browserWindow.focus();
  return select(({
    currentView
  }) => currentView);
};
const getCurrentViewWebcontents = async () => {
  const currentView = await getCurrentView();
  const url = typeof currentView === 'object' ? currentView.url : null;
  if (!url) {
    return null;
  }
  return getWebContentsByServerUrl(url);
};
const createViewMenu = reselect.createSelector(selectViewDeps, ({
  currentView,
  isSideBarEnabled,
  isTrayIconEnabled,
  isMenuBarEnabled,
  rootWindowState
}) => ({
  id: 'viewMenu',
  label: t$2('menus.viewMenu'),
  submenu: [{
    id: 'reload',
    label: t$2('menus.reload'),
    accelerator: 'CommandOrControl+R',
    enabled: typeof currentView === 'object' && !!currentView.url,
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.reload();
      const currentView = await getCurrentView();
      if (typeof currentView === 'object' && !!currentView.url) {
        dispatch({
          type: WEBVIEW_SERVER_RELOADED,
          payload: {
            url: currentView.url
          }
        });
      }
    }
  }, {
    id: 'reloadClearingCache',
    label: t$2('menus.reloadClearingCache'),
    enabled: typeof currentView === 'object' && !!currentView.url,
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      if (guestWebContents) dispatch({
        type: CLEAR_CACHE_TRIGGERED,
        payload: guestWebContents.id
      });
      const currentView = await getCurrentView();
      if (typeof currentView === 'object' && !!currentView.url) {
        dispatch({
          type: WEBVIEW_SERVER_RELOADED,
          payload: {
            url: currentView.url
          }
        });
      }
    }
  }, {
    id: 'openDevTools',
    label: t$2('menus.openDevTools'),
    enabled: typeof currentView === 'object' && !!currentView.url,
    accelerator: process.platform === 'darwin' ? 'Command+Alt+I' : 'Ctrl+Shift+I',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.toggleDevTools();
    }
  }, {
    id: 'openDevToolsOnAllWindows',
    label: t$2('menus.openDevToolsOnAllWindows'),
    enabled: typeof currentView === 'object' && !!currentView.url,
    accelerator: process.platform === 'darwin' ? 'Command+Alt+G' : 'Ctrl+Shift+G',
    click: async () => {
      const windows = electron.BrowserWindow.getAllWindows();
      windows.forEach(window => {
        window.webContents.toggleDevTools();
      });
    }
  }, {
    type: 'separator'
  }, {
    id: 'back',
    label: t$2('menus.back'),
    enabled: typeof currentView === 'object' && !!currentView.url,
    accelerator: process.platform === 'darwin' ? 'Command+[' : 'Alt+Left',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.goBack();
    }
  }, {
    id: 'forward',
    label: t$2('menus.forward'),
    enabled: typeof currentView === 'object' && !!currentView.url,
    accelerator: process.platform === 'darwin' ? 'Command+]' : 'Alt+Right',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.goForward();
    }
  }, {
    type: 'separator'
  }, {
    id: 'showTrayIcon',
    label: t$2('menus.showTrayIcon'),
    type: 'checkbox',
    checked: isTrayIconEnabled,
    accelerator: process.platform === 'darwin' ? 'Shift+Command+T' : 'Ctrl+Shift+T',
    click: ({
      checked
    }) => {
      setTimeout(() => {
        dispatch({
          type: MENU_BAR_TOGGLE_IS_TRAY_ICON_ENABLED_CLICKED,
          payload: checked
        });
      }, 10);
    }
  }, ...on(process.platform === 'darwin', () => [{
    id: 'showFullScreen',
    label: t$2('menus.showFullScreen'),
    type: 'checkbox',
    checked: rootWindowState.fullscreen,
    accelerator: 'Control+Command+F',
    click: async ({
      checked: enabled
    }) => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      browserWindow.setFullScreen(enabled);
    }
  }]), ...on(process.platform !== 'darwin', () => [{
    id: 'showMenuBar',
    label: t$2('menus.showMenuBar'),
    type: 'checkbox',
    checked: isMenuBarEnabled,
    accelerator: process.platform === 'darwin' ? 'Shift+Command+M' : 'Ctrl+Shift+M',
    click: async ({
      checked
    }) => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_TOGGLE_IS_MENU_BAR_ENABLED_CLICKED,
        payload: checked
      });
    }
  }]), {
    id: 'showServerList',
    label: t$2('menus.showServerList'),
    type: 'checkbox',
    checked: isSideBarEnabled,
    accelerator: process.platform === 'darwin' ? 'Shift+Command+S' : 'Ctrl+Shift+S',
    click: async ({
      checked
    }) => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_TOGGLE_IS_SIDE_BAR_ENABLED_CLICKED,
        payload: checked
      });
    }
  }, {
    type: 'separator'
  }, {
    id: 'resetZoom',
    label: t$2('menus.resetZoom'),
    accelerator: 'CommandOrControl+0',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      guestWebContents === null || guestWebContents === void 0 || guestWebContents.setZoomLevel(0);
    }
  }, {
    id: 'zoomIn',
    label: t$2('menus.zoomIn'),
    accelerator: 'CommandOrControl+=',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      if (!guestWebContents) {
        return;
      }
      const zoomLevel = guestWebContents === null || guestWebContents === void 0 ? void 0 : guestWebContents.getZoomLevel();
      if (zoomLevel >= 9) {
        return;
      }
      guestWebContents.setZoomLevel(zoomLevel + 1);
    }
  }, {
    id: 'zoomOut',
    label: t$2('menus.zoomOut'),
    accelerator: 'CommandOrControl+-',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      if (!guestWebContents) {
        return;
      }
      const zoomLevel = guestWebContents.getZoomLevel();
      if (zoomLevel <= -9) {
        return;
      }
      guestWebContents.setZoomLevel(zoomLevel - 1);
    }
  }]
}));
const selectWindowDeps = reselect.createStructuredSelector({
  servers: ({
    servers
  }) => servers,
  currentView: ({
    currentView
  }) => currentView,
  isShowWindowOnUnreadChangedEnabled: ({
    isShowWindowOnUnreadChangedEnabled
  }) => isShowWindowOnUnreadChangedEnabled,
  isAddNewServersEnabled: ({
    isAddNewServersEnabled
  }) => isAddNewServersEnabled
});
const createWindowMenu = reselect.createSelector(selectWindowDeps, ({
  servers,
  currentView,
  isShowWindowOnUnreadChangedEnabled,
  isAddNewServersEnabled
}) => ({
  id: 'windowMenu',
  label: t$2('menus.windowMenu'),
  role: 'windowMenu',
  submenu: [...on(process.platform === 'darwin' && isAddNewServersEnabled, () => [{
    id: 'addNewServer',
    label: t$2('menus.addNewServer'),
    accelerator: 'CommandOrControl+N',
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_ADD_NEW_SERVER_CLICKED
      });
    }
  }, {
    type: 'separator'
  }]), ...on(servers.length > 0, () => [...servers.map((server, i) => {
    var _server$title;
    return {
      id: server.url,
      type: typeof currentView === 'object' && currentView.url === server.url ? 'checkbox' : 'normal',
      label: (_server$title = server.title) === null || _server$title === void 0 ? void 0 : _server$title.replace(/&/g, '&&'),
      checked: typeof currentView === 'object' && currentView.url === server.url,
      accelerator: `CommandOrControl+${i + 1}`,
      click: async () => {
        const browserWindow = await getRootWindow();
        if (!browserWindow.isVisible()) {
          browserWindow.showInactive();
        }
        browserWindow.focus();
        setTimeout(() => {
          dispatch({
            type: MENU_BAR_SELECT_SERVER_CLICKED,
            payload: server.url
          });
        }, 100);
      }
    };
  }), {
    type: 'separator'
  }]), {
    id: 'downloads',
    label: t$2('menus.downloads'),
    checked: currentView === 'downloads',
    accelerator: 'CommandOrControl+D',
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: SIDE_BAR_DOWNLOADS_BUTTON_CLICKED
      });
    }
  }, {
    id: 'settings',
    label: t$2('menus.settings'),
    checked: currentView === 'settings',
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: SIDE_BAR_SETTINGS_BUTTON_CLICKED
      });
    }
  }, {
    id: 'showOnUnreadMessage',
    type: 'checkbox',
    label: t$2('menus.showOnUnreadMessage'),
    checked: isShowWindowOnUnreadChangedEnabled,
    click: async ({
      checked
    }) => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_TOGGLE_IS_SHOW_WINDOW_ON_UNREAD_CHANGED_ENABLED_CLICKED,
        payload: checked
      });
    }
  }, {
    type: 'separator'
  }, {
    id: 'minimize',
    role: 'minimize',
    label: t$2('menus.minimize'),
    accelerator: 'CommandOrControl+M'
  }, {
    id: 'close',
    role: 'close',
    label: t$2('menus.close'),
    accelerator: 'CommandOrControl+W'
  }]
}));
const selectHelpDeps = reselect.createStructuredSelector({
  isDeveloperModeEnabled: ({
    isDeveloperModeEnabled
  }) => isDeveloperModeEnabled,
  isVideoCallDevtoolsAutoOpenEnabled: ({
    isVideoCallDevtoolsAutoOpenEnabled
  }) => isVideoCallDevtoolsAutoOpenEnabled
});
const createHelpMenu = reselect.createSelector(selectHelpDeps, ({
  isDeveloperModeEnabled,
  isVideoCallDevtoolsAutoOpenEnabled
}) => ({
  id: 'helpMenu',
  label: t$2('menus.helpMenu'),
  role: 'help',
  submenu: [{
    id: 'documentation',
    label: t$2('menus.documentation'),
    click: () => {
      openExternal(docs.index);
    }
  }, {
    id: 'reportIssue',
    label: t$2('menus.reportIssue'),
    click: () => {
      openExternal(docs.newIssue);
    }
  }, {
    type: 'separator'
  }, {
    id: 'reload-window',
    label: t$2('menus.reload'),
    accelerator: 'CommandOrControl+Shift+R',
    click: async () => {
      const guestWebContents = await getCurrentViewWebcontents();
      if (guestWebContents) dispatch({
        type: CLEAR_CACHE_TRIGGERED,
        payload: guestWebContents.id
      });
      const currentView = await getCurrentView();
      if (typeof currentView === 'object' && !!currentView.url) {
        dispatch({
          type: WEBVIEW_SERVER_RELOADED,
          payload: {
            url: currentView.url
          }
        });
      }
    }
  }, {
    id: 'toggleDevTools',
    label: t$2('menus.toggleDevTools'),
    accelerator: 'CommandOrControl+Shift+D',
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      browserWindow.webContents.toggleDevTools();
    }
  }, {
    id: 'developerMode',
    type: 'checkbox',
    label: t$2('menus.developerMode'),
    checked: isDeveloperModeEnabled,
    click: async ({
      checked
    }) => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_TOGGLE_IS_DEVELOPER_MODE_ENABLED_CLICKED,
        payload: checked
      });
    }
  }, {
    id: 'videoCallToolsSubmenu',
    label: t$2('menus.videoCallTools'),
    submenu: [{
      id: 'videoCallDevTools',
      label: t$2('menus.videoCallDevTools'),
      click: async () => {
        const browserWindow = await getRootWindow();
        if (!browserWindow.isVisible()) {
          browserWindow.showInactive();
        }
        browserWindow.focus();
        try {
          const success = await openVideoCallWebviewDevTools();
          if (!success) {
            console.log('No video call window available for developer tools');
          }
        } catch (error) {
          console.error('Error opening video call developer tools:', error);
        }
      }
    }, {
      id: 'videoCallDevToolsAutoOpen',
      type: 'checkbox',
      label: t$2('menus.videoCallDevToolsAutoOpen'),
      checked: isVideoCallDevtoolsAutoOpenEnabled,
      click: async ({
        checked
      }) => {
        const browserWindow = await getRootWindow();
        if (!browserWindow.isVisible()) {
          browserWindow.showInactive();
        }
        browserWindow.focus();
        dispatch({
          type: MENU_BAR_TOGGLE_IS_VIDEO_CALL_DEVTOOLS_AUTO_OPEN_ENABLED_CLICKED,
          payload: checked
        });
      }
    }]
  }, {
    id: 'openConfigFolder',
    label: t$2('menus.openConfigFolder'),
    click: async () => {
      electron.shell.showItemInFolder(path__default.default.join(electron.app.getPath('userData'), 'config.json'));
    }
  }, {
    type: 'separator'
  }, {
    id: 'clearTrustedCertificates',
    label: t$2('menus.clearTrustedCertificates'),
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: CERTIFICATES_CLEARED
      });
    }
  }, ...on(!process.mas, () => [{
    id: 'resetAppData',
    label: t$2('menus.resetAppData'),
    click: async () => {
      const permitted = await askForAppDataReset();
      if (permitted) {
        relaunchApp('--reset-app-data');
      }
    }
  }]), {
    type: 'separator'
  }, {
    id: 'learnMore',
    label: t$2('menus.learnMore'),
    click: () => {
      openExternal(rocketchat.site);
    }
  }, ...on(process.platform !== 'darwin', () => [{
    id: 'about',
    label: t$2('menus.about', {
      appName: electron.app.name
    }),
    click: async () => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: MENU_BAR_ABOUT_CLICKED
      });
    }
  }])]
}));
const selectMenuBarTemplate = reselect.createSelector([createAppMenu, createEditMenu, createViewMenu, createWindowMenu, createHelpMenu], (...menus) => menus);
const selectMenuBarTemplateAsJson = reselect.createSelector(_state => selectMenuBarTemplate, template => JSON.stringify(template));
class MenuBarService extends Service {
  initialize() {
    this.watch(selectMenuBarTemplateAsJson, async () => {
      const menuBarTemplate = select(selectMenuBarTemplate);
      const menu = electron.Menu.buildFromTemplate(menuBarTemplate);
      if (process.platform === 'darwin') {
        electron.Menu.setApplicationMenu(menu);
        return;
      }
      electron.Menu.setApplicationMenu(null);
      (await getRootWindow()).setMenu(menu);
    });
  }
}
var menuBar = new MenuBarService();

const t$1 = i18next__default.default.t.bind(i18next__default.default);
const ids = ['bold', 'italic', 'strike', 'inline_code', 'multi_line'];
const createTouchBar = () => {
  const serverSelectionScrubber = new electron.TouchBar.TouchBarScrubber({
    selectedStyle: 'background',
    mode: 'free',
    continuous: false,
    items: [],
    select: async index => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      const url = select(({
        servers
      }) => servers[index].url);
      dispatch({
        type: TOUCH_BAR_SELECT_SERVER_TOUCHED,
        payload: url
      });
    }
  });
  const serverSelectionPopover = new electron.TouchBar.TouchBarPopover({
    label: t$1('touchBar.selectServer'),
    icon: undefined,
    items: new electron.TouchBar({
      items: [serverSelectionScrubber]
    }),
    showCloseButton: true
  });
  const messageBoxFormattingButtons = new electron.TouchBar.TouchBarSegmentedControl({
    mode: 'buttons',
    segments: ids.map(id => ({
      icon: electron.nativeImage.createFromPath(`${electron.app.getAppPath()}/app/images/touch-bar/${id}.png`),
      enabled: false
    })),
    change: async selectedIndex => {
      const browserWindow = await getRootWindow();
      if (!browserWindow.isVisible()) {
        browserWindow.showInactive();
      }
      browserWindow.focus();
      dispatch({
        type: TOUCH_BAR_FORMAT_BUTTON_TOUCHED,
        payload: ids[selectedIndex]
      });
    }
  });
  const touchBar = new electron.TouchBar({
    items: [serverSelectionPopover, new electron.TouchBar.TouchBarSpacer({
      size: 'flexible'
    }), messageBoxFormattingButtons, new electron.TouchBar.TouchBarSpacer({
      size: 'flexible'
    })]
  });
  getRootWindow().then(browserWindow => browserWindow.setTouchBar(touchBar));
  return [touchBar, serverSelectionPopover, serverSelectionScrubber, messageBoxFormattingButtons];
};
const updateServerSelectionPopover = (serverSelectionPopover, currentServer) => {
  var _currentServer$title;
  serverSelectionPopover.label = (_currentServer$title = currentServer === null || currentServer === void 0 ? void 0 : currentServer.title) !== null && _currentServer$title !== void 0 ? _currentServer$title : t$1('touchBar.selectServer');
  serverSelectionPopover.icon = currentServer !== null && currentServer !== void 0 && currentServer.favicon ? electron.nativeImage.createFromDataURL(currentServer === null || currentServer === void 0 ? void 0 : currentServer.favicon) : electron.nativeImage.createEmpty();
};
const updateServerSelectionScrubber = (serverSelectionScrubber, servers) => {
  serverSelectionScrubber.items = servers.map(server => {
    var _server$title;
    return {
      label: (_server$title = server.title) === null || _server$title === void 0 ? void 0 : _server$title.padEnd(30),
      icon: server.favicon ? electron.nativeImage.createFromDataURL(server.favicon) : undefined
    };
  });
};
const toggleMessageFormattingButtons = (messageBoxFormattingButtons, isEnabled) => {
  messageBoxFormattingButtons.segments.forEach(segment => {
    segment.enabled = isEnabled;
  });
};
const selectCurrentServer = ({
  servers,
  currentView
}) => {
  var _servers$find;
  return typeof currentView === 'object' ? (_servers$find = servers.find(({
    url
  }) => url === currentView.url)) !== null && _servers$find !== void 0 ? _servers$find : null : null;
};
class TouchBarService extends Service {
  initialize() {
    if (process.platform !== 'darwin') {
      return;
    }
    const [touchBar, serverSelectionPopover, serverSelectionScrubber, messageBoxFormattingButtons] = createTouchBar();
    this.watch(selectCurrentServer, currentServer => {
      updateServerSelectionPopover(serverSelectionPopover, currentServer);
      getRootWindow().then(browserWindow => browserWindow.setTouchBar(touchBar));
    });
    this.watch(({
      servers
    }) => servers, servers => {
      updateServerSelectionScrubber(serverSelectionScrubber, servers);
      getRootWindow().then(browserWindow => browserWindow.setTouchBar(touchBar));
    });
    this.watch(({
      isMessageBoxFocused
    }) => isMessageBoxFocused !== null && isMessageBoxFocused !== void 0 ? isMessageBoxFocused : false, isMessageBoxFocused => {
      toggleMessageFormattingButtons(messageBoxFormattingButtons, isMessageBoxFocused);
      getRootWindow().then(browserWindow => browserWindow.setTouchBar(touchBar));
    });
  }
}
var touchBar = new TouchBarService();

const t = i18next__default.default.t.bind(i18next__default.default);
const selectIsRootWindowVisible = ({
  rootWindowState: {
    visible
  }
}) => visible;
const selectHasHideOnTrayNotificationShown = ({
  hasHideOnTrayNotificationShown
}) => hasHideOnTrayNotificationShown;
const createTrayIcon = () => {
  const image = getTrayIconPath({
    platform: process.platform,
    badge: undefined
  });
  const trayIcon = new electron.Tray(electron.nativeImage.createEmpty());
  if (process.platform !== 'darwin') {
    trayIcon.addListener('click', async () => {
      const isRootWindowVisible = select(selectIsRootWindowVisible);
      const browserWindow = await getRootWindow();
      if (isRootWindowVisible) {
        browserWindow.hide();
        return;
      }
      browserWindow.show();
    });
  }
  trayIcon.addListener('balloon-click', async () => {
    const isRootWindowVisible = select(selectIsRootWindowVisible);
    const browserWindow = await getRootWindow();
    if (isRootWindowVisible) {
      browserWindow.hide();
      return;
    }
    browserWindow.show();
  });
  trayIcon.addListener('right-click', (_event, bounds) => {
    trayIcon.popUpContextMenu(undefined, bounds);
  });
  trayIcon.setImage(electron.nativeImage.createFromPath(image));
  return trayIcon;
};
const updateTrayIconImage = (trayIcon, badge) => {
  const image = getTrayIconPath({
    platform: process.platform,
    badge
  });
  trayIcon.setImage(electron.nativeImage.createFromPath(image));
};
const updateTrayIconTitle = (trayIcon, globalBadge) => {
  const title = Number.isInteger(globalBadge) ? String(globalBadge) : '';
  trayIcon.setTitle(title);
};
const updateTrayIconToolTip = (trayIcon, globalBadge) => {
  if (globalBadge === 'â¢') {
    trayIcon.setToolTip(t('tray.tooltip.unreadMessage', {
      appName: electron.app.name
    }));
    return;
  }
  if (Number.isInteger(globalBadge)) {
    trayIcon.setToolTip(t('tray.tooltip.unreadMention', {
      appName: electron.app.name,
      count: globalBadge
    }));
    return;
  }
  trayIcon.setToolTip(t('tray.tooltip.noUnreadMessage', {
    appName: electron.app.name
  }));
};
const warnStillRunning = trayIcon => {
  if (process.platform !== 'win32') {
    return;
  }
  const hasHideOnTrayNotificationShown = select(selectHasHideOnTrayNotificationShown);
  if (!hasHideOnTrayNotificationShown) {
    trayIcon.displayBalloon({
      icon: getAppIconPath({
        platform: process.platform
      }),
      title: t('tray.balloon.stillRunning.title', {
        appName: electron.app.name
      }),
      content: t('tray.balloon.stillRunning.content', {
        appName: electron.app.name
      })
    });
    dispatch({
      type: SET_HAS_TRAY_MINIMIZE_NOTIFICATION_SHOWN,
      payload: true
    });
  }
};
const manageTrayIcon = async () => {
  const trayIcon = createTrayIcon();
  const unwatchGlobalBadge = watch(selectGlobalBadge, globalBadge => {
    updateTrayIconImage(trayIcon, globalBadge);
    updateTrayIconTitle(trayIcon, globalBadge);
    updateTrayIconToolTip(trayIcon, globalBadge);
  });
  let firstTrayIconBalloonShown = false;
  const unwatchIsRootWindowVisible = watch(selectIsRootWindowVisible, (isRootWindowVisible, prevIsRootWindowVisible) => {
    const menuTemplate = [{
      label: isRootWindowVisible ? t('tray.menu.hide') : t('tray.menu.show'),
      click: async () => {
        const isRootWindowVisible = select(selectIsRootWindowVisible);
        const browserWindow = await getRootWindow();
        if (isRootWindowVisible) {
          browserWindow.hide();
          return;
        }
        browserWindow.show();
      }
    }, {
      label: t('tray.menu.quit'),
      click: () => {
        electron.app.quit();
      }
    }];
    const menu = electron.Menu.buildFromTemplate(menuTemplate);
    trayIcon.setContextMenu(menu);
    if (prevIsRootWindowVisible && !isRootWindowVisible && process.platform === 'win32' && !firstTrayIconBalloonShown) {
      warnStillRunning(trayIcon);
      firstTrayIconBalloonShown = true;
    }
  });
  return () => {
    unwatchGlobalBadge();
    unwatchIsRootWindowVisible();
    trayIcon.destroy();
  };
};
class TrayIconService extends Service {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "tearDownPromise", null);
  }
  initialize() {
    this.watch(({
      isTrayIconEnabled
    }) => isTrayIconEnabled !== null && isTrayIconEnabled !== void 0 ? isTrayIconEnabled : true, isTrayIconEnabled => {
      if (!this.tearDownPromise && isTrayIconEnabled) {
        this.tearDownPromise = manageTrayIcon();
      } else if (this.tearDownPromise && !isTrayIconEnabled) {
        this.tearDownPromise.then(cleanUp => cleanUp());
        this.tearDownPromise = null;
      }
    });
  }
  destroy() {
    var _this$tearDownPromise;
    (_this$tearDownPromise = this.tearDownPromise) === null || _this$tearDownPromise === void 0 || _this$tearDownPromise.then(cleanUp => cleanUp());
    this.tearDownPromise = null;
  }
}
var trayIcon = new TrayIconService();

const readJsonObject = async filePath => {
  try {
    const content = await fs__default.default.promises.readFile(filePath, 'utf8');
    const json = JSON.parse(content);
    return json && typeof json === 'object' && !Array.isArray(json) ? json : {};
  } catch (error) {
    return {};
  }
};
const readAppJsonObject = async basename => {
  const filePath = path__default.default.join(electron.app.getAppPath(), electron.app.getAppPath().endsWith('app.asar') ? '..' : '.', basename);
  return readJsonObject(filePath);
};
const readUserJsonObject = async basename => {
  const filePath = path__default.default.join(electron.app.getPath('userData'), basename);
  return readJsonObject(filePath);
};
const loadAppConfiguration = async () => readAppJsonObject('update.json');
const loadUserConfiguration = async () => readUserJsonObject('update.json');
const mergeConfigurations = (defaultConfiguration, appConfiguration, userConfiguration) => {
  const configuration = {
    ...defaultConfiguration,
    ...(typeof appConfiguration.forced === 'boolean' && {
      isEachUpdatesSettingConfigurable: !appConfiguration.forced
    }),
    ...(typeof appConfiguration.canUpdate === 'boolean' && {
      isUpdatingEnabled: appConfiguration.canUpdate
    }),
    ...(typeof appConfiguration.autoUpdate === 'boolean' && {
      doCheckForUpdatesOnStartup: appConfiguration.autoUpdate
    }),
    ...(typeof appConfiguration.skip === 'string' && {
      skippedUpdateVersion: appConfiguration.skip
    }),
    ...(typeof appConfiguration.channel === 'string' && {
      updateChannel: appConfiguration.channel
    })
  };
  if (typeof userConfiguration.autoUpdate === 'boolean' && (configuration.isEachUpdatesSettingConfigurable || typeof appConfiguration.autoUpdate === 'undefined')) {
    configuration.doCheckForUpdatesOnStartup = userConfiguration.autoUpdate;
  }
  if (typeof userConfiguration.skip === 'string' && (configuration.isEachUpdatesSettingConfigurable || typeof appConfiguration.skip === 'undefined')) {
    configuration.skippedUpdateVersion = userConfiguration.skip;
  }
  if (typeof userConfiguration.channel === 'string' && (configuration.isEachUpdatesSettingConfigurable || typeof appConfiguration.channel === 'undefined')) {
    configuration.updateChannel = userConfiguration.channel;
  }
  return configuration;
};
const loadConfiguration = async () => {
  const defaultConfiguration = select(({
    isUpdatingEnabled,
    doCheckForUpdatesOnStartup,
    skippedUpdateVersion,
    isReportEnabled,
    isFlashFrameEnabled,
    isHardwareAccelerationEnabled,
    isInternalVideoChatWindowEnabled,
    updateChannel
  }) => ({
    isUpdatingAllowed: process.platform === 'linux' && !!process.env.APPIMAGE || process.platform === 'win32' && !process.windowsStore || process.platform === 'darwin' && !process.mas,
    isEachUpdatesSettingConfigurable: true,
    isUpdatingEnabled,
    doCheckForUpdatesOnStartup,
    skippedUpdateVersion,
    isReportEnabled,
    isFlashFrameEnabled,
    isHardwareAccelerationEnabled,
    isInternalVideoChatWindowEnabled,
    updateChannel
  }));
  const appConfiguration = await loadAppConfiguration();
  const userConfiguration = await loadUserConfiguration();
  return mergeConfigurations(defaultConfiguration, appConfiguration, userConfiguration);
};
const setupUpdates = async () => {
  // This is necessary to make the updater work in development mode
  {
    Object.defineProperty(electron.app, 'isPackaged', {
      get() {
        return true;
      }
    });
    electronUpdater.autoUpdater.updateConfigPath = path__default.default.join(electron.app.getAppPath(), 'dev-app-update.yml');
  }
  electronUpdater.autoUpdater.autoDownload = false;
  const {
    isUpdatingAllowed,
    isEachUpdatesSettingConfigurable,
    isUpdatingEnabled,
    doCheckForUpdatesOnStartup,
    skippedUpdateVersion,
    isReportEnabled,
    isFlashFrameEnabled,
    isHardwareAccelerationEnabled,
    isInternalVideoChatWindowEnabled,
    updateChannel
  } = await loadConfiguration();
  dispatch({
    type: UPDATES_READY,
    payload: {
      isUpdatingAllowed,
      isEachUpdatesSettingConfigurable,
      isUpdatingEnabled,
      doCheckForUpdatesOnStartup,
      skippedUpdateVersion,
      isReportEnabled,
      isFlashFrameEnabled,
      isHardwareAccelerationEnabled,
      isInternalVideoChatWindowEnabled,
      updateChannel
    }
  });
  if (!isUpdatingAllowed || !isUpdatingEnabled) {
    return;
  }

  // Set initial channel
  electronUpdater.autoUpdater.channel = updateChannel;

  // Enable prerelease updates for alpha and beta channels
  if (updateChannel === 'alpha' || updateChannel === 'beta') {
    electronUpdater.autoUpdater.allowPrerelease = true;
  }

  // Listen for channel changes
  listen(ABOUT_DIALOG_UPDATE_CHANNEL_CHANGED, async action => {
    const newChannel = action.payload;
    electronUpdater.autoUpdater.channel = newChannel;

    // Enable prerelease updates for alpha and beta channels
    electronUpdater.autoUpdater.allowPrerelease = newChannel === 'alpha' || newChannel === 'beta';
    dispatch({
      type: UPDATES_CHANNEL_CHANGED,
      payload: newChannel
    });
  });
  electronUpdater.autoUpdater.addListener('checking-for-update', () => {
    dispatch({
      type: UPDATES_CHECKING_FOR_UPDATE
    });
  });
  electronUpdater.autoUpdater.addListener('update-available', ({
    version
  }) => {
    const skippedUpdateVersion = select(({
      skippedUpdateVersion
    }) => skippedUpdateVersion);
    if (skippedUpdateVersion === version) {
      dispatch({
        type: UPDATES_NEW_VERSION_NOT_AVAILABLE
      });
      return;
    }
    dispatch({
      type: UPDATES_NEW_VERSION_AVAILABLE,
      payload: version
    });
  });
  electronUpdater.autoUpdater.addListener('update-not-available', () => {
    dispatch({
      type: UPDATES_NEW_VERSION_NOT_AVAILABLE
    });
  });
  const nativeUpdateDownloadedCallback = () => {
    electron.autoUpdater.removeListener('update-downloaded', nativeUpdateDownloadedCallback);
    electron.autoUpdater.quitAndInstall();
  };
  electronUpdater.autoUpdater.addListener('update-downloaded', async () => {
    const response = await askUpdateInstall();
    if (response === AskUpdateInstallResponse.INSTALL_LATER) {
      await warnAboutInstallUpdateLater();
      return;
    }
    try {
      setImmediate(() => {
        electron.app.removeAllListeners('window-all-closed');
        if (process.platform === 'darwin') {
          const allBrowserWindows = electron.BrowserWindow.getAllWindows();
          allBrowserWindows.forEach(browserWindow => {
            browserWindow.removeAllListeners('close');
            browserWindow.destroy();
          });
          electron.autoUpdater.checkForUpdates();
          electron.autoUpdater.on('update-downloaded', nativeUpdateDownloadedCallback);
        } else {
          electronUpdater.autoUpdater.quitAndInstall(true, true);
        }
      });
    } catch (error) {
      error instanceof Error && dispatch({
        type: UPDATES_ERROR_THROWN,
        payload: {
          message: error.message,
          stack: error.stack,
          name: error.name
        }
      });
    }
  });
  electronUpdater.autoUpdater.addListener('error', error => {
    dispatch({
      type: UPDATES_ERROR_THROWN,
      payload: {
        message: error.message,
        stack: error.stack,
        name: error.name
      }
    });
  });
  if (doCheckForUpdatesOnStartup) {
    try {
      await electronUpdater.autoUpdater.checkForUpdates();
    } catch (error) {
      error instanceof Error && dispatch({
        type: UPDATES_ERROR_THROWN,
        payload: {
          message: error.message,
          stack: error.stack,
          name: error.name
        }
      });
    }
  }
  listen(UPDATES_CHECK_FOR_UPDATES_REQUESTED, async () => {
    try {
      setTimeout(() => {
        electronUpdater.autoUpdater.checkForUpdates();
      }, 100);
    } catch (error) {
      error instanceof Error && dispatch({
        type: UPDATES_ERROR_THROWN,
        payload: {
          message: error.message,
          stack: error.stack,
          name: error.name
        }
      });
    }
  });
  listen(UPDATE_DIALOG_SKIP_UPDATE_CLICKED, async action => {
    await warnAboutUpdateSkipped();
    dispatch({
      type: UPDATE_SKIPPED,
      payload: action.payload
    });
  });
  listen(UPDATE_DIALOG_INSTALL_BUTTON_CLICKED, async () => {
    await warnAboutUpdateDownload();
    try {
      electronUpdater.autoUpdater.downloadUpdate();
    } catch (error) {
      error instanceof Error && dispatch({
        type: UPDATES_ERROR_THROWN,
        payload: {
          message: error.message,
          stack: error.stack,
          name: error.name
        }
      });
    }
  });
};

const SYSTEM_LOCKING_SCREEN = 'system/locking-screen';
const SYSTEM_SUSPENDING = 'system/suspending';

const setupPowerMonitor = () => {
  electron.powerMonitor.addListener('suspend', () => {
    dispatch({
      type: SYSTEM_SUSPENDING
    });
  });
  electron.powerMonitor.addListener('lock-screen', () => {
    dispatch({
      type: SYSTEM_LOCKING_SCREEN
    });
  });
  handle('power-monitor/get-system-idle-state', async (_webContents, idleThreshold) => electron.powerMonitor.getSystemIdleState(idleThreshold));
};

electronDl__default.default({
  saveAs: true
});
const start = async () => {
  setUserDataDirectory();
  performElectronStartup();
  await electron.app.whenReady();
  createMainReduxStore();
  const localStorage = await exportLocalStorage();
  await mergePersistableValues(localStorage);
  await setupServers(localStorage);
  i18n.setUp();
  await i18n.wait();
  setupApp();
  setupMainErrorHandling();
  createRootWindow();
  startOutlookCalendarUrlHandler();
  attachGuestWebContentsEvents();
  await showRootWindow();

  // React DevTools is currently incompatible with Electron 10
  // if ("development" === 'development') {
  //   installDevTools();
  // }
  watchMachineTheme();
  setupNotifications();
  setupScreenSharing();
  startVideoCallWindowHandler();
  await setupSpellChecking();
  setupDeepLinks();
  await setupNavigation();
  setupPowerMonitor();
  await setupUpdates();
  setupDownloads();
  handleCertificatesManager();
  dock.setUp();
  menuBar.setUp();
  touchBar.setUp();
  trayIcon.setUp();
  electron.app.addListener('before-quit', () => {
    dock.tearDown();
    menuBar.tearDown();
    touchBar.tearDown();
    trayIcon.tearDown();
    cleanupVideoCallResources();
  });
  watchAndPersistChanges();
  handleJitsiDesktopCapturerGetSources();
  handleDesktopCapturerGetSources();
  handleClearCacheDialog();
  startDocumentViewerHandler();
  checkSupportedVersionServers();
  await processDeepLinksInArgs();
  console.log('Application initialization completed successfully');
};
start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
